function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
function $ed7b73cd8f8fda0a$export$2e2bcd8739ae039(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to " + action + " private field on non-instance");
    return privateMap.get(receiver);
}


function $d443089ebc2e15a8$export$2e2bcd8739ae039(receiver, descriptor) {
    if (descriptor.get) return descriptor.get.call(receiver);
    return descriptor.value;
}


function $5c90f01a1e93ad01$export$2e2bcd8739ae039(receiver, privateMap) {
    var descriptor = $ed7b73cd8f8fda0a$export$2e2bcd8739ae039(receiver, privateMap, "get");
    return $d443089ebc2e15a8$export$2e2bcd8739ae039(receiver, descriptor);
}


function $20b547a1dcb54124$export$2e2bcd8739ae039(receiver, descriptor, value) {
    if (descriptor.set) descriptor.set.call(receiver, value);
    else {
        if (!descriptor.writable) // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
        descriptor.value = value;
    }
}


function $c7458e7a3415e664$export$2e2bcd8739ae039(receiver, privateMap, value) {
    var descriptor = $ed7b73cd8f8fda0a$export$2e2bcd8739ae039(receiver, privateMap, "set");
    $20b547a1dcb54124$export$2e2bcd8739ae039(receiver, descriptor, value);
    return value;
}

function $2eec7714a30d92b0$export$2e2bcd8739ae039(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return fn;
}

function $cfef344cd38c105c$export$2e2bcd8739ae039(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}



var $6716112bc694bd6e$exports = {};
/*! dom-to-image-more 06-12-2021 */ !function(e1) {
    var c = {
        escape: function(e) {
            return e.replace(/([.*+?^${}()|\[\]\/\\])/g, "\\$1");
        },
        parseExtension: t1,
        mimeType: function(e2) {
            e2 = t1(e2).toLowerCase();
            return (function() {
                var e = "application/font-woff", t = "image/jpeg";
                return {
                    woff: e,
                    woff2: e,
                    ttf: "application/font-truetype",
                    eot: "application/vnd.ms-fontobject",
                    png: "image/png",
                    jpg: t,
                    jpeg: t,
                    gif: "image/gif",
                    tiff: "image/tiff",
                    svg: "image/svg+xml"
                };
            })()[e2] || "";
        },
        dataAsUrl: function(e, t) {
            return "data:" + t + ";base64," + e;
        },
        isDataUrl: function(e) {
            return -1 !== e.search(/^(data:)/);
        },
        canvasToBlob: function(t2) {
            return t2.toBlob ? new Promise(function(e) {
                t2.toBlob(e);
            }) : (function(i) {
                return new Promise(function(e) {
                    for(var t = d(i.toDataURL().split(",")[1]), n = t.length, r = new Uint8Array(n), o = 0; o < n; o++)r[o] = t.charCodeAt(o);
                    e(new Blob([
                        r
                    ], {
                        type: "image/png"
                    }));
                });
            })(t2);
        },
        resolveUrl: function(e, t) {
            var n = document.implementation.createHTMLDocument(), r = n.createElement("base");
            n.head.appendChild(r);
            var o = n.createElement("a");
            return n.body.appendChild(o), r.href = t, o.href = e, o.href;
        },
        getAndEncode: function(a) {
            p.impl.options.cacheBust && (a += (/\?/.test(a) ? "&" : "?") + (new Date).getTime());
            return new Promise(function(n) {
                var e3, t3, r = p.impl.options.httpTimeout, o = new XMLHttpRequest;
                function i(e) {
                    console.error(e), n("");
                }
                o.onreadystatechange = function() {
                    var t;
                    4 === o.readyState && (200 === o.status ? ((t = new FileReader).onloadend = function() {
                        var e = t.result.split(/,/)[1];
                        n(e);
                    }, t.readAsDataURL(o.response)) : e3 ? n(e3) : i("cannot fetch resource: " + a + ", status: " + o.status));
                }, o.ontimeout = function() {
                    e3 ? n(e3) : i("timeout of " + r + "ms occured while fetching resource: " + a);
                }, o.responseType = "blob", o.timeout = r, p.impl.options.useCredentials && (o.withCredentials = !0), o.open("GET", a, !0), o.send(), !p.impl.options.imagePlaceholder || (t3 = p.impl.options.imagePlaceholder.split(/,/)) && t3[1] && (e3 = t3[1]);
            });
        },
        uid: function() {
            var e = 0;
            return function() {
                return "u" + ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4) + e++;
            };
        }(),
        delay: function(n) {
            return function(t) {
                return new Promise(function(e) {
                    setTimeout(function() {
                        e(t);
                    }, n);
                });
            };
        },
        asArray: function(e) {
            for(var t = [], n = e.length, r = 0; r < n; r++)t.push(e[r]);
            return t;
        },
        escapeXhtml: function(e) {
            return e.replace(/%/g, "%25").replace(/#/g, "%23").replace(/\n/g, "%0A");
        },
        makeImage: function(r) {
            return "data:," === r ? Promise.resolve() : new Promise(function(e, t) {
                var n = new Image;
                p.impl.options.useCredentials && (n.crossOrigin = "use-credentials"), n.onload = function() {
                    e(n);
                }, n.onerror = t, n.src = r;
            });
        },
        width: function(e) {
            var t = r1(e, "border-left-width"), n = r1(e, "border-right-width");
            return e.scrollWidth + t + n;
        },
        height: function(e) {
            var t = r1(e, "border-top-width"), n = r1(e, "border-bottom-width");
            return e.scrollHeight + t + n;
        }
    };
    function t1(e) {
        e = /\.([^\.\/]*?)(\?|$)/g.exec(e);
        return e ? e[1] : "";
    }
    function r1(e, t) {
        t = g(e).getPropertyValue(t);
        return parseFloat(t.replace("px", ""));
    }
    var o1, i1 = {
        inlineAll: function(t4, r, o) {
            return n1(t4) ? Promise.resolve(t4).then(a1).then(function(e4) {
                var n = Promise.resolve(t4);
                return e4.forEach(function(t) {
                    n = n.then(function(e) {
                        return u1(e, t, r, o);
                    });
                }), n;
            }) : Promise.resolve(t4);
        },
        shouldProcess: n1,
        impl: {
            readUrls: a1,
            inline: u1
        }
    };
    function n1(e) {
        return -1 !== e.search(o1);
    }
    function a1(e5) {
        for(var t, n = []; null !== (t = o1.exec(e5));)n.push(t[1]);
        return n.filter(function(e) {
            return !c.isDataUrl(e);
        });
    }
    function u1(t, n, r, e6) {
        return Promise.resolve(n).then(function(e) {
            return r ? c.resolveUrl(e, r) : e;
        }).then(e6 || c.getAndEncode).then(function(e) {
            return c.dataAsUrl(e, c.mimeType(n));
        }).then(function(e) {
            return t.replace(new RegExp("(url\\(['\"]?)(" + c.escape(n) + ")(['\"]?\\))", "g"), "$1" + e + "$3");
        });
    }
    var s = {
        resolveAll: function() {
            return l().then(function(e7) {
                return Promise.all(e7.map(function(e) {
                    return e.resolve();
                }));
            }).then(function(e) {
                return e.join("\n");
            });
        },
        impl: {
            readAll: l
        }
    };
    function l() {
        function t5(t) {
            return {
                resolve: function() {
                    var e = (t.parentStyleSheet || {
                    }).href;
                    return i1.inlineAll(t.cssText, e);
                },
                src: function() {
                    return t.style.getPropertyValue("src");
                }
            };
        }
        return Promise.resolve(c.asArray(document.styleSheets)).then(function(e8) {
            var n = [];
            return e8.forEach(function(t) {
                if (Object.getPrototypeOf(t).hasOwnProperty("cssRules")) try {
                    c.asArray(t.cssRules || []).forEach(n.push.bind(n));
                } catch (e) {
                    console.log("Error while reading CSS rules from " + t.href, e.toString());
                }
            }), n;
        }).then(function(e9) {
            return e9.filter(function(e) {
                return e.type === CSSRule.FONT_FACE_RULE;
            }).filter(function(e) {
                return i1.shouldProcess(e.style.getPropertyValue("src"));
            });
        }).then(function(e) {
            return e.map(t5);
        });
    }
    var f = {
        inlineAll: function t6(e10) {
            if (!(e10 instanceof Element)) return Promise.resolve(e10);
            function n2(t) {
                var n = t.style.getPropertyValue("background");
                return n ? i1.inlineAll(n).then(function(e) {
                    t.style.setProperty("background", e, n);
                }).then(function() {
                    return t;
                }) : Promise.resolve(t);
            }
            return n2(e10).then(function() {
                return e10 instanceof HTMLImageElement ? h(e10).inline() : Promise.all(c.asArray(e10.childNodes).map(function(e) {
                    return t6(e);
                }));
            });
        },
        impl: {
            newImage: h
        }
    };
    function h(n) {
        return {
            inline: function(e11) {
                return c.isDataUrl(n.src) ? Promise.resolve() : Promise.resolve(n.src).then(e11 || c.getAndEncode).then(function(e) {
                    return c.dataAsUrl(e, c.mimeType(n.src));
                }).then(function(t) {
                    return new Promise(function(e) {
                        n.onload = e, n.onerror = e, n.src = t;
                    });
                });
            }
        };
    }
    var m = {
        imagePlaceholder: void 0,
        cacheBust: (o1 = /url\(['"]?([^'"]+?)['"]?\)/g, false),
        useCredentials: !1,
        httpTimeout: 30000
    }, p = {
        toSvg: y,
        toPng: function(e12, t) {
            return (t = t || {
            }).raster = !0, v(e12, t).then(function(e) {
                return e.toDataURL();
            });
        },
        toJpeg: function(e13, t) {
            return (t = t || {
            }).raster = !0, v(e13, t).then(function(e) {
                return e.toDataURL("image/jpeg", t.quality || 1);
            });
        },
        toBlob: function(e, t) {
            return (t = t || {
            }).raster = !0, v(e, t).then(c.canvasToBlob);
        },
        toPixelData: function(t, e14) {
            return (e14 = e14 || {
            }).raster = !0, v(t, e14).then(function(e) {
                return e.getContext("2d").getImageData(0, 0, c.width(t), c.height(t)).data;
            });
        },
        toCanvas: function(e, t) {
            return v(e, t || {
            });
        },
        impl: {
            fontFaces: s,
            images: f,
            util: c,
            inliner: i1,
            options: {
            }
        }
    };
    "object" == typeof $6716112bc694bd6e$exports && "object" == "object" ? $6716112bc694bd6e$exports = p : e1.domtoimage = p;
    const g = e1.getComputedStyle || window.getComputedStyle, d = e1.atob || window.atob;
    function y(r2, o2) {
        return (function(e) {
            void 0 === e.imagePlaceholder ? p.impl.options.imagePlaceholder = m.imagePlaceholder : p.impl.options.imagePlaceholder = e.imagePlaceholder;
            void 0 === e.cacheBust ? p.impl.options.cacheBust = m.cacheBust : p.impl.options.cacheBust = e.cacheBust;
            void 0 === e.useCredentials ? p.impl.options.useCredentials = m.useCredentials : p.impl.options.useCredentials = e.useCredentials;
        })(o2 = o2 || {
        }), Promise.resolve(r2).then(function(e15) {
            return (function r3(t7, o3, a2, i2) {
                if (!a2 && o3 && !o3(t7)) return Promise.resolve();
                function e16(e17) {
                    return e17 instanceof HTMLCanvasElement ? c.makeImage(e17.toDataURL()) : "IFRAME" === e17.nodeName ? html2canvas(e17.contentDocument.body).then((e)=>e.toDataURL()
                    ).then(c.makeImage) : e17.cloneNode(!1);
                }
                function n3(e18, t8) {
                    e18 = e18.childNodes;
                    return 0 === e18.length ? Promise.resolve(t8) : n4(t8, c.asArray(e18)).then(function() {
                        return t8;
                    });
                    function n4(t, e19) {
                        var n = Promise.resolve();
                        return e19.forEach(function(e20) {
                            n = n.then(function() {
                                return r3(e20, o3, !1, i2);
                            }).then(function(e) {
                                e && t.appendChild(e);
                            });
                        }), n;
                    }
                }
                function u2(r4, u, t9) {
                    return u instanceof Element ? Promise.resolve().then(e21).then(n5).then(o4).then(i3).then(function() {
                        return u;
                    }) : u;
                    function e21() {
                        function n6(e, t) {
                            t.font = e.font, t.fontFamily = e.fontFamily, t.fontFeatureSettings = e.fontFeatureSettings, t.fontKerning = e.fontKerning, t.fontSize = e.fontSize, t.fontStretch = e.fontStretch, t.fontStyle = e.fontStyle, t.fontVariant = e.fontVariant, t.fontVariantCaps = e.fontVariantCaps, t.fontVariantEastAsian = e.fontVariantEastAsian, t.fontVariantLigatures = e.fontVariantLigatures, t.fontVariantNumeric = e.fontVariantNumeric, t.fontVariationSettings = e.fontVariationSettings, t.fontWeight = e.fontWeight;
                        }
                        function e22(e23, r) {
                            function t10(t, n) {
                                c.asArray(t).forEach(function(e) {
                                    n.setProperty(e, t.getPropertyValue(e), t.getPropertyPriority(e));
                                }), a2 && ([
                                    "inset-block",
                                    "inset-block-start",
                                    "inset-block-end"
                                ].forEach((e)=>r.removeProperty(e)
                                ), [
                                    "left",
                                    "right",
                                    "top",
                                    "bottom"
                                ].forEach((e)=>{
                                    r.getPropertyValue(e) && r.setProperty(e, "0px");
                                }));
                            }
                            e23.cssText ? (r.cssText = e23.cssText, n6(e23, r)) : t10(e23, r);
                        }
                        e22(t9 ? b(r4, a2) : g(r4), u.style);
                    }
                    function n5() {
                        function t11(o) {
                            var i, a = g(r4, o), e24 = a.getPropertyValue("content");
                            function t12() {
                                var e25 = "." + i + ":" + o, t = (a.cssText ? n : r)();
                                return document.createTextNode(e25 + "{" + t + "}");
                                function n() {
                                    return a.cssText + " content: " + a.getPropertyValue("content") + ";";
                                }
                                function r() {
                                    return c.asArray(a).map(e26).join("; ") + ";";
                                    function e26(e) {
                                        return e + ": " + a.getPropertyValue(e) + (a.getPropertyPriority(e) ? " !important" : "");
                                    }
                                }
                            }
                            "" !== e24 && "none" !== e24 && (i = c.uid(), (e24 = u.getAttribute("class")) && u.setAttribute("class", e24 + " " + i), (e24 = document.createElement("style")).appendChild(t12()), u.appendChild(e24));
                        }
                        [
                            ":before",
                            ":after"
                        ].forEach(function(e) {
                            t11(e);
                        });
                    }
                    function o4() {
                        r4 instanceof HTMLTextAreaElement && (u.innerHTML = r4.value), r4 instanceof HTMLInputElement && u.setAttribute("value", r4.value);
                    }
                    function i3() {
                        u instanceof SVGElement && (u.setAttribute("xmlns", "http://www.w3.org/2000/svg"), u instanceof SVGRectElement && [
                            "width",
                            "height"
                        ].forEach(function(e) {
                            var t = u.getAttribute(e);
                            t && u.style.setProperty(e, t);
                        }));
                    }
                }
                return Promise.resolve(t7).then(e16).then(function(e) {
                    return n3(t7, e);
                }).then(function(e) {
                    return u2(t7, e, i2);
                });
            })(e15, o2.filter, !0, !o2.raster);
        }).then(P).then(w).then(function(t) {
            o2.bgcolor && (t.style.backgroundColor = o2.bgcolor);
            o2.width && (t.style.width = o2.width + "px");
            o2.height && (t.style.height = o2.height + "px");
            o2.style && Object.keys(o2.style).forEach(function(e) {
                t.style[e] = o2.style[e];
            });
            var e = null;
            "function" == typeof o2.onclone && (e = o2.onclone(t));
            return Promise.resolve(e).then(function() {
                return t;
            });
        }).then(function(e27) {
            var t, n;
            return t = o2.width || c.width(r2), n = o2.height || c.height(r2), Promise.resolve(e27).then(function(e) {
                return e.setAttribute("xmlns", "http://www.w3.org/1999/xhtml"), (new XMLSerializer).serializeToString(e);
            }).then(c.escapeXhtml).then(function(e) {
                return '<foreignObject x="0" y="0" width="100%" height="100%">' + e + "</foreignObject>";
            }).then(function(e) {
                return '<svg xmlns="http://www.w3.org/2000/svg" width="' + t + '" height="' + n + '">' + e + "</svg>";
            }).then(function(e) {
                return "data:image/svg+xml;charset=utf-8," + e;
            });
        });
    }
    function v(o, i) {
        return y(o, i).then(c.makeImage).then(c.delay(0)).then(function(e28) {
            var t13 = "number" != typeof i.scale ? 1 : i.scale, n7 = function(e, t) {
                var n = document.createElement("canvas");
                n.width = (i.width || c.width(e)) * t, n.height = (i.height || c.height(e)) * t, i.bgcolor && ((t = n.getContext("2d")).fillStyle = i.bgcolor, t.fillRect(0, 0, n.width, n.height));
                return n;
            }(o, t13), r = n7.getContext("2d");
            return r.mozImageSmoothingEnabled = !1, r.msImageSmoothingEnabled = !1, r.imageSmoothingEnabled = !1, e28 && (r.scale(t13, t13), r.drawImage(e28, 0, 0)), n7;
        });
    }
    function P(n) {
        return s.resolveAll().then(function(e) {
            var t = document.createElement("style");
            return n.appendChild(t), t.appendChild(document.createTextNode(e)), n;
        });
    }
    function w(e) {
        return f.inlineAll(e).then(function() {
            return e;
        });
    }
    function b(e, t) {
        var n, r = document.createElement(e.tagName).style, o = g(e), i = e.style;
        for (n of o){
            var a = o.getPropertyValue(n), u = i.getPropertyValue(n);
            i.setProperty(n, t ? "initial" : "unset"), o.getPropertyValue(n) !== a ? r.setProperty(n, a) : r.removeProperty(n), i.setProperty(n, u);
        }
        return r;
    }
}($6716112bc694bd6e$exports);


function $4c225ee090a8f350$export$74d0f8ed30f6559d(el) {
    // Get the Elements computed style declaration
    try {
        const declaration = getComputedStyle(el);
        // Check if the result is an actual style declaration,
        if (declaration instanceof CSSStyleDeclaration) {
            // Get the declarations keys and values and reduce them
            // into an object of just the used rules
            const obj = Object.entries(declaration).reduce((style, [key, value])=>{
                // Don't assign any blank values or keys or keys that are just numeric.
                if (!value || !key || !isNaN(parseInt(key))) return style;
                style[key] = value;
                return style;
            }, {
            });
            // Return the style object
            return obj;
        } else return {
        };
    } catch (error) {
        console.log(error);
        return {
        };
    }
}
function $4c225ee090a8f350$export$39727932d807f83e(node) {
    // Check if the passed node is a Text Node
    // If it is, wrap it in a span
    if (node.nodeType === Node.TEXT_NODE) {
        // Get the parent node of the text node
        const parent = node.parentElement;
        // Create the new span that will hold the text node
        const newSpan = document.createElement("span");
        // Place the text node into the span node
        // and then place that span into the parent
        newSpan.appendChild(node);
        parent.appendChild(newSpan);
        // Return the reference to the new span containing the text
        return newSpan;
    } else return node;
}


var $02881620eab596e2$export$a143d493d941bafc;
var $02881620eab596e2$export$e4cf37d7f6fb9e0a;
var $02881620eab596e2$export$f99ded8fe4b79145;
var $02881620eab596e2$export$599f31c3813fae4d;
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
var $61dda36339c4a765$export$a48f0734ac7c2329;
var $61dda36339c4a765$export$d622b2ad8d90c771;
var $61dda36339c4a765$export$6100ba28696e12de;
'use strict';
$61dda36339c4a765$export$a48f0734ac7c2329 = $61dda36339c4a765$var$byteLength;
$61dda36339c4a765$export$d622b2ad8d90c771 = $61dda36339c4a765$var$toByteArray;
$61dda36339c4a765$export$6100ba28696e12de = $61dda36339c4a765$var$fromByteArray;
var $61dda36339c4a765$var$lookup = [];
var $61dda36339c4a765$var$revLookup = [];
var $61dda36339c4a765$var$Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var $61dda36339c4a765$var$code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var $61dda36339c4a765$var$i = 0, $61dda36339c4a765$var$len = $61dda36339c4a765$var$code.length; $61dda36339c4a765$var$i < $61dda36339c4a765$var$len; ++$61dda36339c4a765$var$i){
    $61dda36339c4a765$var$lookup[$61dda36339c4a765$var$i] = $61dda36339c4a765$var$code[$61dda36339c4a765$var$i];
    $61dda36339c4a765$var$revLookup[$61dda36339c4a765$var$code.charCodeAt($61dda36339c4a765$var$i)] = $61dda36339c4a765$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$61dda36339c4a765$var$revLookup['-'.charCodeAt(0)] = 62;
$61dda36339c4a765$var$revLookup['_'.charCodeAt(0)] = 63;
function $61dda36339c4a765$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $61dda36339c4a765$var$byteLength(b64) {
    var lens = $61dda36339c4a765$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $61dda36339c4a765$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $61dda36339c4a765$var$toByteArray(b64) {
    var tmp;
    var lens = $61dda36339c4a765$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $61dda36339c4a765$var$Arr($61dda36339c4a765$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $61dda36339c4a765$var$revLookup[b64.charCodeAt(i)] << 18 | $61dda36339c4a765$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $61dda36339c4a765$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $61dda36339c4a765$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
        tmp = $61dda36339c4a765$var$revLookup[b64.charCodeAt(i)] << 2 | $61dda36339c4a765$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
        tmp = $61dda36339c4a765$var$revLookup[b64.charCodeAt(i)] << 10 | $61dda36339c4a765$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $61dda36339c4a765$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    return arr;
}
function $61dda36339c4a765$var$tripletToBase64(num) {
    return $61dda36339c4a765$var$lookup[num >> 18 & 63] + $61dda36339c4a765$var$lookup[num >> 12 & 63] + $61dda36339c4a765$var$lookup[num >> 6 & 63] + $61dda36339c4a765$var$lookup[num & 63];
}
function $61dda36339c4a765$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
        output.push($61dda36339c4a765$var$tripletToBase64(tmp));
    }
    return output.join('');
}
function $61dda36339c4a765$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($61dda36339c4a765$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($61dda36339c4a765$var$lookup[tmp >> 2] + $61dda36339c4a765$var$lookup[tmp << 4 & 63] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($61dda36339c4a765$var$lookup[tmp >> 10] + $61dda36339c4a765$var$lookup[tmp >> 4 & 63] + $61dda36339c4a765$var$lookup[tmp << 2 & 63] + '=');
    }
    return parts.join('');
}


/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $da859884d3a409c1$export$aafa59e2e03f2942;
var $da859884d3a409c1$export$68d8715fc104d294;
$da859884d3a409c1$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$da859884d3a409c1$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};


const $02881620eab596e2$var$customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
$02881620eab596e2$export$a143d493d941bafc = $02881620eab596e2$var$Buffer;
$02881620eab596e2$export$e4cf37d7f6fb9e0a = $02881620eab596e2$var$SlowBuffer;
$02881620eab596e2$export$f99ded8fe4b79145 = 50;
const $02881620eab596e2$var$K_MAX_LENGTH = 2147483647;
$02881620eab596e2$export$599f31c3813fae4d = $02881620eab596e2$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $02881620eab596e2$var$Buffer.TYPED_ARRAY_SUPPORT = $02881620eab596e2$var$typedArraySupport();
if (!$02881620eab596e2$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $02881620eab596e2$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($02881620eab596e2$var$Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!$02881620eab596e2$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($02881620eab596e2$var$Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!$02881620eab596e2$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $02881620eab596e2$var$createBuffer(length) {
    if (length > $02881620eab596e2$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $02881620eab596e2$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $02881620eab596e2$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return $02881620eab596e2$var$allocUnsafe(arg);
    }
    return $02881620eab596e2$var$from(arg, encodingOrOffset, length);
}
$02881620eab596e2$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $02881620eab596e2$var$from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return $02881620eab596e2$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $02881620eab596e2$var$fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if ($02881620eab596e2$var$isInstance(value, ArrayBuffer) || value && $02881620eab596e2$var$isInstance(value.buffer, ArrayBuffer)) return $02881620eab596e2$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && ($02881620eab596e2$var$isInstance(value, SharedArrayBuffer) || value && $02881620eab596e2$var$isInstance(value.buffer, SharedArrayBuffer))) return $02881620eab596e2$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $02881620eab596e2$var$Buffer.from(valueOf, encodingOrOffset, length);
    const b = $02881620eab596e2$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return $02881620eab596e2$var$Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $02881620eab596e2$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $02881620eab596e2$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($02881620eab596e2$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($02881620eab596e2$var$Buffer, Uint8Array);
function $02881620eab596e2$var$assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $02881620eab596e2$var$alloc(size, fill, encoding) {
    $02881620eab596e2$var$assertSize(size);
    if (size <= 0) return $02881620eab596e2$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? $02881620eab596e2$var$createBuffer(size).fill(fill, encoding) : $02881620eab596e2$var$createBuffer(size).fill(fill);
    return $02881620eab596e2$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $02881620eab596e2$var$Buffer.alloc = function(size, fill, encoding) {
    return $02881620eab596e2$var$alloc(size, fill, encoding);
};
function $02881620eab596e2$var$allocUnsafe(size) {
    $02881620eab596e2$var$assertSize(size);
    return $02881620eab596e2$var$createBuffer(size < 0 ? 0 : $02881620eab596e2$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $02881620eab596e2$var$Buffer.allocUnsafe = function(size) {
    return $02881620eab596e2$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $02881620eab596e2$var$Buffer.allocUnsafeSlow = function(size) {
    return $02881620eab596e2$var$allocUnsafe(size);
};
function $02881620eab596e2$var$fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!$02881620eab596e2$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    const length = $02881620eab596e2$var$byteLength(string, encoding) | 0;
    let buf = $02881620eab596e2$var$createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $02881620eab596e2$var$fromArrayLike(array) {
    const length = array.length < 0 ? 0 : $02881620eab596e2$var$checked(array.length) | 0;
    const buf = $02881620eab596e2$var$createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $02881620eab596e2$var$fromArrayView(arrayView) {
    if ($02881620eab596e2$var$isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return $02881620eab596e2$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return $02881620eab596e2$var$fromArrayLike(arrayView);
}
function $02881620eab596e2$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $02881620eab596e2$var$Buffer.prototype);
    return buf;
}
function $02881620eab596e2$var$fromObject(obj) {
    if ($02881620eab596e2$var$Buffer.isBuffer(obj)) {
        const len = $02881620eab596e2$var$checked(obj.length) | 0;
        const buf = $02881620eab596e2$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || $02881620eab596e2$var$numberIsNaN(obj.length)) return $02881620eab596e2$var$createBuffer(0);
        return $02881620eab596e2$var$fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return $02881620eab596e2$var$fromArrayLike(obj.data);
}
function $02881620eab596e2$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $02881620eab596e2$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $02881620eab596e2$var$K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function $02881620eab596e2$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $02881620eab596e2$var$Buffer.alloc(+length);
}
$02881620eab596e2$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $02881620eab596e2$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$02881620eab596e2$var$Buffer.compare = function compare(a, b) {
    if ($02881620eab596e2$var$isInstance(a, Uint8Array)) a = $02881620eab596e2$var$Buffer.from(a, a.offset, a.byteLength);
    if ($02881620eab596e2$var$isInstance(b, Uint8Array)) b = $02881620eab596e2$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$02881620eab596e2$var$Buffer.isBuffer(a) || !$02881620eab596e2$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$02881620eab596e2$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
$02881620eab596e2$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $02881620eab596e2$var$Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = $02881620eab596e2$var$Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if ($02881620eab596e2$var$isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!$02881620eab596e2$var$Buffer.isBuffer(buf)) buf = $02881620eab596e2$var$Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!$02881620eab596e2$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $02881620eab596e2$var$byteLength(string, encoding) {
    if ($02881620eab596e2$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $02881620eab596e2$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return $02881620eab596e2$var$utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return $02881620eab596e2$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $02881620eab596e2$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
$02881620eab596e2$var$Buffer.byteLength = $02881620eab596e2$var$byteLength;
function $02881620eab596e2$var$slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return $02881620eab596e2$var$hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return $02881620eab596e2$var$utf8Slice(this, start, end);
        case 'ascii':
            return $02881620eab596e2$var$asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return $02881620eab596e2$var$latin1Slice(this, start, end);
        case 'base64':
            return $02881620eab596e2$var$base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return $02881620eab596e2$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$02881620eab596e2$var$Buffer.prototype._isBuffer = true;
function $02881620eab596e2$var$swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$02881620eab596e2$var$Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(let i = 0; i < len; i += 2)$02881620eab596e2$var$swap(this, i, i + 1);
    return this;
};
$02881620eab596e2$var$Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(let i = 0; i < len; i += 4){
        $02881620eab596e2$var$swap(this, i, i + 3);
        $02881620eab596e2$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$02881620eab596e2$var$Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(let i = 0; i < len; i += 8){
        $02881620eab596e2$var$swap(this, i, i + 7);
        $02881620eab596e2$var$swap(this, i + 1, i + 6);
        $02881620eab596e2$var$swap(this, i + 2, i + 5);
        $02881620eab596e2$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$02881620eab596e2$var$Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return $02881620eab596e2$var$utf8Slice(this, 0, length);
    return $02881620eab596e2$var$slowToString.apply(this, arguments);
};
$02881620eab596e2$var$Buffer.prototype.toLocaleString = $02881620eab596e2$var$Buffer.prototype.toString;
$02881620eab596e2$var$Buffer.prototype.equals = function equals(b) {
    if (!$02881620eab596e2$var$Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return $02881620eab596e2$var$Buffer.compare(this, b) === 0;
};
$02881620eab596e2$var$Buffer.prototype.inspect = function inspect() {
    let str = '';
    const max = $02881620eab596e2$export$f99ded8fe4b79145;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if ($02881620eab596e2$var$customInspectSymbol) $02881620eab596e2$var$Buffer.prototype[$02881620eab596e2$var$customInspectSymbol] = $02881620eab596e2$var$Buffer.prototype.inspect;
$02881620eab596e2$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($02881620eab596e2$var$isInstance(target, Uint8Array)) target = $02881620eab596e2$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$02881620eab596e2$var$Buffer.isBuffer(target)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $02881620eab596e2$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 2147483647) byteOffset = 2147483647;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($02881620eab596e2$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = $02881620eab596e2$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($02881620eab596e2$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $02881620eab596e2$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 255 // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $02881620eab596e2$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function $02881620eab596e2$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i1;
    if (dir) {
        let foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
$02881620eab596e2$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$02881620eab596e2$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $02881620eab596e2$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$02881620eab596e2$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $02881620eab596e2$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $02881620eab596e2$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($02881620eab596e2$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $02881620eab596e2$var$utf8Write(buf, string, offset, length) {
    return $02881620eab596e2$var$blitBuffer($02881620eab596e2$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $02881620eab596e2$var$asciiWrite(buf, string, offset, length) {
    return $02881620eab596e2$var$blitBuffer($02881620eab596e2$var$asciiToBytes(string), buf, offset, length);
}
function $02881620eab596e2$var$base64Write(buf, string, offset, length) {
    return $02881620eab596e2$var$blitBuffer($02881620eab596e2$var$base64ToBytes(string), buf, offset, length);
}
function $02881620eab596e2$var$ucs2Write(buf, string, offset, length) {
    return $02881620eab596e2$var$blitBuffer($02881620eab596e2$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$02881620eab596e2$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    let loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return $02881620eab596e2$var$hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return $02881620eab596e2$var$utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return $02881620eab596e2$var$asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return $02881620eab596e2$var$base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return $02881620eab596e2$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
$02881620eab596e2$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $02881620eab596e2$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $61dda36339c4a765$export$6100ba28696e12de(buf);
    else return $61dda36339c4a765$export$6100ba28696e12de(buf.slice(start, end));
}
function $02881620eab596e2$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $02881620eab596e2$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const $02881620eab596e2$var$MAX_ARGUMENTS_LENGTH = 4096;
function $02881620eab596e2$var$decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= $02881620eab596e2$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = '';
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $02881620eab596e2$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $02881620eab596e2$var$asciiSlice(buf, start, end) {
    let ret = '';
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 127);
    return ret;
}
function $02881620eab596e2$var$latin1Slice(buf, start, end) {
    let ret = '';
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $02881620eab596e2$var$hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = '';
    for(let i = start; i < end; ++i)out += $02881620eab596e2$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $02881620eab596e2$var$utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$02881620eab596e2$var$Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $02881620eab596e2$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $02881620eab596e2$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
$02881620eab596e2$var$Buffer.prototype.readUintLE = $02881620eab596e2$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
    return val;
};
$02881620eab596e2$var$Buffer.prototype.readUintBE = $02881620eab596e2$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 256))val += this[offset + --byteLength] * mul;
    return val;
};
$02881620eab596e2$var$Buffer.prototype.readUint8 = $02881620eab596e2$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$02881620eab596e2$var$Buffer.prototype.readUint16LE = $02881620eab596e2$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$02881620eab596e2$var$Buffer.prototype.readUint16BE = $02881620eab596e2$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$02881620eab596e2$var$Buffer.prototype.readUint32LE = $02881620eab596e2$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
$02881620eab596e2$var$Buffer.prototype.readUint32BE = $02881620eab596e2$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$02881620eab596e2$var$Buffer.prototype.readBigUInt64LE = $02881620eab596e2$var$defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    $02881620eab596e2$var$validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $02881620eab596e2$var$boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 65536 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
$02881620eab596e2$var$Buffer.prototype.readBigUInt64BE = $02881620eab596e2$var$defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    $02881620eab596e2$var$validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $02881620eab596e2$var$boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
$02881620eab596e2$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$02881620eab596e2$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 256))val += this[offset + --i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$02881620eab596e2$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
};
$02881620eab596e2$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
$02881620eab596e2$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
$02881620eab596e2$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$02881620eab596e2$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$02881620eab596e2$var$Buffer.prototype.readBigInt64LE = $02881620eab596e2$var$defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    $02881620eab596e2$var$validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $02881620eab596e2$var$boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 65536 + (last << 24) // Overflow
    ;
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24);
});
$02881620eab596e2$var$Buffer.prototype.readBigInt64BE = $02881620eab596e2$var$defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    $02881620eab596e2$var$validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $02881620eab596e2$var$boundsError(offset, this.length - 8);
    const val = (first << 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last);
});
$02881620eab596e2$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, 4, this.length);
    return $da859884d3a409c1$export$aafa59e2e03f2942(this, offset, true, 23, 4);
};
$02881620eab596e2$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, 4, this.length);
    return $da859884d3a409c1$export$aafa59e2e03f2942(this, offset, false, 23, 4);
};
$02881620eab596e2$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, 8, this.length);
    return $da859884d3a409c1$export$aafa59e2e03f2942(this, offset, true, 52, 8);
};
$02881620eab596e2$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkOffset(offset, 8, this.length);
    return $da859884d3a409c1$export$aafa59e2e03f2942(this, offset, false, 52, 8);
};
function $02881620eab596e2$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$02881620eab596e2$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
$02881620eab596e2$var$Buffer.prototype.writeUintLE = $02881620eab596e2$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $02881620eab596e2$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 255;
    while(++i < byteLength && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength;
};
$02881620eab596e2$var$Buffer.prototype.writeUintBE = $02881620eab596e2$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $02881620eab596e2$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength;
};
$02881620eab596e2$var$Buffer.prototype.writeUint8 = $02881620eab596e2$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
};
$02881620eab596e2$var$Buffer.prototype.writeUint16LE = $02881620eab596e2$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$02881620eab596e2$var$Buffer.prototype.writeUint16BE = $02881620eab596e2$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
$02881620eab596e2$var$Buffer.prototype.writeUint32LE = $02881620eab596e2$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
};
$02881620eab596e2$var$Buffer.prototype.writeUint32BE = $02881620eab596e2$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
function $02881620eab596e2$var$wrtBigUInt64LE(buf, value, offset, min, max) {
    $02881620eab596e2$var$checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(4294967295));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(4294967295));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function $02881620eab596e2$var$wrtBigUInt64BE(buf, value, offset, min, max) {
    $02881620eab596e2$var$checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(4294967295));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(4294967295));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
$02881620eab596e2$var$Buffer.prototype.writeBigUInt64LE = $02881620eab596e2$var$defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return $02881620eab596e2$var$wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
$02881620eab596e2$var$Buffer.prototype.writeBigUInt64BE = $02881620eab596e2$var$defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return $02881620eab596e2$var$wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
$02881620eab596e2$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        $02881620eab596e2$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 255;
    while(++i < byteLength && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength;
};
$02881620eab596e2$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        $02881620eab596e2$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength;
};
$02881620eab596e2$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkInt(this, value, offset, 1, 127, -128);
    if (value < 0) value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
};
$02881620eab596e2$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$02881620eab596e2$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
$02881620eab596e2$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$02881620eab596e2$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0) value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
$02881620eab596e2$var$Buffer.prototype.writeBigInt64LE = $02881620eab596e2$var$defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return $02881620eab596e2$var$wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
$02881620eab596e2$var$Buffer.prototype.writeBigInt64BE = $02881620eab596e2$var$defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return $02881620eab596e2$var$wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
function $02881620eab596e2$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function $02881620eab596e2$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkIEEE754(buf, value, offset, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000);
    $da859884d3a409c1$export$68d8715fc104d294(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$02881620eab596e2$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $02881620eab596e2$var$writeFloat(this, value, offset, true, noAssert);
};
$02881620eab596e2$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $02881620eab596e2$var$writeFloat(this, value, offset, false, noAssert);
};
function $02881620eab596e2$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $02881620eab596e2$var$checkIEEE754(buf, value, offset
    $da859884d3a409c1$export$68d8715fc104d294(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$02881620eab596e2$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $02881620eab596e2$var$writeDouble(this, value, offset, true, noAssert);
};
$02881620eab596e2$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $02881620eab596e2$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$02881620eab596e2$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$02881620eab596e2$var$Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$02881620eab596e2$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !$02881620eab596e2$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = $02881620eab596e2$var$Buffer.isBuffer(val) ? val : $02881620eab596e2$var$Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const $02881620eab596e2$var$errors = {
};
function $02881620eab596e2$var$E(sym, getMessage, Base) {
    $02881620eab596e2$var$errors[sym] = class NodeError extends Base {
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, 'code', {
                configurable: true,
                enumerable: true,
                value: value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
        constructor(){
            super();
            Object.defineProperty(this, 'message', {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
    };
}
$02881620eab596e2$var$E('ERR_BUFFER_OUT_OF_BOUNDS', function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return 'Attempt to access memory outside buffer bounds';
}, RangeError);
$02881620eab596e2$var$E('ERR_INVALID_ARG_TYPE', function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
$02881620eab596e2$var$E('ERR_OUT_OF_RANGE', function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = $02881620eab596e2$var$addNumericalSeparator(String(input));
    else if (typeof input === 'bigint') {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = $02881620eab596e2$var$addNumericalSeparator(received);
        received += 'n';
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function $02881620eab596e2$var$addNumericalSeparator(val) {
    let res = '';
    let i = val.length;
    const start = val[0] === '-' ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function $02881620eab596e2$var$checkBounds(buf, offset, byteLength) {
    $02881620eab596e2$var$validateNumber(offset, 'offset');
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) $02881620eab596e2$var$boundsError(offset, buf.length - (byteLength + 1));
}
function $02881620eab596e2$var$checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === 'bigint' ? 'n' : '';
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new $02881620eab596e2$var$errors.ERR_OUT_OF_RANGE('value', range, value);
    }
    $02881620eab596e2$var$checkBounds(buf, offset, byteLength);
}
function $02881620eab596e2$var$validateNumber(value, name) {
    if (typeof value !== 'number') throw new $02881620eab596e2$var$errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
}
function $02881620eab596e2$var$boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        $02881620eab596e2$var$validateNumber(value, type);
        throw new $02881620eab596e2$var$errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
    }
    if (length < 0) throw new $02881620eab596e2$var$errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new $02881620eab596e2$var$errors.ERR_OUT_OF_RANGE(type || 'offset', `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const $02881620eab596e2$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $02881620eab596e2$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($02881620eab596e2$var$INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function $02881620eab596e2$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 55295 && codePoint < 57344) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 56319) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 56320) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function $02881620eab596e2$var$asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 255);
    return byteArray;
}
function $02881620eab596e2$var$utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $02881620eab596e2$var$base64ToBytes(str) {
    return $61dda36339c4a765$export$d622b2ad8d90c771($02881620eab596e2$var$base64clean(str));
}
function $02881620eab596e2$var$blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $02881620eab596e2$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $02881620eab596e2$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const $02881620eab596e2$var$hexSliceLookupTable = function() {
    const alphabet = '0123456789abcdef';
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function $02881620eab596e2$var$defineBigIntMethod(fn) {
    return typeof BigInt === 'undefined' ? $02881620eab596e2$var$BufferBigIntNotDefined : fn;
}
function $02881620eab596e2$var$BufferBigIntNotDefined() {
    throw new Error('BigInt not supported');
}


var $a8848f9916d99690$require$Buffer = $02881620eab596e2$export$a143d493d941bafc;
var $a8848f9916d99690$var$commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof $parcel$global !== "undefined" ? $parcel$global : typeof self !== "undefined" ? self : {
};
var $a8848f9916d99690$export$2e2bcd8739ae039 = {
};
var $a8848f9916d99690$var$config$1 = {
};
var $a8848f9916d99690$var$plugins$1 = {
};
var $a8848f9916d99690$var$plugins = {
};
var $a8848f9916d99690$var$xast = {
};
var $a8848f9916d99690$var$lib$8 = {
};
var $a8848f9916d99690$var$lib$7 = {
};
var $a8848f9916d99690$var$stringify$2 = {
};
var $a8848f9916d99690$var$lib$6 = {
};
var $a8848f9916d99690$var$lib$5 = {
};
(function(exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;
    var ElementType1;
    (function(ElementType) {
        ElementType["Root"] = "root";
        ElementType["Text"] = "text";
        ElementType["Directive"] = "directive";
        ElementType["Comment"] = "comment";
        ElementType["Script"] = "script";
        ElementType["Style"] = "style";
        ElementType["Tag"] = "tag";
        ElementType["CDATA"] = "cdata";
        ElementType["Doctype"] = "doctype";
    })(ElementType1 = exports.ElementType || (exports.ElementType = {
    }));
    function isTag(elem) {
        return elem.type === ElementType1.Tag || elem.type === ElementType1.Script || elem.type === ElementType1.Style;
    }
    exports.isTag = isTag;
    exports.Root = ElementType1.Root;
    exports.Text = ElementType1.Text;
    exports.Directive = ElementType1.Directive;
    exports.Comment = ElementType1.Comment;
    exports.Script = ElementType1.Script;
    exports.Style = ElementType1.Style;
    exports.Tag = ElementType1.Tag;
    exports.CDATA = ElementType1.CDATA;
    exports.Doctype = ElementType1.Doctype;
})($a8848f9916d99690$var$lib$5);
var $a8848f9916d99690$var$node = {
};
var $a8848f9916d99690$var$__extends = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __);
    };
}();
var $a8848f9916d99690$var$__assign$1 = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__assign || function() {
    $a8848f9916d99690$var$__assign$1 = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $a8848f9916d99690$var$__assign$1.apply(this, arguments);
};
Object.defineProperty($a8848f9916d99690$var$node, "__esModule", {
    value: true
});
$a8848f9916d99690$var$node.cloneNode = $a8848f9916d99690$var$node.hasChildren = $a8848f9916d99690$var$node.isDocument = $a8848f9916d99690$var$node.isDirective = $a8848f9916d99690$var$node.isComment = $a8848f9916d99690$var$node.isText = $a8848f9916d99690$var$node.isCDATA = $a8848f9916d99690$var$node.isTag = $a8848f9916d99690$var$node.Element = $a8848f9916d99690$var$node.Document = $a8848f9916d99690$var$node.NodeWithChildren = $a8848f9916d99690$var$node.ProcessingInstruction = $a8848f9916d99690$var$node.Comment = $a8848f9916d99690$var$node.Text = $a8848f9916d99690$var$node.DataNode = $a8848f9916d99690$var$node.Node = void 0;
var $a8848f9916d99690$var$domelementtype_1$1 = $a8848f9916d99690$var$lib$5;
var $a8848f9916d99690$var$nodeTypes = new Map([
    [
        $a8848f9916d99690$var$domelementtype_1$1.ElementType.Tag,
        1
    ],
    [
        $a8848f9916d99690$var$domelementtype_1$1.ElementType.Script,
        1
    ],
    [
        $a8848f9916d99690$var$domelementtype_1$1.ElementType.Style,
        1
    ],
    [
        $a8848f9916d99690$var$domelementtype_1$1.ElementType.Directive,
        1
    ],
    [
        $a8848f9916d99690$var$domelementtype_1$1.ElementType.Text,
        3
    ],
    [
        $a8848f9916d99690$var$domelementtype_1$1.ElementType.CDATA,
        4
    ],
    [
        $a8848f9916d99690$var$domelementtype_1$1.ElementType.Comment,
        8
    ],
    [
        $a8848f9916d99690$var$domelementtype_1$1.ElementType.Root,
        9
    ]
]);
var $a8848f9916d99690$var$Node = function() {
    function Node(type) {
        this.type = type;
        this.parent = null;
        this.prev = null;
        this.next = null;
        this.startIndex = null;
        this.endIndex = null;
    }
    Object.defineProperty(Node.prototype, "nodeType", {
        get: function() {
            var _a;
            return (_a = $a8848f9916d99690$var$nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "parentNode", {
        get: function() {
            return this.parent;
        },
        set: function(parent) {
            this.parent = parent;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "previousSibling", {
        get: function() {
            return this.prev;
        },
        set: function(prev) {
            this.prev = prev;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "nextSibling", {
        get: function() {
            return this.next;
        },
        set: function(next) {
            this.next = next;
        },
        enumerable: false,
        configurable: true
    });
    Node.prototype.cloneNode = function(recursive) {
        if (recursive === void 0) recursive = false;
        return $a8848f9916d99690$var$cloneNode(this, recursive);
    };
    return Node;
}();
$a8848f9916d99690$var$node.Node = $a8848f9916d99690$var$Node;
var $a8848f9916d99690$var$DataNode = function(_super) {
    $a8848f9916d99690$var$__extends(DataNode, _super);
    function DataNode(type, data) {
        var _this = _super.call(this, type) || this;
        _this.data = data;
        return _this;
    }
    Object.defineProperty(DataNode.prototype, "nodeValue", {
        get: function() {
            return this.data;
        },
        set: function(data) {
            this.data = data;
        },
        enumerable: false,
        configurable: true
    });
    return DataNode;
}($a8848f9916d99690$var$Node);
$a8848f9916d99690$var$node.DataNode = $a8848f9916d99690$var$DataNode;
var $a8848f9916d99690$var$Text = function(_super) {
    $a8848f9916d99690$var$__extends(Text, _super);
    function Text(data) {
        return _super.call(this, $a8848f9916d99690$var$domelementtype_1$1.ElementType.Text, data) || this;
    }
    return Text;
}($a8848f9916d99690$var$DataNode);
$a8848f9916d99690$var$node.Text = $a8848f9916d99690$var$Text;
var $a8848f9916d99690$var$Comment$1 = function(_super) {
    $a8848f9916d99690$var$__extends(Comment, _super);
    function Comment(data) {
        return _super.call(this, $a8848f9916d99690$var$domelementtype_1$1.ElementType.Comment, data) || this;
    }
    return Comment;
}($a8848f9916d99690$var$DataNode);
$a8848f9916d99690$var$node.Comment = $a8848f9916d99690$var$Comment$1;
var $a8848f9916d99690$var$ProcessingInstruction = function(_super) {
    $a8848f9916d99690$var$__extends(ProcessingInstruction, _super);
    function ProcessingInstruction(name1, data) {
        var _this = _super.call(this, $a8848f9916d99690$var$domelementtype_1$1.ElementType.Directive, data) || this;
        _this.name = name1;
        return _this;
    }
    return ProcessingInstruction;
}($a8848f9916d99690$var$DataNode);
$a8848f9916d99690$var$node.ProcessingInstruction = $a8848f9916d99690$var$ProcessingInstruction;
var $a8848f9916d99690$var$NodeWithChildren = function(_super) {
    $a8848f9916d99690$var$__extends(NodeWithChildren, _super);
    function NodeWithChildren(type, children) {
        var _this = _super.call(this, type) || this;
        _this.children = children;
        return _this;
    }
    Object.defineProperty(NodeWithChildren.prototype, "firstChild", {
        get: function() {
            var _a;
            return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeWithChildren.prototype, "lastChild", {
        get: function() {
            return this.children.length > 0 ? this.children[this.children.length - 1] : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(NodeWithChildren.prototype, "childNodes", {
        get: function() {
            return this.children;
        },
        set: function(children) {
            this.children = children;
        },
        enumerable: false,
        configurable: true
    });
    return NodeWithChildren;
}($a8848f9916d99690$var$Node);
$a8848f9916d99690$var$node.NodeWithChildren = $a8848f9916d99690$var$NodeWithChildren;
var $a8848f9916d99690$var$Document = function(_super) {
    $a8848f9916d99690$var$__extends(Document, _super);
    function Document(children) {
        return _super.call(this, $a8848f9916d99690$var$domelementtype_1$1.ElementType.Root, children) || this;
    }
    return Document;
}($a8848f9916d99690$var$NodeWithChildren);
$a8848f9916d99690$var$node.Document = $a8848f9916d99690$var$Document;
var $a8848f9916d99690$var$Element$1 = function(_super) {
    $a8848f9916d99690$var$__extends(Element, _super);
    function Element(name2, attribs, children, type) {
        if (children === void 0) children = [];
        if (type === void 0) type = name2 === "script" ? $a8848f9916d99690$var$domelementtype_1$1.ElementType.Script : name2 === "style" ? $a8848f9916d99690$var$domelementtype_1$1.ElementType.Style : $a8848f9916d99690$var$domelementtype_1$1.ElementType.Tag;
        var _this = _super.call(this, type, children) || this;
        _this.name = name2;
        _this.attribs = attribs;
        return _this;
    }
    Object.defineProperty(Element.prototype, "tagName", {
        get: function() {
            return this.name;
        },
        set: function(name3) {
            this.name = name3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Element.prototype, "attributes", {
        get: function() {
            var _this = this;
            return Object.keys(this.attribs).map(function(name4) {
                var _a, _b;
                return {
                    name: name4,
                    value: _this.attribs[name4],
                    namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name4],
                    prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name4]
                };
            });
        },
        enumerable: false,
        configurable: true
    });
    return Element;
}($a8848f9916d99690$var$NodeWithChildren);
$a8848f9916d99690$var$node.Element = $a8848f9916d99690$var$Element$1;
function $a8848f9916d99690$var$isTag$1(node) {
    return (0, $a8848f9916d99690$var$domelementtype_1$1.isTag)(node);
}
$a8848f9916d99690$var$node.isTag = $a8848f9916d99690$var$isTag$1;
function $a8848f9916d99690$var$isCDATA(node) {
    return node.type === $a8848f9916d99690$var$domelementtype_1$1.ElementType.CDATA;
}
$a8848f9916d99690$var$node.isCDATA = $a8848f9916d99690$var$isCDATA;
function $a8848f9916d99690$var$isText(node) {
    return node.type === $a8848f9916d99690$var$domelementtype_1$1.ElementType.Text;
}
$a8848f9916d99690$var$node.isText = $a8848f9916d99690$var$isText;
function $a8848f9916d99690$var$isComment(node) {
    return node.type === $a8848f9916d99690$var$domelementtype_1$1.ElementType.Comment;
}
$a8848f9916d99690$var$node.isComment = $a8848f9916d99690$var$isComment;
function $a8848f9916d99690$var$isDirective(node) {
    return node.type === $a8848f9916d99690$var$domelementtype_1$1.ElementType.Directive;
}
$a8848f9916d99690$var$node.isDirective = $a8848f9916d99690$var$isDirective;
function $a8848f9916d99690$var$isDocument(node) {
    return node.type === $a8848f9916d99690$var$domelementtype_1$1.ElementType.Root;
}
$a8848f9916d99690$var$node.isDocument = $a8848f9916d99690$var$isDocument;
function $a8848f9916d99690$var$hasChildren(node) {
    return Object.prototype.hasOwnProperty.call(node, "children");
}
$a8848f9916d99690$var$node.hasChildren = $a8848f9916d99690$var$hasChildren;
function $a8848f9916d99690$var$cloneNode(node, recursive) {
    if (recursive === void 0) recursive = false;
    var result;
    if ($a8848f9916d99690$var$isText(node)) result = new $a8848f9916d99690$var$Text(node.data);
    else if ($a8848f9916d99690$var$isComment(node)) result = new $a8848f9916d99690$var$Comment$1(node.data);
    else if ($a8848f9916d99690$var$isTag$1(node)) {
        var children = recursive ? $a8848f9916d99690$var$cloneChildren(node.children) : [];
        var clone_1 = new $a8848f9916d99690$var$Element$1(node.name, $a8848f9916d99690$var$__assign$1({
        }, node.attribs), children);
        children.forEach(function(child) {
            return child.parent = clone_1;
        });
        if (node["x-attribsNamespace"]) clone_1["x-attribsNamespace"] = $a8848f9916d99690$var$__assign$1({
        }, node["x-attribsNamespace"]);
        if (node["x-attribsPrefix"]) clone_1["x-attribsPrefix"] = $a8848f9916d99690$var$__assign$1({
        }, node["x-attribsPrefix"]);
        result = clone_1;
    } else if ($a8848f9916d99690$var$isCDATA(node)) {
        var children = recursive ? $a8848f9916d99690$var$cloneChildren(node.children) : [];
        var clone_2 = new $a8848f9916d99690$var$NodeWithChildren($a8848f9916d99690$var$domelementtype_1$1.ElementType.CDATA, children);
        children.forEach(function(child) {
            return child.parent = clone_2;
        });
        result = clone_2;
    } else if ($a8848f9916d99690$var$isDocument(node)) {
        var children = recursive ? $a8848f9916d99690$var$cloneChildren(node.children) : [];
        var clone_3 = new $a8848f9916d99690$var$Document(children);
        children.forEach(function(child) {
            return child.parent = clone_3;
        });
        if (node["x-mode"]) clone_3["x-mode"] = node["x-mode"];
        result = clone_3;
    } else if ($a8848f9916d99690$var$isDirective(node)) {
        var instruction = new $a8848f9916d99690$var$ProcessingInstruction(node.name, node.data);
        if (node["x-name"] != null) {
            instruction["x-name"] = node["x-name"];
            instruction["x-publicId"] = node["x-publicId"];
            instruction["x-systemId"] = node["x-systemId"];
        }
        result = instruction;
    } else throw new Error("Not implemented yet: " + node.type);
    result.startIndex = node.startIndex;
    result.endIndex = node.endIndex;
    return result;
}
$a8848f9916d99690$var$node.cloneNode = $a8848f9916d99690$var$cloneNode;
function $a8848f9916d99690$var$cloneChildren(childs) {
    var children = childs.map(function(child) {
        return $a8848f9916d99690$var$cloneNode(child, true);
    });
    for(var i = 1; i < children.length; i++){
        children[i].prev = children[i - 1];
        children[i - 1].next = children[i];
    }
    return children;
}
(function(exports1) {
    var __createBinding = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
            enumerable: true,
            get: function() {
                return m[k];
            }
        });
    } : function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    });
    var __exportStar = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__exportStar || function(m, exports) {
        for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports1, "__esModule", {
        value: true
    });
    exports1.DomHandler = void 0;
    var domelementtype_1 = $a8848f9916d99690$var$lib$5;
    var node_1 = $a8848f9916d99690$var$node;
    __exportStar($a8848f9916d99690$var$node, exports1);
    var reWhitespace = /\s+/g;
    var defaultOpts = {
        normalizeWhitespace: false,
        withStartIndices: false,
        withEndIndices: false,
        xmlMode: false
    };
    var DomHandler1 = function() {
        function DomHandler(callback, options, elementCB) {
            this.dom = [];
            this.root = new node_1.Document(this.dom);
            this.done = false;
            this.tagStack = [
                this.root
            ];
            this.lastNode = null;
            this.parser = null;
            if (typeof options === "function") {
                elementCB = options;
                options = defaultOpts;
            }
            if (typeof callback === "object") {
                options = callback;
                callback = undefined;
            }
            this.callback = callback !== null && callback !== void 0 ? callback : null;
            this.options = options !== null && options !== void 0 ? options : defaultOpts;
            this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
        }
        DomHandler.prototype.onparserinit = function(parser) {
            this.parser = parser;
        };
        DomHandler.prototype.onreset = function() {
            this.dom = [];
            this.root = new node_1.Document(this.dom);
            this.done = false;
            this.tagStack = [
                this.root
            ];
            this.lastNode = null;
            this.parser = null;
        };
        DomHandler.prototype.onend = function() {
            if (this.done) return;
            this.done = true;
            this.parser = null;
            this.handleCallback(null);
        };
        DomHandler.prototype.onerror = function(error) {
            this.handleCallback(error);
        };
        DomHandler.prototype.onclosetag = function() {
            this.lastNode = null;
            var elem = this.tagStack.pop();
            if (this.options.withEndIndices) elem.endIndex = this.parser.endIndex;
            if (this.elementCB) this.elementCB(elem);
        };
        DomHandler.prototype.onopentag = function(name5, attribs) {
            var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : undefined;
            var element = new node_1.Element(name5, attribs, undefined, type);
            this.addNode(element);
            this.tagStack.push(element);
        };
        DomHandler.prototype.ontext = function(data) {
            var normalizeWhitespace = this.options.normalizeWhitespace;
            var lastNode = this.lastNode;
            if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {
                if (normalizeWhitespace) lastNode.data = (lastNode.data + data).replace(reWhitespace, " ");
                else lastNode.data += data;
                if (this.options.withEndIndices) lastNode.endIndex = this.parser.endIndex;
            } else {
                if (normalizeWhitespace) data = data.replace(reWhitespace, " ");
                var node = new node_1.Text(data);
                this.addNode(node);
                this.lastNode = node;
            }
        };
        DomHandler.prototype.oncomment = function(data) {
            if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {
                this.lastNode.data += data;
                return;
            }
            var node = new node_1.Comment(data);
            this.addNode(node);
            this.lastNode = node;
        };
        DomHandler.prototype.oncommentend = function() {
            this.lastNode = null;
        };
        DomHandler.prototype.oncdatastart = function() {
            var text = new node_1.Text("");
            var node = new node_1.NodeWithChildren(domelementtype_1.ElementType.CDATA, [
                text
            ]);
            this.addNode(node);
            text.parent = node;
            this.lastNode = text;
        };
        DomHandler.prototype.oncdataend = function() {
            this.lastNode = null;
        };
        DomHandler.prototype.onprocessinginstruction = function(name6, data) {
            var node = new node_1.ProcessingInstruction(name6, data);
            this.addNode(node);
        };
        DomHandler.prototype.handleCallback = function(error) {
            if (typeof this.callback === "function") this.callback(error, this.dom);
            else if (error) throw error;
        };
        DomHandler.prototype.addNode = function(node) {
            var parent = this.tagStack[this.tagStack.length - 1];
            var previousSibling = parent.children[parent.children.length - 1];
            if (this.options.withStartIndices) node.startIndex = this.parser.startIndex;
            if (this.options.withEndIndices) node.endIndex = this.parser.endIndex;
            parent.children.push(node);
            if (previousSibling) {
                node.prev = previousSibling;
                previousSibling.next = node;
            }
            node.parent = parent;
            this.lastNode = null;
        };
        return DomHandler;
    }();
    exports1.DomHandler = DomHandler1;
    exports1.default = DomHandler1;
})($a8848f9916d99690$var$lib$6);
var $a8848f9916d99690$var$lib$4 = {
};
var $a8848f9916d99690$var$lib$3 = {
};
var $a8848f9916d99690$var$decode = {
};
var $a8848f9916d99690$var$Aacute$1 = "Á";
var $a8848f9916d99690$var$aacute$1 = "á";
var $a8848f9916d99690$var$Abreve = "Ă";
var $a8848f9916d99690$var$abreve = "ă";
var $a8848f9916d99690$var$ac = "∾";
var $a8848f9916d99690$var$acd = "∿";
var $a8848f9916d99690$var$acE = "∾̳";
var $a8848f9916d99690$var$Acirc$1 = "Â";
var $a8848f9916d99690$var$acirc$1 = "â";
var $a8848f9916d99690$var$acute$1 = "´";
var $a8848f9916d99690$var$Acy = "А";
var $a8848f9916d99690$var$acy = "а";
var $a8848f9916d99690$var$AElig$1 = "Æ";
var $a8848f9916d99690$var$aelig$1 = "æ";
var $a8848f9916d99690$var$af = "⁡";
var $a8848f9916d99690$var$Afr = "𝔄";
var $a8848f9916d99690$var$afr = "𝔞";
var $a8848f9916d99690$var$Agrave$1 = "À";
var $a8848f9916d99690$var$agrave$1 = "à";
var $a8848f9916d99690$var$alefsym = "ℵ";
var $a8848f9916d99690$var$aleph = "ℵ";
var $a8848f9916d99690$var$Alpha = "Α";
var $a8848f9916d99690$var$alpha = "α";
var $a8848f9916d99690$var$Amacr = "Ā";
var $a8848f9916d99690$var$amacr = "ā";
var $a8848f9916d99690$var$amalg = "⨿";
var $a8848f9916d99690$var$amp$2 = "&";
var $a8848f9916d99690$var$AMP$1 = "&";
var $a8848f9916d99690$var$andand = "⩕";
var $a8848f9916d99690$var$And = "⩓";
var $a8848f9916d99690$var$and = "∧";
var $a8848f9916d99690$var$andd = "⩜";
var $a8848f9916d99690$var$andslope = "⩘";
var $a8848f9916d99690$var$andv = "⩚";
var $a8848f9916d99690$var$ang = "∠";
var $a8848f9916d99690$var$ange = "⦤";
var $a8848f9916d99690$var$angle = "∠";
var $a8848f9916d99690$var$angmsdaa = "⦨";
var $a8848f9916d99690$var$angmsdab = "⦩";
var $a8848f9916d99690$var$angmsdac = "⦪";
var $a8848f9916d99690$var$angmsdad = "⦫";
var $a8848f9916d99690$var$angmsdae = "⦬";
var $a8848f9916d99690$var$angmsdaf = "⦭";
var $a8848f9916d99690$var$angmsdag = "⦮";
var $a8848f9916d99690$var$angmsdah = "⦯";
var $a8848f9916d99690$var$angmsd = "∡";
var $a8848f9916d99690$var$angrt = "∟";
var $a8848f9916d99690$var$angrtvb = "⊾";
var $a8848f9916d99690$var$angrtvbd = "⦝";
var $a8848f9916d99690$var$angsph = "∢";
var $a8848f9916d99690$var$angst = "Å";
var $a8848f9916d99690$var$angzarr = "⍼";
var $a8848f9916d99690$var$Aogon = "Ą";
var $a8848f9916d99690$var$aogon = "ą";
var $a8848f9916d99690$var$Aopf = "𝔸";
var $a8848f9916d99690$var$aopf = "𝕒";
var $a8848f9916d99690$var$apacir = "⩯";
var $a8848f9916d99690$var$ap = "≈";
var $a8848f9916d99690$var$apE = "⩰";
var $a8848f9916d99690$var$ape = "≊";
var $a8848f9916d99690$var$apid = "≋";
var $a8848f9916d99690$var$apos$1 = "'";
var $a8848f9916d99690$var$ApplyFunction = "⁡";
var $a8848f9916d99690$var$approx = "≈";
var $a8848f9916d99690$var$approxeq = "≊";
var $a8848f9916d99690$var$Aring$1 = "Å";
var $a8848f9916d99690$var$aring$1 = "å";
var $a8848f9916d99690$var$Ascr = "𝒜";
var $a8848f9916d99690$var$ascr = "𝒶";
var $a8848f9916d99690$var$Assign = "≔";
var $a8848f9916d99690$var$ast = "*";
var $a8848f9916d99690$var$asymp = "≈";
var $a8848f9916d99690$var$asympeq = "≍";
var $a8848f9916d99690$var$Atilde$1 = "Ã";
var $a8848f9916d99690$var$atilde$1 = "ã";
var $a8848f9916d99690$var$Auml$1 = "Ä";
var $a8848f9916d99690$var$auml$1 = "ä";
var $a8848f9916d99690$var$awconint = "∳";
var $a8848f9916d99690$var$awint = "⨑";
var $a8848f9916d99690$var$backcong = "≌";
var $a8848f9916d99690$var$backepsilon = "϶";
var $a8848f9916d99690$var$backprime = "‵";
var $a8848f9916d99690$var$backsim = "∽";
var $a8848f9916d99690$var$backsimeq = "⋍";
var $a8848f9916d99690$var$Backslash = "∖";
var $a8848f9916d99690$var$Barv = "⫧";
var $a8848f9916d99690$var$barvee = "⊽";
var $a8848f9916d99690$var$barwed = "⌅";
var $a8848f9916d99690$var$Barwed = "⌆";
var $a8848f9916d99690$var$barwedge = "⌅";
var $a8848f9916d99690$var$bbrk = "⎵";
var $a8848f9916d99690$var$bbrktbrk = "⎶";
var $a8848f9916d99690$var$bcong = "≌";
var $a8848f9916d99690$var$Bcy = "Б";
var $a8848f9916d99690$var$bcy = "б";
var $a8848f9916d99690$var$bdquo = "„";
var $a8848f9916d99690$var$becaus = "∵";
var $a8848f9916d99690$var$because = "∵";
var $a8848f9916d99690$var$Because = "∵";
var $a8848f9916d99690$var$bemptyv = "⦰";
var $a8848f9916d99690$var$bepsi = "϶";
var $a8848f9916d99690$var$bernou = "ℬ";
var $a8848f9916d99690$var$Bernoullis = "ℬ";
var $a8848f9916d99690$var$Beta = "Β";
var $a8848f9916d99690$var$beta = "β";
var $a8848f9916d99690$var$beth = "ℶ";
var $a8848f9916d99690$var$between = "≬";
var $a8848f9916d99690$var$Bfr = "𝔅";
var $a8848f9916d99690$var$bfr = "𝔟";
var $a8848f9916d99690$var$bigcap = "⋂";
var $a8848f9916d99690$var$bigcirc = "◯";
var $a8848f9916d99690$var$bigcup = "⋃";
var $a8848f9916d99690$var$bigodot = "⨀";
var $a8848f9916d99690$var$bigoplus = "⨁";
var $a8848f9916d99690$var$bigotimes = "⨂";
var $a8848f9916d99690$var$bigsqcup = "⨆";
var $a8848f9916d99690$var$bigstar = "★";
var $a8848f9916d99690$var$bigtriangledown = "▽";
var $a8848f9916d99690$var$bigtriangleup = "△";
var $a8848f9916d99690$var$biguplus = "⨄";
var $a8848f9916d99690$var$bigvee = "⋁";
var $a8848f9916d99690$var$bigwedge = "⋀";
var $a8848f9916d99690$var$bkarow = "⤍";
var $a8848f9916d99690$var$blacklozenge = "⧫";
var $a8848f9916d99690$var$blacksquare = "▪";
var $a8848f9916d99690$var$blacktriangle = "▴";
var $a8848f9916d99690$var$blacktriangledown = "▾";
var $a8848f9916d99690$var$blacktriangleleft = "◂";
var $a8848f9916d99690$var$blacktriangleright = "▸";
var $a8848f9916d99690$var$blank = "␣";
var $a8848f9916d99690$var$blk12 = "▒";
var $a8848f9916d99690$var$blk14 = "░";
var $a8848f9916d99690$var$blk34 = "▓";
var $a8848f9916d99690$var$block = "█";
var $a8848f9916d99690$var$bne = "=⃥";
var $a8848f9916d99690$var$bnequiv = "≡⃥";
var $a8848f9916d99690$var$bNot = "⫭";
var $a8848f9916d99690$var$bnot = "⌐";
var $a8848f9916d99690$var$Bopf = "𝔹";
var $a8848f9916d99690$var$bopf = "𝕓";
var $a8848f9916d99690$var$bot = "⊥";
var $a8848f9916d99690$var$bottom = "⊥";
var $a8848f9916d99690$var$bowtie = "⋈";
var $a8848f9916d99690$var$boxbox = "⧉";
var $a8848f9916d99690$var$boxdl = "┐";
var $a8848f9916d99690$var$boxdL = "╕";
var $a8848f9916d99690$var$boxDl = "╖";
var $a8848f9916d99690$var$boxDL = "╗";
var $a8848f9916d99690$var$boxdr = "┌";
var $a8848f9916d99690$var$boxdR = "╒";
var $a8848f9916d99690$var$boxDr = "╓";
var $a8848f9916d99690$var$boxDR = "╔";
var $a8848f9916d99690$var$boxh = "─";
var $a8848f9916d99690$var$boxH = "═";
var $a8848f9916d99690$var$boxhd = "┬";
var $a8848f9916d99690$var$boxHd = "╤";
var $a8848f9916d99690$var$boxhD = "╥";
var $a8848f9916d99690$var$boxHD = "╦";
var $a8848f9916d99690$var$boxhu = "┴";
var $a8848f9916d99690$var$boxHu = "╧";
var $a8848f9916d99690$var$boxhU = "╨";
var $a8848f9916d99690$var$boxHU = "╩";
var $a8848f9916d99690$var$boxminus = "⊟";
var $a8848f9916d99690$var$boxplus = "⊞";
var $a8848f9916d99690$var$boxtimes = "⊠";
var $a8848f9916d99690$var$boxul = "┘";
var $a8848f9916d99690$var$boxuL = "╛";
var $a8848f9916d99690$var$boxUl = "╜";
var $a8848f9916d99690$var$boxUL = "╝";
var $a8848f9916d99690$var$boxur = "└";
var $a8848f9916d99690$var$boxuR = "╘";
var $a8848f9916d99690$var$boxUr = "╙";
var $a8848f9916d99690$var$boxUR = "╚";
var $a8848f9916d99690$var$boxv = "│";
var $a8848f9916d99690$var$boxV = "║";
var $a8848f9916d99690$var$boxvh = "┼";
var $a8848f9916d99690$var$boxvH = "╪";
var $a8848f9916d99690$var$boxVh = "╫";
var $a8848f9916d99690$var$boxVH = "╬";
var $a8848f9916d99690$var$boxvl = "┤";
var $a8848f9916d99690$var$boxvL = "╡";
var $a8848f9916d99690$var$boxVl = "╢";
var $a8848f9916d99690$var$boxVL = "╣";
var $a8848f9916d99690$var$boxvr = "├";
var $a8848f9916d99690$var$boxvR = "╞";
var $a8848f9916d99690$var$boxVr = "╟";
var $a8848f9916d99690$var$boxVR = "╠";
var $a8848f9916d99690$var$bprime = "‵";
var $a8848f9916d99690$var$breve = "˘";
var $a8848f9916d99690$var$Breve = "˘";
var $a8848f9916d99690$var$brvbar$1 = "¦";
var $a8848f9916d99690$var$bscr = "𝒷";
var $a8848f9916d99690$var$Bscr = "ℬ";
var $a8848f9916d99690$var$bsemi = "⁏";
var $a8848f9916d99690$var$bsim = "∽";
var $a8848f9916d99690$var$bsime = "⋍";
var $a8848f9916d99690$var$bsolb = "⧅";
var $a8848f9916d99690$var$bsol = "\\";
var $a8848f9916d99690$var$bsolhsub = "⟈";
var $a8848f9916d99690$var$bull = "•";
var $a8848f9916d99690$var$bullet = "•";
var $a8848f9916d99690$var$bump = "≎";
var $a8848f9916d99690$var$bumpE = "⪮";
var $a8848f9916d99690$var$bumpe = "≏";
var $a8848f9916d99690$var$Bumpeq = "≎";
var $a8848f9916d99690$var$bumpeq = "≏";
var $a8848f9916d99690$var$Cacute = "Ć";
var $a8848f9916d99690$var$cacute = "ć";
var $a8848f9916d99690$var$capand = "⩄";
var $a8848f9916d99690$var$capbrcup = "⩉";
var $a8848f9916d99690$var$capcap = "⩋";
var $a8848f9916d99690$var$cap = "∩";
var $a8848f9916d99690$var$Cap = "⋒";
var $a8848f9916d99690$var$capcup = "⩇";
var $a8848f9916d99690$var$capdot = "⩀";
var $a8848f9916d99690$var$CapitalDifferentialD = "ⅅ";
var $a8848f9916d99690$var$caps = "∩︀";
var $a8848f9916d99690$var$caret = "⁁";
var $a8848f9916d99690$var$caron = "ˇ";
var $a8848f9916d99690$var$Cayleys = "ℭ";
var $a8848f9916d99690$var$ccaps = "⩍";
var $a8848f9916d99690$var$Ccaron = "Č";
var $a8848f9916d99690$var$ccaron = "č";
var $a8848f9916d99690$var$Ccedil$1 = "Ç";
var $a8848f9916d99690$var$ccedil$1 = "ç";
var $a8848f9916d99690$var$Ccirc = "Ĉ";
var $a8848f9916d99690$var$ccirc = "ĉ";
var $a8848f9916d99690$var$Cconint = "∰";
var $a8848f9916d99690$var$ccups = "⩌";
var $a8848f9916d99690$var$ccupssm = "⩐";
var $a8848f9916d99690$var$Cdot = "Ċ";
var $a8848f9916d99690$var$cdot = "ċ";
var $a8848f9916d99690$var$cedil$1 = "¸";
var $a8848f9916d99690$var$Cedilla = "¸";
var $a8848f9916d99690$var$cemptyv = "⦲";
var $a8848f9916d99690$var$cent$1 = "¢";
var $a8848f9916d99690$var$centerdot = "·";
var $a8848f9916d99690$var$CenterDot = "·";
var $a8848f9916d99690$var$cfr = "𝔠";
var $a8848f9916d99690$var$Cfr = "ℭ";
var $a8848f9916d99690$var$CHcy = "Ч";
var $a8848f9916d99690$var$chcy = "ч";
var $a8848f9916d99690$var$check = "✓";
var $a8848f9916d99690$var$checkmark = "✓";
var $a8848f9916d99690$var$Chi = "Χ";
var $a8848f9916d99690$var$chi = "χ";
var $a8848f9916d99690$var$circ = "ˆ";
var $a8848f9916d99690$var$circeq = "≗";
var $a8848f9916d99690$var$circlearrowleft = "↺";
var $a8848f9916d99690$var$circlearrowright = "↻";
var $a8848f9916d99690$var$circledast = "⊛";
var $a8848f9916d99690$var$circledcirc = "⊚";
var $a8848f9916d99690$var$circleddash = "⊝";
var $a8848f9916d99690$var$CircleDot = "⊙";
var $a8848f9916d99690$var$circledR = "®";
var $a8848f9916d99690$var$circledS = "Ⓢ";
var $a8848f9916d99690$var$CircleMinus = "⊖";
var $a8848f9916d99690$var$CirclePlus = "⊕";
var $a8848f9916d99690$var$CircleTimes = "⊗";
var $a8848f9916d99690$var$cir = "○";
var $a8848f9916d99690$var$cirE = "⧃";
var $a8848f9916d99690$var$cire = "≗";
var $a8848f9916d99690$var$cirfnint = "⨐";
var $a8848f9916d99690$var$cirmid = "⫯";
var $a8848f9916d99690$var$cirscir = "⧂";
var $a8848f9916d99690$var$ClockwiseContourIntegral = "∲";
var $a8848f9916d99690$var$CloseCurlyDoubleQuote = "”";
var $a8848f9916d99690$var$CloseCurlyQuote = "’";
var $a8848f9916d99690$var$clubs = "♣";
var $a8848f9916d99690$var$clubsuit = "♣";
var $a8848f9916d99690$var$colon = ":";
var $a8848f9916d99690$var$Colon = "∷";
var $a8848f9916d99690$var$Colone = "⩴";
var $a8848f9916d99690$var$colone = "≔";
var $a8848f9916d99690$var$coloneq = "≔";
var $a8848f9916d99690$var$comma = ",";
var $a8848f9916d99690$var$commat = "@";
var $a8848f9916d99690$var$comp = "∁";
var $a8848f9916d99690$var$compfn = "∘";
var $a8848f9916d99690$var$complement = "∁";
var $a8848f9916d99690$var$complexes = "ℂ";
var $a8848f9916d99690$var$cong = "≅";
var $a8848f9916d99690$var$congdot = "⩭";
var $a8848f9916d99690$var$Congruent = "≡";
var $a8848f9916d99690$var$conint = "∮";
var $a8848f9916d99690$var$Conint = "∯";
var $a8848f9916d99690$var$ContourIntegral = "∮";
var $a8848f9916d99690$var$copf = "𝕔";
var $a8848f9916d99690$var$Copf = "ℂ";
var $a8848f9916d99690$var$coprod = "∐";
var $a8848f9916d99690$var$Coproduct = "∐";
var $a8848f9916d99690$var$copy$2 = "©";
var $a8848f9916d99690$var$COPY$1 = "©";
var $a8848f9916d99690$var$copysr = "℗";
var $a8848f9916d99690$var$CounterClockwiseContourIntegral = "∳";
var $a8848f9916d99690$var$crarr = "↵";
var $a8848f9916d99690$var$cross$1 = "✗";
var $a8848f9916d99690$var$Cross = "⨯";
var $a8848f9916d99690$var$Cscr = "𝒞";
var $a8848f9916d99690$var$cscr = "𝒸";
var $a8848f9916d99690$var$csub = "⫏";
var $a8848f9916d99690$var$csube = "⫑";
var $a8848f9916d99690$var$csup = "⫐";
var $a8848f9916d99690$var$csupe = "⫒";
var $a8848f9916d99690$var$ctdot = "⋯";
var $a8848f9916d99690$var$cudarrl = "⤸";
var $a8848f9916d99690$var$cudarrr = "⤵";
var $a8848f9916d99690$var$cuepr = "⋞";
var $a8848f9916d99690$var$cuesc = "⋟";
var $a8848f9916d99690$var$cularr = "↶";
var $a8848f9916d99690$var$cularrp = "⤽";
var $a8848f9916d99690$var$cupbrcap = "⩈";
var $a8848f9916d99690$var$cupcap = "⩆";
var $a8848f9916d99690$var$CupCap = "≍";
var $a8848f9916d99690$var$cup = "∪";
var $a8848f9916d99690$var$Cup = "⋓";
var $a8848f9916d99690$var$cupcup = "⩊";
var $a8848f9916d99690$var$cupdot = "⊍";
var $a8848f9916d99690$var$cupor = "⩅";
var $a8848f9916d99690$var$cups = "∪︀";
var $a8848f9916d99690$var$curarr = "↷";
var $a8848f9916d99690$var$curarrm = "⤼";
var $a8848f9916d99690$var$curlyeqprec = "⋞";
var $a8848f9916d99690$var$curlyeqsucc = "⋟";
var $a8848f9916d99690$var$curlyvee = "⋎";
var $a8848f9916d99690$var$curlywedge = "⋏";
var $a8848f9916d99690$var$curren$1 = "¤";
var $a8848f9916d99690$var$curvearrowleft = "↶";
var $a8848f9916d99690$var$curvearrowright = "↷";
var $a8848f9916d99690$var$cuvee = "⋎";
var $a8848f9916d99690$var$cuwed = "⋏";
var $a8848f9916d99690$var$cwconint = "∲";
var $a8848f9916d99690$var$cwint = "∱";
var $a8848f9916d99690$var$cylcty = "⌭";
var $a8848f9916d99690$var$dagger = "†";
var $a8848f9916d99690$var$Dagger = "‡";
var $a8848f9916d99690$var$daleth = "ℸ";
var $a8848f9916d99690$var$darr = "↓";
var $a8848f9916d99690$var$Darr = "↡";
var $a8848f9916d99690$var$dArr = "⇓";
var $a8848f9916d99690$var$dash = "‐";
var $a8848f9916d99690$var$Dashv = "⫤";
var $a8848f9916d99690$var$dashv = "⊣";
var $a8848f9916d99690$var$dbkarow = "⤏";
var $a8848f9916d99690$var$dblac = "˝";
var $a8848f9916d99690$var$Dcaron = "Ď";
var $a8848f9916d99690$var$dcaron = "ď";
var $a8848f9916d99690$var$Dcy = "Д";
var $a8848f9916d99690$var$dcy = "д";
var $a8848f9916d99690$var$ddagger = "‡";
var $a8848f9916d99690$var$ddarr = "⇊";
var $a8848f9916d99690$var$DD = "ⅅ";
var $a8848f9916d99690$var$dd = "ⅆ";
var $a8848f9916d99690$var$DDotrahd = "⤑";
var $a8848f9916d99690$var$ddotseq = "⩷";
var $a8848f9916d99690$var$deg$1 = "°";
var $a8848f9916d99690$var$Del = "∇";
var $a8848f9916d99690$var$Delta = "Δ";
var $a8848f9916d99690$var$delta = "δ";
var $a8848f9916d99690$var$demptyv = "⦱";
var $a8848f9916d99690$var$dfisht = "⥿";
var $a8848f9916d99690$var$Dfr = "𝔇";
var $a8848f9916d99690$var$dfr = "𝔡";
var $a8848f9916d99690$var$dHar = "⥥";
var $a8848f9916d99690$var$dharl = "⇃";
var $a8848f9916d99690$var$dharr = "⇂";
var $a8848f9916d99690$var$DiacriticalAcute = "´";
var $a8848f9916d99690$var$DiacriticalDot = "˙";
var $a8848f9916d99690$var$DiacriticalDoubleAcute = "˝";
var $a8848f9916d99690$var$DiacriticalGrave = "`";
var $a8848f9916d99690$var$DiacriticalTilde = "˜";
var $a8848f9916d99690$var$diam = "⋄";
var $a8848f9916d99690$var$diamond = "⋄";
var $a8848f9916d99690$var$Diamond = "⋄";
var $a8848f9916d99690$var$diamondsuit = "♦";
var $a8848f9916d99690$var$diams = "♦";
var $a8848f9916d99690$var$die = "¨";
var $a8848f9916d99690$var$DifferentialD = "ⅆ";
var $a8848f9916d99690$var$digamma = "ϝ";
var $a8848f9916d99690$var$disin = "⋲";
var $a8848f9916d99690$var$div = "÷";
var $a8848f9916d99690$var$divide$1 = "÷";
var $a8848f9916d99690$var$divideontimes = "⋇";
var $a8848f9916d99690$var$divonx = "⋇";
var $a8848f9916d99690$var$DJcy = "Ђ";
var $a8848f9916d99690$var$djcy = "ђ";
var $a8848f9916d99690$var$dlcorn = "⌞";
var $a8848f9916d99690$var$dlcrop = "⌍";
var $a8848f9916d99690$var$dollar = "$";
var $a8848f9916d99690$var$Dopf = "𝔻";
var $a8848f9916d99690$var$dopf = "𝕕";
var $a8848f9916d99690$var$Dot = "¨";
var $a8848f9916d99690$var$dot$1 = "˙";
var $a8848f9916d99690$var$DotDot = "⃜";
var $a8848f9916d99690$var$doteq = "≐";
var $a8848f9916d99690$var$doteqdot = "≑";
var $a8848f9916d99690$var$DotEqual = "≐";
var $a8848f9916d99690$var$dotminus = "∸";
var $a8848f9916d99690$var$dotplus = "∔";
var $a8848f9916d99690$var$dotsquare = "⊡";
var $a8848f9916d99690$var$doublebarwedge = "⌆";
var $a8848f9916d99690$var$DoubleContourIntegral = "∯";
var $a8848f9916d99690$var$DoubleDot = "¨";
var $a8848f9916d99690$var$DoubleDownArrow = "⇓";
var $a8848f9916d99690$var$DoubleLeftArrow = "⇐";
var $a8848f9916d99690$var$DoubleLeftRightArrow = "⇔";
var $a8848f9916d99690$var$DoubleLeftTee = "⫤";
var $a8848f9916d99690$var$DoubleLongLeftArrow = "⟸";
var $a8848f9916d99690$var$DoubleLongLeftRightArrow = "⟺";
var $a8848f9916d99690$var$DoubleLongRightArrow = "⟹";
var $a8848f9916d99690$var$DoubleRightArrow = "⇒";
var $a8848f9916d99690$var$DoubleRightTee = "⊨";
var $a8848f9916d99690$var$DoubleUpArrow = "⇑";
var $a8848f9916d99690$var$DoubleUpDownArrow = "⇕";
var $a8848f9916d99690$var$DoubleVerticalBar = "∥";
var $a8848f9916d99690$var$DownArrowBar = "⤓";
var $a8848f9916d99690$var$downarrow = "↓";
var $a8848f9916d99690$var$DownArrow = "↓";
var $a8848f9916d99690$var$Downarrow = "⇓";
var $a8848f9916d99690$var$DownArrowUpArrow = "⇵";
var $a8848f9916d99690$var$DownBreve = "̑";
var $a8848f9916d99690$var$downdownarrows = "⇊";
var $a8848f9916d99690$var$downharpoonleft = "⇃";
var $a8848f9916d99690$var$downharpoonright = "⇂";
var $a8848f9916d99690$var$DownLeftRightVector = "⥐";
var $a8848f9916d99690$var$DownLeftTeeVector = "⥞";
var $a8848f9916d99690$var$DownLeftVectorBar = "⥖";
var $a8848f9916d99690$var$DownLeftVector = "↽";
var $a8848f9916d99690$var$DownRightTeeVector = "⥟";
var $a8848f9916d99690$var$DownRightVectorBar = "⥗";
var $a8848f9916d99690$var$DownRightVector = "⇁";
var $a8848f9916d99690$var$DownTeeArrow = "↧";
var $a8848f9916d99690$var$DownTee = "⊤";
var $a8848f9916d99690$var$drbkarow = "⤐";
var $a8848f9916d99690$var$drcorn = "⌟";
var $a8848f9916d99690$var$drcrop = "⌌";
var $a8848f9916d99690$var$Dscr = "𝒟";
var $a8848f9916d99690$var$dscr = "𝒹";
var $a8848f9916d99690$var$DScy = "Ѕ";
var $a8848f9916d99690$var$dscy = "ѕ";
var $a8848f9916d99690$var$dsol = "⧶";
var $a8848f9916d99690$var$Dstrok = "Đ";
var $a8848f9916d99690$var$dstrok = "đ";
var $a8848f9916d99690$var$dtdot = "⋱";
var $a8848f9916d99690$var$dtri = "▿";
var $a8848f9916d99690$var$dtrif = "▾";
var $a8848f9916d99690$var$duarr = "⇵";
var $a8848f9916d99690$var$duhar = "⥯";
var $a8848f9916d99690$var$dwangle = "⦦";
var $a8848f9916d99690$var$DZcy = "Џ";
var $a8848f9916d99690$var$dzcy = "џ";
var $a8848f9916d99690$var$dzigrarr = "⟿";
var $a8848f9916d99690$var$Eacute$1 = "É";
var $a8848f9916d99690$var$eacute$1 = "é";
var $a8848f9916d99690$var$easter = "⩮";
var $a8848f9916d99690$var$Ecaron = "Ě";
var $a8848f9916d99690$var$ecaron = "ě";
var $a8848f9916d99690$var$Ecirc$1 = "Ê";
var $a8848f9916d99690$var$ecirc$1 = "ê";
var $a8848f9916d99690$var$ecir = "≖";
var $a8848f9916d99690$var$ecolon = "≕";
var $a8848f9916d99690$var$Ecy = "Э";
var $a8848f9916d99690$var$ecy = "э";
var $a8848f9916d99690$var$eDDot = "⩷";
var $a8848f9916d99690$var$Edot = "Ė";
var $a8848f9916d99690$var$edot = "ė";
var $a8848f9916d99690$var$eDot = "≑";
var $a8848f9916d99690$var$ee = "ⅇ";
var $a8848f9916d99690$var$efDot = "≒";
var $a8848f9916d99690$var$Efr = "𝔈";
var $a8848f9916d99690$var$efr = "𝔢";
var $a8848f9916d99690$var$eg = "⪚";
var $a8848f9916d99690$var$Egrave$1 = "È";
var $a8848f9916d99690$var$egrave$1 = "è";
var $a8848f9916d99690$var$egs = "⪖";
var $a8848f9916d99690$var$egsdot = "⪘";
var $a8848f9916d99690$var$el = "⪙";
var $a8848f9916d99690$var$Element = "∈";
var $a8848f9916d99690$var$elinters = "⏧";
var $a8848f9916d99690$var$ell = "ℓ";
var $a8848f9916d99690$var$els = "⪕";
var $a8848f9916d99690$var$elsdot = "⪗";
var $a8848f9916d99690$var$Emacr = "Ē";
var $a8848f9916d99690$var$emacr = "ē";
var $a8848f9916d99690$var$empty = "∅";
var $a8848f9916d99690$var$emptyset = "∅";
var $a8848f9916d99690$var$EmptySmallSquare = "◻";
var $a8848f9916d99690$var$emptyv = "∅";
var $a8848f9916d99690$var$EmptyVerySmallSquare = "▫";
var $a8848f9916d99690$var$emsp13 = " ";
var $a8848f9916d99690$var$emsp14 = " ";
var $a8848f9916d99690$var$emsp = " ";
var $a8848f9916d99690$var$ENG = "Ŋ";
var $a8848f9916d99690$var$eng = "ŋ";
var $a8848f9916d99690$var$ensp = " ";
var $a8848f9916d99690$var$Eogon = "Ę";
var $a8848f9916d99690$var$eogon = "ę";
var $a8848f9916d99690$var$Eopf = "𝔼";
var $a8848f9916d99690$var$eopf = "𝕖";
var $a8848f9916d99690$var$epar = "⋕";
var $a8848f9916d99690$var$eparsl = "⧣";
var $a8848f9916d99690$var$eplus = "⩱";
var $a8848f9916d99690$var$epsi = "ε";
var $a8848f9916d99690$var$Epsilon = "Ε";
var $a8848f9916d99690$var$epsilon = "ε";
var $a8848f9916d99690$var$epsiv = "ϵ";
var $a8848f9916d99690$var$eqcirc = "≖";
var $a8848f9916d99690$var$eqcolon = "≕";
var $a8848f9916d99690$var$eqsim = "≂";
var $a8848f9916d99690$var$eqslantgtr = "⪖";
var $a8848f9916d99690$var$eqslantless = "⪕";
var $a8848f9916d99690$var$Equal = "⩵";
var $a8848f9916d99690$var$equals = "=";
var $a8848f9916d99690$var$EqualTilde = "≂";
var $a8848f9916d99690$var$equest = "≟";
var $a8848f9916d99690$var$Equilibrium = "⇌";
var $a8848f9916d99690$var$equiv = "≡";
var $a8848f9916d99690$var$equivDD = "⩸";
var $a8848f9916d99690$var$eqvparsl = "⧥";
var $a8848f9916d99690$var$erarr = "⥱";
var $a8848f9916d99690$var$erDot = "≓";
var $a8848f9916d99690$var$escr = "ℯ";
var $a8848f9916d99690$var$Escr = "ℰ";
var $a8848f9916d99690$var$esdot = "≐";
var $a8848f9916d99690$var$Esim = "⩳";
var $a8848f9916d99690$var$esim = "≂";
var $a8848f9916d99690$var$Eta = "Η";
var $a8848f9916d99690$var$eta = "η";
var $a8848f9916d99690$var$ETH$1 = "Ð";
var $a8848f9916d99690$var$eth$1 = "ð";
var $a8848f9916d99690$var$Euml$1 = "Ë";
var $a8848f9916d99690$var$euml$1 = "ë";
var $a8848f9916d99690$var$euro = "€";
var $a8848f9916d99690$var$excl = "!";
var $a8848f9916d99690$var$exist = "∃";
var $a8848f9916d99690$var$Exists = "∃";
var $a8848f9916d99690$var$expectation = "ℰ";
var $a8848f9916d99690$var$exponentiale = "ⅇ";
var $a8848f9916d99690$var$ExponentialE = "ⅇ";
var $a8848f9916d99690$var$fallingdotseq = "≒";
var $a8848f9916d99690$var$Fcy = "Ф";
var $a8848f9916d99690$var$fcy = "ф";
var $a8848f9916d99690$var$female = "♀";
var $a8848f9916d99690$var$ffilig = "ﬃ";
var $a8848f9916d99690$var$fflig = "ﬀ";
var $a8848f9916d99690$var$ffllig = "ﬄ";
var $a8848f9916d99690$var$Ffr = "𝔉";
var $a8848f9916d99690$var$ffr = "𝔣";
var $a8848f9916d99690$var$filig = "ﬁ";
var $a8848f9916d99690$var$FilledSmallSquare = "◼";
var $a8848f9916d99690$var$FilledVerySmallSquare = "▪";
var $a8848f9916d99690$var$fjlig = "fj";
var $a8848f9916d99690$var$flat = "♭";
var $a8848f9916d99690$var$fllig = "ﬂ";
var $a8848f9916d99690$var$fltns = "▱";
var $a8848f9916d99690$var$fnof = "ƒ";
var $a8848f9916d99690$var$Fopf = "𝔽";
var $a8848f9916d99690$var$fopf = "𝕗";
var $a8848f9916d99690$var$forall = "∀";
var $a8848f9916d99690$var$ForAll = "∀";
var $a8848f9916d99690$var$fork = "⋔";
var $a8848f9916d99690$var$forkv = "⫙";
var $a8848f9916d99690$var$Fouriertrf = "ℱ";
var $a8848f9916d99690$var$fpartint = "⨍";
var $a8848f9916d99690$var$frac12$1 = "½";
var $a8848f9916d99690$var$frac13 = "⅓";
var $a8848f9916d99690$var$frac14$1 = "¼";
var $a8848f9916d99690$var$frac15 = "⅕";
var $a8848f9916d99690$var$frac16 = "⅙";
var $a8848f9916d99690$var$frac18 = "⅛";
var $a8848f9916d99690$var$frac23 = "⅔";
var $a8848f9916d99690$var$frac25 = "⅖";
var $a8848f9916d99690$var$frac34$1 = "¾";
var $a8848f9916d99690$var$frac35 = "⅗";
var $a8848f9916d99690$var$frac38 = "⅜";
var $a8848f9916d99690$var$frac45 = "⅘";
var $a8848f9916d99690$var$frac56 = "⅚";
var $a8848f9916d99690$var$frac58 = "⅝";
var $a8848f9916d99690$var$frac78 = "⅞";
var $a8848f9916d99690$var$frasl = "⁄";
var $a8848f9916d99690$var$frown = "⌢";
var $a8848f9916d99690$var$fscr = "𝒻";
var $a8848f9916d99690$var$Fscr = "ℱ";
var $a8848f9916d99690$var$gacute = "ǵ";
var $a8848f9916d99690$var$Gamma = "Γ";
var $a8848f9916d99690$var$gamma = "γ";
var $a8848f9916d99690$var$Gammad = "Ϝ";
var $a8848f9916d99690$var$gammad = "ϝ";
var $a8848f9916d99690$var$gap = "⪆";
var $a8848f9916d99690$var$Gbreve = "Ğ";
var $a8848f9916d99690$var$gbreve = "ğ";
var $a8848f9916d99690$var$Gcedil = "Ģ";
var $a8848f9916d99690$var$Gcirc = "Ĝ";
var $a8848f9916d99690$var$gcirc = "ĝ";
var $a8848f9916d99690$var$Gcy = "Г";
var $a8848f9916d99690$var$gcy = "г";
var $a8848f9916d99690$var$Gdot = "Ġ";
var $a8848f9916d99690$var$gdot = "ġ";
var $a8848f9916d99690$var$ge = "≥";
var $a8848f9916d99690$var$gE = "≧";
var $a8848f9916d99690$var$gEl = "⪌";
var $a8848f9916d99690$var$gel = "⋛";
var $a8848f9916d99690$var$geq = "≥";
var $a8848f9916d99690$var$geqq = "≧";
var $a8848f9916d99690$var$geqslant = "⩾";
var $a8848f9916d99690$var$gescc = "⪩";
var $a8848f9916d99690$var$ges = "⩾";
var $a8848f9916d99690$var$gesdot = "⪀";
var $a8848f9916d99690$var$gesdoto = "⪂";
var $a8848f9916d99690$var$gesdotol = "⪄";
var $a8848f9916d99690$var$gesl = "⋛︀";
var $a8848f9916d99690$var$gesles = "⪔";
var $a8848f9916d99690$var$Gfr = "𝔊";
var $a8848f9916d99690$var$gfr = "𝔤";
var $a8848f9916d99690$var$gg = "≫";
var $a8848f9916d99690$var$Gg = "⋙";
var $a8848f9916d99690$var$ggg = "⋙";
var $a8848f9916d99690$var$gimel = "ℷ";
var $a8848f9916d99690$var$GJcy = "Ѓ";
var $a8848f9916d99690$var$gjcy = "ѓ";
var $a8848f9916d99690$var$gla = "⪥";
var $a8848f9916d99690$var$gl = "≷";
var $a8848f9916d99690$var$glE = "⪒";
var $a8848f9916d99690$var$glj = "⪤";
var $a8848f9916d99690$var$gnap = "⪊";
var $a8848f9916d99690$var$gnapprox = "⪊";
var $a8848f9916d99690$var$gne = "⪈";
var $a8848f9916d99690$var$gnE = "≩";
var $a8848f9916d99690$var$gneq = "⪈";
var $a8848f9916d99690$var$gneqq = "≩";
var $a8848f9916d99690$var$gnsim = "⋧";
var $a8848f9916d99690$var$Gopf = "𝔾";
var $a8848f9916d99690$var$gopf = "𝕘";
var $a8848f9916d99690$var$grave = "`";
var $a8848f9916d99690$var$GreaterEqual = "≥";
var $a8848f9916d99690$var$GreaterEqualLess = "⋛";
var $a8848f9916d99690$var$GreaterFullEqual = "≧";
var $a8848f9916d99690$var$GreaterGreater = "⪢";
var $a8848f9916d99690$var$GreaterLess = "≷";
var $a8848f9916d99690$var$GreaterSlantEqual = "⩾";
var $a8848f9916d99690$var$GreaterTilde = "≳";
var $a8848f9916d99690$var$Gscr = "𝒢";
var $a8848f9916d99690$var$gscr = "ℊ";
var $a8848f9916d99690$var$gsim = "≳";
var $a8848f9916d99690$var$gsime = "⪎";
var $a8848f9916d99690$var$gsiml = "⪐";
var $a8848f9916d99690$var$gtcc = "⪧";
var $a8848f9916d99690$var$gtcir = "⩺";
var $a8848f9916d99690$var$gt$2 = ">";
var $a8848f9916d99690$var$GT$1 = ">";
var $a8848f9916d99690$var$Gt = "≫";
var $a8848f9916d99690$var$gtdot = "⋗";
var $a8848f9916d99690$var$gtlPar = "⦕";
var $a8848f9916d99690$var$gtquest = "⩼";
var $a8848f9916d99690$var$gtrapprox = "⪆";
var $a8848f9916d99690$var$gtrarr = "⥸";
var $a8848f9916d99690$var$gtrdot = "⋗";
var $a8848f9916d99690$var$gtreqless = "⋛";
var $a8848f9916d99690$var$gtreqqless = "⪌";
var $a8848f9916d99690$var$gtrless = "≷";
var $a8848f9916d99690$var$gtrsim = "≳";
var $a8848f9916d99690$var$gvertneqq = "≩︀";
var $a8848f9916d99690$var$gvnE = "≩︀";
var $a8848f9916d99690$var$Hacek = "ˇ";
var $a8848f9916d99690$var$hairsp = " ";
var $a8848f9916d99690$var$half = "½";
var $a8848f9916d99690$var$hamilt = "ℋ";
var $a8848f9916d99690$var$HARDcy = "Ъ";
var $a8848f9916d99690$var$hardcy = "ъ";
var $a8848f9916d99690$var$harrcir = "⥈";
var $a8848f9916d99690$var$harr = "↔";
var $a8848f9916d99690$var$hArr = "⇔";
var $a8848f9916d99690$var$harrw = "↭";
var $a8848f9916d99690$var$Hat = "^";
var $a8848f9916d99690$var$hbar = "ℏ";
var $a8848f9916d99690$var$Hcirc = "Ĥ";
var $a8848f9916d99690$var$hcirc = "ĥ";
var $a8848f9916d99690$var$hearts = "♥";
var $a8848f9916d99690$var$heartsuit = "♥";
var $a8848f9916d99690$var$hellip = "…";
var $a8848f9916d99690$var$hercon = "⊹";
var $a8848f9916d99690$var$hfr = "𝔥";
var $a8848f9916d99690$var$Hfr = "ℌ";
var $a8848f9916d99690$var$HilbertSpace = "ℋ";
var $a8848f9916d99690$var$hksearow = "⤥";
var $a8848f9916d99690$var$hkswarow = "⤦";
var $a8848f9916d99690$var$hoarr = "⇿";
var $a8848f9916d99690$var$homtht = "∻";
var $a8848f9916d99690$var$hookleftarrow = "↩";
var $a8848f9916d99690$var$hookrightarrow = "↪";
var $a8848f9916d99690$var$hopf = "𝕙";
var $a8848f9916d99690$var$Hopf = "ℍ";
var $a8848f9916d99690$var$horbar = "―";
var $a8848f9916d99690$var$HorizontalLine = "─";
var $a8848f9916d99690$var$hscr = "𝒽";
var $a8848f9916d99690$var$Hscr = "ℋ";
var $a8848f9916d99690$var$hslash = "ℏ";
var $a8848f9916d99690$var$Hstrok = "Ħ";
var $a8848f9916d99690$var$hstrok = "ħ";
var $a8848f9916d99690$var$HumpDownHump = "≎";
var $a8848f9916d99690$var$HumpEqual = "≏";
var $a8848f9916d99690$var$hybull = "⁃";
var $a8848f9916d99690$var$hyphen = "‐";
var $a8848f9916d99690$var$Iacute$1 = "Í";
var $a8848f9916d99690$var$iacute$1 = "í";
var $a8848f9916d99690$var$ic = "⁣";
var $a8848f9916d99690$var$Icirc$1 = "Î";
var $a8848f9916d99690$var$icirc$1 = "î";
var $a8848f9916d99690$var$Icy = "И";
var $a8848f9916d99690$var$icy = "и";
var $a8848f9916d99690$var$Idot = "İ";
var $a8848f9916d99690$var$IEcy = "Е";
var $a8848f9916d99690$var$iecy = "е";
var $a8848f9916d99690$var$iexcl$1 = "¡";
var $a8848f9916d99690$var$iff = "⇔";
var $a8848f9916d99690$var$ifr = "𝔦";
var $a8848f9916d99690$var$Ifr = "ℑ";
var $a8848f9916d99690$var$Igrave$1 = "Ì";
var $a8848f9916d99690$var$igrave$1 = "ì";
var $a8848f9916d99690$var$ii = "ⅈ";
var $a8848f9916d99690$var$iiiint = "⨌";
var $a8848f9916d99690$var$iiint = "∭";
var $a8848f9916d99690$var$iinfin = "⧜";
var $a8848f9916d99690$var$iiota = "℩";
var $a8848f9916d99690$var$IJlig = "Ĳ";
var $a8848f9916d99690$var$ijlig = "ĳ";
var $a8848f9916d99690$var$Imacr = "Ī";
var $a8848f9916d99690$var$imacr = "ī";
var $a8848f9916d99690$var$image = "ℑ";
var $a8848f9916d99690$var$ImaginaryI = "ⅈ";
var $a8848f9916d99690$var$imagline = "ℐ";
var $a8848f9916d99690$var$imagpart = "ℑ";
var $a8848f9916d99690$var$imath = "ı";
var $a8848f9916d99690$var$Im = "ℑ";
var $a8848f9916d99690$var$imof = "⊷";
var $a8848f9916d99690$var$imped = "Ƶ";
var $a8848f9916d99690$var$Implies = "⇒";
var $a8848f9916d99690$var$incare = "℅";
var $a8848f9916d99690$var$infin = "∞";
var $a8848f9916d99690$var$infintie = "⧝";
var $a8848f9916d99690$var$inodot = "ı";
var $a8848f9916d99690$var$intcal = "⊺";
var $a8848f9916d99690$var$int = "∫";
var $a8848f9916d99690$var$Int = "∬";
var $a8848f9916d99690$var$integers = "ℤ";
var $a8848f9916d99690$var$Integral = "∫";
var $a8848f9916d99690$var$intercal = "⊺";
var $a8848f9916d99690$var$Intersection = "⋂";
var $a8848f9916d99690$var$intlarhk = "⨗";
var $a8848f9916d99690$var$intprod = "⨼";
var $a8848f9916d99690$var$InvisibleComma = "⁣";
var $a8848f9916d99690$var$InvisibleTimes = "⁢";
var $a8848f9916d99690$var$IOcy = "Ё";
var $a8848f9916d99690$var$iocy = "ё";
var $a8848f9916d99690$var$Iogon = "Į";
var $a8848f9916d99690$var$iogon = "į";
var $a8848f9916d99690$var$Iopf = "𝕀";
var $a8848f9916d99690$var$iopf = "𝕚";
var $a8848f9916d99690$var$Iota = "Ι";
var $a8848f9916d99690$var$iota = "ι";
var $a8848f9916d99690$var$iprod = "⨼";
var $a8848f9916d99690$var$iquest$1 = "¿";
var $a8848f9916d99690$var$iscr = "𝒾";
var $a8848f9916d99690$var$Iscr = "ℐ";
var $a8848f9916d99690$var$isin = "∈";
var $a8848f9916d99690$var$isindot = "⋵";
var $a8848f9916d99690$var$isinE = "⋹";
var $a8848f9916d99690$var$isins = "⋴";
var $a8848f9916d99690$var$isinsv = "⋳";
var $a8848f9916d99690$var$isinv = "∈";
var $a8848f9916d99690$var$it = "⁢";
var $a8848f9916d99690$var$Itilde = "Ĩ";
var $a8848f9916d99690$var$itilde = "ĩ";
var $a8848f9916d99690$var$Iukcy = "І";
var $a8848f9916d99690$var$iukcy = "і";
var $a8848f9916d99690$var$Iuml$1 = "Ï";
var $a8848f9916d99690$var$iuml$1 = "ï";
var $a8848f9916d99690$var$Jcirc = "Ĵ";
var $a8848f9916d99690$var$jcirc = "ĵ";
var $a8848f9916d99690$var$Jcy = "Й";
var $a8848f9916d99690$var$jcy = "й";
var $a8848f9916d99690$var$Jfr = "𝔍";
var $a8848f9916d99690$var$jfr = "𝔧";
var $a8848f9916d99690$var$jmath = "ȷ";
var $a8848f9916d99690$var$Jopf = "𝕁";
var $a8848f9916d99690$var$jopf = "𝕛";
var $a8848f9916d99690$var$Jscr = "𝒥";
var $a8848f9916d99690$var$jscr = "𝒿";
var $a8848f9916d99690$var$Jsercy = "Ј";
var $a8848f9916d99690$var$jsercy = "ј";
var $a8848f9916d99690$var$Jukcy = "Є";
var $a8848f9916d99690$var$jukcy = "є";
var $a8848f9916d99690$var$Kappa = "Κ";
var $a8848f9916d99690$var$kappa = "κ";
var $a8848f9916d99690$var$kappav = "ϰ";
var $a8848f9916d99690$var$Kcedil = "Ķ";
var $a8848f9916d99690$var$kcedil = "ķ";
var $a8848f9916d99690$var$Kcy = "К";
var $a8848f9916d99690$var$kcy = "к";
var $a8848f9916d99690$var$Kfr = "𝔎";
var $a8848f9916d99690$var$kfr = "𝔨";
var $a8848f9916d99690$var$kgreen = "ĸ";
var $a8848f9916d99690$var$KHcy = "Х";
var $a8848f9916d99690$var$khcy = "х";
var $a8848f9916d99690$var$KJcy = "Ќ";
var $a8848f9916d99690$var$kjcy = "ќ";
var $a8848f9916d99690$var$Kopf = "𝕂";
var $a8848f9916d99690$var$kopf = "𝕜";
var $a8848f9916d99690$var$Kscr = "𝒦";
var $a8848f9916d99690$var$kscr = "𝓀";
var $a8848f9916d99690$var$lAarr = "⇚";
var $a8848f9916d99690$var$Lacute = "Ĺ";
var $a8848f9916d99690$var$lacute = "ĺ";
var $a8848f9916d99690$var$laemptyv = "⦴";
var $a8848f9916d99690$var$lagran = "ℒ";
var $a8848f9916d99690$var$Lambda = "Λ";
var $a8848f9916d99690$var$lambda = "λ";
var $a8848f9916d99690$var$lang = "⟨";
var $a8848f9916d99690$var$Lang = "⟪";
var $a8848f9916d99690$var$langd = "⦑";
var $a8848f9916d99690$var$langle = "⟨";
var $a8848f9916d99690$var$lap = "⪅";
var $a8848f9916d99690$var$Laplacetrf = "ℒ";
var $a8848f9916d99690$var$laquo$1 = "«";
var $a8848f9916d99690$var$larrb = "⇤";
var $a8848f9916d99690$var$larrbfs = "⤟";
var $a8848f9916d99690$var$larr = "←";
var $a8848f9916d99690$var$Larr = "↞";
var $a8848f9916d99690$var$lArr = "⇐";
var $a8848f9916d99690$var$larrfs = "⤝";
var $a8848f9916d99690$var$larrhk = "↩";
var $a8848f9916d99690$var$larrlp = "↫";
var $a8848f9916d99690$var$larrpl = "⤹";
var $a8848f9916d99690$var$larrsim = "⥳";
var $a8848f9916d99690$var$larrtl = "↢";
var $a8848f9916d99690$var$latail = "⤙";
var $a8848f9916d99690$var$lAtail = "⤛";
var $a8848f9916d99690$var$lat = "⪫";
var $a8848f9916d99690$var$late = "⪭";
var $a8848f9916d99690$var$lates = "⪭︀";
var $a8848f9916d99690$var$lbarr = "⤌";
var $a8848f9916d99690$var$lBarr = "⤎";
var $a8848f9916d99690$var$lbbrk = "❲";
var $a8848f9916d99690$var$lbrace = "{";
var $a8848f9916d99690$var$lbrack = "[";
var $a8848f9916d99690$var$lbrke = "⦋";
var $a8848f9916d99690$var$lbrksld = "⦏";
var $a8848f9916d99690$var$lbrkslu = "⦍";
var $a8848f9916d99690$var$Lcaron = "Ľ";
var $a8848f9916d99690$var$lcaron = "ľ";
var $a8848f9916d99690$var$Lcedil = "Ļ";
var $a8848f9916d99690$var$lcedil = "ļ";
var $a8848f9916d99690$var$lceil = "⌈";
var $a8848f9916d99690$var$lcub = "{";
var $a8848f9916d99690$var$Lcy = "Л";
var $a8848f9916d99690$var$lcy = "л";
var $a8848f9916d99690$var$ldca = "⤶";
var $a8848f9916d99690$var$ldquo = "“";
var $a8848f9916d99690$var$ldquor = "„";
var $a8848f9916d99690$var$ldrdhar = "⥧";
var $a8848f9916d99690$var$ldrushar = "⥋";
var $a8848f9916d99690$var$ldsh = "↲";
var $a8848f9916d99690$var$le = "≤";
var $a8848f9916d99690$var$lE = "≦";
var $a8848f9916d99690$var$LeftAngleBracket = "⟨";
var $a8848f9916d99690$var$LeftArrowBar = "⇤";
var $a8848f9916d99690$var$leftarrow = "←";
var $a8848f9916d99690$var$LeftArrow = "←";
var $a8848f9916d99690$var$Leftarrow = "⇐";
var $a8848f9916d99690$var$LeftArrowRightArrow = "⇆";
var $a8848f9916d99690$var$leftarrowtail = "↢";
var $a8848f9916d99690$var$LeftCeiling = "⌈";
var $a8848f9916d99690$var$LeftDoubleBracket = "⟦";
var $a8848f9916d99690$var$LeftDownTeeVector = "⥡";
var $a8848f9916d99690$var$LeftDownVectorBar = "⥙";
var $a8848f9916d99690$var$LeftDownVector = "⇃";
var $a8848f9916d99690$var$LeftFloor = "⌊";
var $a8848f9916d99690$var$leftharpoondown = "↽";
var $a8848f9916d99690$var$leftharpoonup = "↼";
var $a8848f9916d99690$var$leftleftarrows = "⇇";
var $a8848f9916d99690$var$leftrightarrow = "↔";
var $a8848f9916d99690$var$LeftRightArrow = "↔";
var $a8848f9916d99690$var$Leftrightarrow = "⇔";
var $a8848f9916d99690$var$leftrightarrows = "⇆";
var $a8848f9916d99690$var$leftrightharpoons = "⇋";
var $a8848f9916d99690$var$leftrightsquigarrow = "↭";
var $a8848f9916d99690$var$LeftRightVector = "⥎";
var $a8848f9916d99690$var$LeftTeeArrow = "↤";
var $a8848f9916d99690$var$LeftTee = "⊣";
var $a8848f9916d99690$var$LeftTeeVector = "⥚";
var $a8848f9916d99690$var$leftthreetimes = "⋋";
var $a8848f9916d99690$var$LeftTriangleBar = "⧏";
var $a8848f9916d99690$var$LeftTriangle = "⊲";
var $a8848f9916d99690$var$LeftTriangleEqual = "⊴";
var $a8848f9916d99690$var$LeftUpDownVector = "⥑";
var $a8848f9916d99690$var$LeftUpTeeVector = "⥠";
var $a8848f9916d99690$var$LeftUpVectorBar = "⥘";
var $a8848f9916d99690$var$LeftUpVector = "↿";
var $a8848f9916d99690$var$LeftVectorBar = "⥒";
var $a8848f9916d99690$var$LeftVector = "↼";
var $a8848f9916d99690$var$lEg = "⪋";
var $a8848f9916d99690$var$leg = "⋚";
var $a8848f9916d99690$var$leq = "≤";
var $a8848f9916d99690$var$leqq = "≦";
var $a8848f9916d99690$var$leqslant = "⩽";
var $a8848f9916d99690$var$lescc = "⪨";
var $a8848f9916d99690$var$les = "⩽";
var $a8848f9916d99690$var$lesdot = "⩿";
var $a8848f9916d99690$var$lesdoto = "⪁";
var $a8848f9916d99690$var$lesdotor = "⪃";
var $a8848f9916d99690$var$lesg = "⋚︀";
var $a8848f9916d99690$var$lesges = "⪓";
var $a8848f9916d99690$var$lessapprox = "⪅";
var $a8848f9916d99690$var$lessdot = "⋖";
var $a8848f9916d99690$var$lesseqgtr = "⋚";
var $a8848f9916d99690$var$lesseqqgtr = "⪋";
var $a8848f9916d99690$var$LessEqualGreater = "⋚";
var $a8848f9916d99690$var$LessFullEqual = "≦";
var $a8848f9916d99690$var$LessGreater = "≶";
var $a8848f9916d99690$var$lessgtr = "≶";
var $a8848f9916d99690$var$LessLess = "⪡";
var $a8848f9916d99690$var$lesssim = "≲";
var $a8848f9916d99690$var$LessSlantEqual = "⩽";
var $a8848f9916d99690$var$LessTilde = "≲";
var $a8848f9916d99690$var$lfisht = "⥼";
var $a8848f9916d99690$var$lfloor = "⌊";
var $a8848f9916d99690$var$Lfr = "𝔏";
var $a8848f9916d99690$var$lfr = "𝔩";
var $a8848f9916d99690$var$lg = "≶";
var $a8848f9916d99690$var$lgE = "⪑";
var $a8848f9916d99690$var$lHar = "⥢";
var $a8848f9916d99690$var$lhard = "↽";
var $a8848f9916d99690$var$lharu = "↼";
var $a8848f9916d99690$var$lharul = "⥪";
var $a8848f9916d99690$var$lhblk = "▄";
var $a8848f9916d99690$var$LJcy = "Љ";
var $a8848f9916d99690$var$ljcy = "љ";
var $a8848f9916d99690$var$llarr = "⇇";
var $a8848f9916d99690$var$ll = "≪";
var $a8848f9916d99690$var$Ll = "⋘";
var $a8848f9916d99690$var$llcorner = "⌞";
var $a8848f9916d99690$var$Lleftarrow = "⇚";
var $a8848f9916d99690$var$llhard = "⥫";
var $a8848f9916d99690$var$lltri = "◺";
var $a8848f9916d99690$var$Lmidot = "Ŀ";
var $a8848f9916d99690$var$lmidot = "ŀ";
var $a8848f9916d99690$var$lmoustache = "⎰";
var $a8848f9916d99690$var$lmoust = "⎰";
var $a8848f9916d99690$var$lnap = "⪉";
var $a8848f9916d99690$var$lnapprox = "⪉";
var $a8848f9916d99690$var$lne = "⪇";
var $a8848f9916d99690$var$lnE = "≨";
var $a8848f9916d99690$var$lneq = "⪇";
var $a8848f9916d99690$var$lneqq = "≨";
var $a8848f9916d99690$var$lnsim = "⋦";
var $a8848f9916d99690$var$loang = "⟬";
var $a8848f9916d99690$var$loarr = "⇽";
var $a8848f9916d99690$var$lobrk = "⟦";
var $a8848f9916d99690$var$longleftarrow = "⟵";
var $a8848f9916d99690$var$LongLeftArrow = "⟵";
var $a8848f9916d99690$var$Longleftarrow = "⟸";
var $a8848f9916d99690$var$longleftrightarrow = "⟷";
var $a8848f9916d99690$var$LongLeftRightArrow = "⟷";
var $a8848f9916d99690$var$Longleftrightarrow = "⟺";
var $a8848f9916d99690$var$longmapsto = "⟼";
var $a8848f9916d99690$var$longrightarrow = "⟶";
var $a8848f9916d99690$var$LongRightArrow = "⟶";
var $a8848f9916d99690$var$Longrightarrow = "⟹";
var $a8848f9916d99690$var$looparrowleft = "↫";
var $a8848f9916d99690$var$looparrowright = "↬";
var $a8848f9916d99690$var$lopar = "⦅";
var $a8848f9916d99690$var$Lopf = "𝕃";
var $a8848f9916d99690$var$lopf = "𝕝";
var $a8848f9916d99690$var$loplus = "⨭";
var $a8848f9916d99690$var$lotimes = "⨴";
var $a8848f9916d99690$var$lowast = "∗";
var $a8848f9916d99690$var$lowbar = "_";
var $a8848f9916d99690$var$LowerLeftArrow = "↙";
var $a8848f9916d99690$var$LowerRightArrow = "↘";
var $a8848f9916d99690$var$loz = "◊";
var $a8848f9916d99690$var$lozenge = "◊";
var $a8848f9916d99690$var$lozf = "⧫";
var $a8848f9916d99690$var$lpar = "(";
var $a8848f9916d99690$var$lparlt = "⦓";
var $a8848f9916d99690$var$lrarr = "⇆";
var $a8848f9916d99690$var$lrcorner = "⌟";
var $a8848f9916d99690$var$lrhar = "⇋";
var $a8848f9916d99690$var$lrhard = "⥭";
var $a8848f9916d99690$var$lrm = "‎";
var $a8848f9916d99690$var$lrtri = "⊿";
var $a8848f9916d99690$var$lsaquo = "‹";
var $a8848f9916d99690$var$lscr = "𝓁";
var $a8848f9916d99690$var$Lscr = "ℒ";
var $a8848f9916d99690$var$lsh = "↰";
var $a8848f9916d99690$var$Lsh = "↰";
var $a8848f9916d99690$var$lsim = "≲";
var $a8848f9916d99690$var$lsime = "⪍";
var $a8848f9916d99690$var$lsimg = "⪏";
var $a8848f9916d99690$var$lsqb = "[";
var $a8848f9916d99690$var$lsquo = "‘";
var $a8848f9916d99690$var$lsquor = "‚";
var $a8848f9916d99690$var$Lstrok = "Ł";
var $a8848f9916d99690$var$lstrok = "ł";
var $a8848f9916d99690$var$ltcc = "⪦";
var $a8848f9916d99690$var$ltcir = "⩹";
var $a8848f9916d99690$var$lt$2 = "<";
var $a8848f9916d99690$var$LT$1 = "<";
var $a8848f9916d99690$var$Lt = "≪";
var $a8848f9916d99690$var$ltdot = "⋖";
var $a8848f9916d99690$var$lthree = "⋋";
var $a8848f9916d99690$var$ltimes = "⋉";
var $a8848f9916d99690$var$ltlarr = "⥶";
var $a8848f9916d99690$var$ltquest = "⩻";
var $a8848f9916d99690$var$ltri = "◃";
var $a8848f9916d99690$var$ltrie = "⊴";
var $a8848f9916d99690$var$ltrif = "◂";
var $a8848f9916d99690$var$ltrPar = "⦖";
var $a8848f9916d99690$var$lurdshar = "⥊";
var $a8848f9916d99690$var$luruhar = "⥦";
var $a8848f9916d99690$var$lvertneqq = "≨︀";
var $a8848f9916d99690$var$lvnE = "≨︀";
var $a8848f9916d99690$var$macr$1 = "¯";
var $a8848f9916d99690$var$male = "♂";
var $a8848f9916d99690$var$malt = "✠";
var $a8848f9916d99690$var$maltese = "✠";
var $a8848f9916d99690$var$map = "↦";
var $a8848f9916d99690$var$mapsto = "↦";
var $a8848f9916d99690$var$mapstodown = "↧";
var $a8848f9916d99690$var$mapstoleft = "↤";
var $a8848f9916d99690$var$mapstoup = "↥";
var $a8848f9916d99690$var$marker = "▮";
var $a8848f9916d99690$var$mcomma = "⨩";
var $a8848f9916d99690$var$Mcy = "М";
var $a8848f9916d99690$var$mcy = "м";
var $a8848f9916d99690$var$mdash = "—";
var $a8848f9916d99690$var$mDDot = "∺";
var $a8848f9916d99690$var$measuredangle = "∡";
var $a8848f9916d99690$var$MediumSpace = " ";
var $a8848f9916d99690$var$Mellintrf = "ℳ";
var $a8848f9916d99690$var$Mfr = "𝔐";
var $a8848f9916d99690$var$mfr = "𝔪";
var $a8848f9916d99690$var$mho = "℧";
var $a8848f9916d99690$var$micro$1 = "µ";
var $a8848f9916d99690$var$midast = "*";
var $a8848f9916d99690$var$midcir = "⫰";
var $a8848f9916d99690$var$mid = "∣";
var $a8848f9916d99690$var$middot$1 = "·";
var $a8848f9916d99690$var$minusb = "⊟";
var $a8848f9916d99690$var$minus$1 = "−";
var $a8848f9916d99690$var$minusd = "∸";
var $a8848f9916d99690$var$minusdu = "⨪";
var $a8848f9916d99690$var$MinusPlus = "∓";
var $a8848f9916d99690$var$mlcp = "⫛";
var $a8848f9916d99690$var$mldr = "…";
var $a8848f9916d99690$var$mnplus = "∓";
var $a8848f9916d99690$var$models = "⊧";
var $a8848f9916d99690$var$Mopf = "𝕄";
var $a8848f9916d99690$var$mopf = "𝕞";
var $a8848f9916d99690$var$mp = "∓";
var $a8848f9916d99690$var$mscr = "𝓂";
var $a8848f9916d99690$var$Mscr = "ℳ";
var $a8848f9916d99690$var$mstpos = "∾";
var $a8848f9916d99690$var$Mu = "Μ";
var $a8848f9916d99690$var$mu = "μ";
var $a8848f9916d99690$var$multimap = "⊸";
var $a8848f9916d99690$var$mumap = "⊸";
var $a8848f9916d99690$var$nabla = "∇";
var $a8848f9916d99690$var$Nacute = "Ń";
var $a8848f9916d99690$var$nacute = "ń";
var $a8848f9916d99690$var$nang = "∠⃒";
var $a8848f9916d99690$var$nap = "≉";
var $a8848f9916d99690$var$napE = "⩰̸";
var $a8848f9916d99690$var$napid = "≋̸";
var $a8848f9916d99690$var$napos = "ŉ";
var $a8848f9916d99690$var$napprox = "≉";
var $a8848f9916d99690$var$natural = "♮";
var $a8848f9916d99690$var$naturals = "ℕ";
var $a8848f9916d99690$var$natur = "♮";
var $a8848f9916d99690$var$nbsp$1 = " ";
var $a8848f9916d99690$var$nbump = "≎̸";
var $a8848f9916d99690$var$nbumpe = "≏̸";
var $a8848f9916d99690$var$ncap = "⩃";
var $a8848f9916d99690$var$Ncaron = "Ň";
var $a8848f9916d99690$var$ncaron = "ň";
var $a8848f9916d99690$var$Ncedil = "Ņ";
var $a8848f9916d99690$var$ncedil = "ņ";
var $a8848f9916d99690$var$ncong = "≇";
var $a8848f9916d99690$var$ncongdot = "⩭̸";
var $a8848f9916d99690$var$ncup = "⩂";
var $a8848f9916d99690$var$Ncy = "Н";
var $a8848f9916d99690$var$ncy = "н";
var $a8848f9916d99690$var$ndash = "–";
var $a8848f9916d99690$var$nearhk = "⤤";
var $a8848f9916d99690$var$nearr = "↗";
var $a8848f9916d99690$var$neArr = "⇗";
var $a8848f9916d99690$var$nearrow = "↗";
var $a8848f9916d99690$var$ne = "≠";
var $a8848f9916d99690$var$nedot = "≐̸";
var $a8848f9916d99690$var$NegativeMediumSpace = "​";
var $a8848f9916d99690$var$NegativeThickSpace = "​";
var $a8848f9916d99690$var$NegativeThinSpace = "​";
var $a8848f9916d99690$var$NegativeVeryThinSpace = "​";
var $a8848f9916d99690$var$nequiv = "≢";
var $a8848f9916d99690$var$nesear = "⤨";
var $a8848f9916d99690$var$nesim = "≂̸";
var $a8848f9916d99690$var$NestedGreaterGreater = "≫";
var $a8848f9916d99690$var$NestedLessLess = "≪";
var $a8848f9916d99690$var$NewLine = "\n";
var $a8848f9916d99690$var$nexist = "∄";
var $a8848f9916d99690$var$nexists = "∄";
var $a8848f9916d99690$var$Nfr = "𝔑";
var $a8848f9916d99690$var$nfr = "𝔫";
var $a8848f9916d99690$var$ngE = "≧̸";
var $a8848f9916d99690$var$nge = "≱";
var $a8848f9916d99690$var$ngeq = "≱";
var $a8848f9916d99690$var$ngeqq = "≧̸";
var $a8848f9916d99690$var$ngeqslant = "⩾̸";
var $a8848f9916d99690$var$nges = "⩾̸";
var $a8848f9916d99690$var$nGg = "⋙̸";
var $a8848f9916d99690$var$ngsim = "≵";
var $a8848f9916d99690$var$nGt = "≫⃒";
var $a8848f9916d99690$var$ngt = "≯";
var $a8848f9916d99690$var$ngtr = "≯";
var $a8848f9916d99690$var$nGtv = "≫̸";
var $a8848f9916d99690$var$nharr = "↮";
var $a8848f9916d99690$var$nhArr = "⇎";
var $a8848f9916d99690$var$nhpar = "⫲";
var $a8848f9916d99690$var$ni = "∋";
var $a8848f9916d99690$var$nis = "⋼";
var $a8848f9916d99690$var$nisd = "⋺";
var $a8848f9916d99690$var$niv = "∋";
var $a8848f9916d99690$var$NJcy = "Њ";
var $a8848f9916d99690$var$njcy = "њ";
var $a8848f9916d99690$var$nlarr = "↚";
var $a8848f9916d99690$var$nlArr = "⇍";
var $a8848f9916d99690$var$nldr = "‥";
var $a8848f9916d99690$var$nlE = "≦̸";
var $a8848f9916d99690$var$nle = "≰";
var $a8848f9916d99690$var$nleftarrow = "↚";
var $a8848f9916d99690$var$nLeftarrow = "⇍";
var $a8848f9916d99690$var$nleftrightarrow = "↮";
var $a8848f9916d99690$var$nLeftrightarrow = "⇎";
var $a8848f9916d99690$var$nleq = "≰";
var $a8848f9916d99690$var$nleqq = "≦̸";
var $a8848f9916d99690$var$nleqslant = "⩽̸";
var $a8848f9916d99690$var$nles = "⩽̸";
var $a8848f9916d99690$var$nless = "≮";
var $a8848f9916d99690$var$nLl = "⋘̸";
var $a8848f9916d99690$var$nlsim = "≴";
var $a8848f9916d99690$var$nLt = "≪⃒";
var $a8848f9916d99690$var$nlt = "≮";
var $a8848f9916d99690$var$nltri = "⋪";
var $a8848f9916d99690$var$nltrie = "⋬";
var $a8848f9916d99690$var$nLtv = "≪̸";
var $a8848f9916d99690$var$nmid = "∤";
var $a8848f9916d99690$var$NoBreak = "⁠";
var $a8848f9916d99690$var$NonBreakingSpace = " ";
var $a8848f9916d99690$var$nopf = "𝕟";
var $a8848f9916d99690$var$Nopf = "ℕ";
var $a8848f9916d99690$var$Not = "⫬";
var $a8848f9916d99690$var$not$1 = "¬";
var $a8848f9916d99690$var$NotCongruent = "≢";
var $a8848f9916d99690$var$NotCupCap = "≭";
var $a8848f9916d99690$var$NotDoubleVerticalBar = "∦";
var $a8848f9916d99690$var$NotElement = "∉";
var $a8848f9916d99690$var$NotEqual = "≠";
var $a8848f9916d99690$var$NotEqualTilde = "≂̸";
var $a8848f9916d99690$var$NotExists = "∄";
var $a8848f9916d99690$var$NotGreater = "≯";
var $a8848f9916d99690$var$NotGreaterEqual = "≱";
var $a8848f9916d99690$var$NotGreaterFullEqual = "≧̸";
var $a8848f9916d99690$var$NotGreaterGreater = "≫̸";
var $a8848f9916d99690$var$NotGreaterLess = "≹";
var $a8848f9916d99690$var$NotGreaterSlantEqual = "⩾̸";
var $a8848f9916d99690$var$NotGreaterTilde = "≵";
var $a8848f9916d99690$var$NotHumpDownHump = "≎̸";
var $a8848f9916d99690$var$NotHumpEqual = "≏̸";
var $a8848f9916d99690$var$notin = "∉";
var $a8848f9916d99690$var$notindot = "⋵̸";
var $a8848f9916d99690$var$notinE = "⋹̸";
var $a8848f9916d99690$var$notinva = "∉";
var $a8848f9916d99690$var$notinvb = "⋷";
var $a8848f9916d99690$var$notinvc = "⋶";
var $a8848f9916d99690$var$NotLeftTriangleBar = "⧏̸";
var $a8848f9916d99690$var$NotLeftTriangle = "⋪";
var $a8848f9916d99690$var$NotLeftTriangleEqual = "⋬";
var $a8848f9916d99690$var$NotLess = "≮";
var $a8848f9916d99690$var$NotLessEqual = "≰";
var $a8848f9916d99690$var$NotLessGreater = "≸";
var $a8848f9916d99690$var$NotLessLess = "≪̸";
var $a8848f9916d99690$var$NotLessSlantEqual = "⩽̸";
var $a8848f9916d99690$var$NotLessTilde = "≴";
var $a8848f9916d99690$var$NotNestedGreaterGreater = "⪢̸";
var $a8848f9916d99690$var$NotNestedLessLess = "⪡̸";
var $a8848f9916d99690$var$notni = "∌";
var $a8848f9916d99690$var$notniva = "∌";
var $a8848f9916d99690$var$notnivb = "⋾";
var $a8848f9916d99690$var$notnivc = "⋽";
var $a8848f9916d99690$var$NotPrecedes = "⊀";
var $a8848f9916d99690$var$NotPrecedesEqual = "⪯̸";
var $a8848f9916d99690$var$NotPrecedesSlantEqual = "⋠";
var $a8848f9916d99690$var$NotReverseElement = "∌";
var $a8848f9916d99690$var$NotRightTriangleBar = "⧐̸";
var $a8848f9916d99690$var$NotRightTriangle = "⋫";
var $a8848f9916d99690$var$NotRightTriangleEqual = "⋭";
var $a8848f9916d99690$var$NotSquareSubset = "⊏̸";
var $a8848f9916d99690$var$NotSquareSubsetEqual = "⋢";
var $a8848f9916d99690$var$NotSquareSuperset = "⊐̸";
var $a8848f9916d99690$var$NotSquareSupersetEqual = "⋣";
var $a8848f9916d99690$var$NotSubset = "⊂⃒";
var $a8848f9916d99690$var$NotSubsetEqual = "⊈";
var $a8848f9916d99690$var$NotSucceeds = "⊁";
var $a8848f9916d99690$var$NotSucceedsEqual = "⪰̸";
var $a8848f9916d99690$var$NotSucceedsSlantEqual = "⋡";
var $a8848f9916d99690$var$NotSucceedsTilde = "≿̸";
var $a8848f9916d99690$var$NotSuperset = "⊃⃒";
var $a8848f9916d99690$var$NotSupersetEqual = "⊉";
var $a8848f9916d99690$var$NotTilde = "≁";
var $a8848f9916d99690$var$NotTildeEqual = "≄";
var $a8848f9916d99690$var$NotTildeFullEqual = "≇";
var $a8848f9916d99690$var$NotTildeTilde = "≉";
var $a8848f9916d99690$var$NotVerticalBar = "∤";
var $a8848f9916d99690$var$nparallel = "∦";
var $a8848f9916d99690$var$npar = "∦";
var $a8848f9916d99690$var$nparsl = "⫽⃥";
var $a8848f9916d99690$var$npart = "∂̸";
var $a8848f9916d99690$var$npolint = "⨔";
var $a8848f9916d99690$var$npr = "⊀";
var $a8848f9916d99690$var$nprcue = "⋠";
var $a8848f9916d99690$var$nprec = "⊀";
var $a8848f9916d99690$var$npreceq = "⪯̸";
var $a8848f9916d99690$var$npre = "⪯̸";
var $a8848f9916d99690$var$nrarrc = "⤳̸";
var $a8848f9916d99690$var$nrarr = "↛";
var $a8848f9916d99690$var$nrArr = "⇏";
var $a8848f9916d99690$var$nrarrw = "↝̸";
var $a8848f9916d99690$var$nrightarrow = "↛";
var $a8848f9916d99690$var$nRightarrow = "⇏";
var $a8848f9916d99690$var$nrtri = "⋫";
var $a8848f9916d99690$var$nrtrie = "⋭";
var $a8848f9916d99690$var$nsc = "⊁";
var $a8848f9916d99690$var$nsccue = "⋡";
var $a8848f9916d99690$var$nsce = "⪰̸";
var $a8848f9916d99690$var$Nscr = "𝒩";
var $a8848f9916d99690$var$nscr = "𝓃";
var $a8848f9916d99690$var$nshortmid = "∤";
var $a8848f9916d99690$var$nshortparallel = "∦";
var $a8848f9916d99690$var$nsim = "≁";
var $a8848f9916d99690$var$nsime = "≄";
var $a8848f9916d99690$var$nsimeq = "≄";
var $a8848f9916d99690$var$nsmid = "∤";
var $a8848f9916d99690$var$nspar = "∦";
var $a8848f9916d99690$var$nsqsube = "⋢";
var $a8848f9916d99690$var$nsqsupe = "⋣";
var $a8848f9916d99690$var$nsub = "⊄";
var $a8848f9916d99690$var$nsubE = "⫅̸";
var $a8848f9916d99690$var$nsube = "⊈";
var $a8848f9916d99690$var$nsubset = "⊂⃒";
var $a8848f9916d99690$var$nsubseteq = "⊈";
var $a8848f9916d99690$var$nsubseteqq = "⫅̸";
var $a8848f9916d99690$var$nsucc = "⊁";
var $a8848f9916d99690$var$nsucceq = "⪰̸";
var $a8848f9916d99690$var$nsup = "⊅";
var $a8848f9916d99690$var$nsupE = "⫆̸";
var $a8848f9916d99690$var$nsupe = "⊉";
var $a8848f9916d99690$var$nsupset = "⊃⃒";
var $a8848f9916d99690$var$nsupseteq = "⊉";
var $a8848f9916d99690$var$nsupseteqq = "⫆̸";
var $a8848f9916d99690$var$ntgl = "≹";
var $a8848f9916d99690$var$Ntilde$1 = "Ñ";
var $a8848f9916d99690$var$ntilde$1 = "ñ";
var $a8848f9916d99690$var$ntlg = "≸";
var $a8848f9916d99690$var$ntriangleleft = "⋪";
var $a8848f9916d99690$var$ntrianglelefteq = "⋬";
var $a8848f9916d99690$var$ntriangleright = "⋫";
var $a8848f9916d99690$var$ntrianglerighteq = "⋭";
var $a8848f9916d99690$var$Nu = "Ν";
var $a8848f9916d99690$var$nu = "ν";
var $a8848f9916d99690$var$num = "#";
var $a8848f9916d99690$var$numero = "№";
var $a8848f9916d99690$var$numsp = " ";
var $a8848f9916d99690$var$nvap = "≍⃒";
var $a8848f9916d99690$var$nvdash = "⊬";
var $a8848f9916d99690$var$nvDash = "⊭";
var $a8848f9916d99690$var$nVdash = "⊮";
var $a8848f9916d99690$var$nVDash = "⊯";
var $a8848f9916d99690$var$nvge = "≥⃒";
var $a8848f9916d99690$var$nvgt = ">⃒";
var $a8848f9916d99690$var$nvHarr = "⤄";
var $a8848f9916d99690$var$nvinfin = "⧞";
var $a8848f9916d99690$var$nvlArr = "⤂";
var $a8848f9916d99690$var$nvle = "≤⃒";
var $a8848f9916d99690$var$nvlt = "<⃒";
var $a8848f9916d99690$var$nvltrie = "⊴⃒";
var $a8848f9916d99690$var$nvrArr = "⤃";
var $a8848f9916d99690$var$nvrtrie = "⊵⃒";
var $a8848f9916d99690$var$nvsim = "∼⃒";
var $a8848f9916d99690$var$nwarhk = "⤣";
var $a8848f9916d99690$var$nwarr = "↖";
var $a8848f9916d99690$var$nwArr = "⇖";
var $a8848f9916d99690$var$nwarrow = "↖";
var $a8848f9916d99690$var$nwnear = "⤧";
var $a8848f9916d99690$var$Oacute$1 = "Ó";
var $a8848f9916d99690$var$oacute$1 = "ó";
var $a8848f9916d99690$var$oast = "⊛";
var $a8848f9916d99690$var$Ocirc$1 = "Ô";
var $a8848f9916d99690$var$ocirc$1 = "ô";
var $a8848f9916d99690$var$ocir = "⊚";
var $a8848f9916d99690$var$Ocy = "О";
var $a8848f9916d99690$var$ocy = "о";
var $a8848f9916d99690$var$odash = "⊝";
var $a8848f9916d99690$var$Odblac = "Ő";
var $a8848f9916d99690$var$odblac = "ő";
var $a8848f9916d99690$var$odiv = "⨸";
var $a8848f9916d99690$var$odot = "⊙";
var $a8848f9916d99690$var$odsold = "⦼";
var $a8848f9916d99690$var$OElig = "Œ";
var $a8848f9916d99690$var$oelig = "œ";
var $a8848f9916d99690$var$ofcir = "⦿";
var $a8848f9916d99690$var$Ofr = "𝔒";
var $a8848f9916d99690$var$ofr = "𝔬";
var $a8848f9916d99690$var$ogon = "˛";
var $a8848f9916d99690$var$Ograve$1 = "Ò";
var $a8848f9916d99690$var$ograve$1 = "ò";
var $a8848f9916d99690$var$ogt = "⧁";
var $a8848f9916d99690$var$ohbar = "⦵";
var $a8848f9916d99690$var$ohm = "Ω";
var $a8848f9916d99690$var$oint = "∮";
var $a8848f9916d99690$var$olarr = "↺";
var $a8848f9916d99690$var$olcir = "⦾";
var $a8848f9916d99690$var$olcross = "⦻";
var $a8848f9916d99690$var$oline = "‾";
var $a8848f9916d99690$var$olt = "⧀";
var $a8848f9916d99690$var$Omacr = "Ō";
var $a8848f9916d99690$var$omacr = "ō";
var $a8848f9916d99690$var$Omega = "Ω";
var $a8848f9916d99690$var$omega = "ω";
var $a8848f9916d99690$var$Omicron = "Ο";
var $a8848f9916d99690$var$omicron = "ο";
var $a8848f9916d99690$var$omid = "⦶";
var $a8848f9916d99690$var$ominus = "⊖";
var $a8848f9916d99690$var$Oopf = "𝕆";
var $a8848f9916d99690$var$oopf = "𝕠";
var $a8848f9916d99690$var$opar = "⦷";
var $a8848f9916d99690$var$OpenCurlyDoubleQuote = "“";
var $a8848f9916d99690$var$OpenCurlyQuote = "‘";
var $a8848f9916d99690$var$operp = "⦹";
var $a8848f9916d99690$var$oplus = "⊕";
var $a8848f9916d99690$var$orarr = "↻";
var $a8848f9916d99690$var$Or = "⩔";
var $a8848f9916d99690$var$or = "∨";
var $a8848f9916d99690$var$ord = "⩝";
var $a8848f9916d99690$var$order = "ℴ";
var $a8848f9916d99690$var$orderof = "ℴ";
var $a8848f9916d99690$var$ordf$1 = "ª";
var $a8848f9916d99690$var$ordm$1 = "º";
var $a8848f9916d99690$var$origof = "⊶";
var $a8848f9916d99690$var$oror = "⩖";
var $a8848f9916d99690$var$orslope = "⩗";
var $a8848f9916d99690$var$orv = "⩛";
var $a8848f9916d99690$var$oS = "Ⓢ";
var $a8848f9916d99690$var$Oscr = "𝒪";
var $a8848f9916d99690$var$oscr = "ℴ";
var $a8848f9916d99690$var$Oslash$1 = "Ø";
var $a8848f9916d99690$var$oslash$1 = "ø";
var $a8848f9916d99690$var$osol = "⊘";
var $a8848f9916d99690$var$Otilde$1 = "Õ";
var $a8848f9916d99690$var$otilde$1 = "õ";
var $a8848f9916d99690$var$otimesas = "⨶";
var $a8848f9916d99690$var$Otimes = "⨷";
var $a8848f9916d99690$var$otimes = "⊗";
var $a8848f9916d99690$var$Ouml$1 = "Ö";
var $a8848f9916d99690$var$ouml$1 = "ö";
var $a8848f9916d99690$var$ovbar = "⌽";
var $a8848f9916d99690$var$OverBar = "‾";
var $a8848f9916d99690$var$OverBrace = "⏞";
var $a8848f9916d99690$var$OverBracket = "⎴";
var $a8848f9916d99690$var$OverParenthesis = "⏜";
var $a8848f9916d99690$var$para$1 = "¶";
var $a8848f9916d99690$var$parallel = "∥";
var $a8848f9916d99690$var$par = "∥";
var $a8848f9916d99690$var$parsim = "⫳";
var $a8848f9916d99690$var$parsl = "⫽";
var $a8848f9916d99690$var$part = "∂";
var $a8848f9916d99690$var$PartialD = "∂";
var $a8848f9916d99690$var$Pcy = "П";
var $a8848f9916d99690$var$pcy = "п";
var $a8848f9916d99690$var$percnt = "%";
var $a8848f9916d99690$var$period = ".";
var $a8848f9916d99690$var$permil = "‰";
var $a8848f9916d99690$var$perp = "⊥";
var $a8848f9916d99690$var$pertenk = "‱";
var $a8848f9916d99690$var$Pfr = "𝔓";
var $a8848f9916d99690$var$pfr = "𝔭";
var $a8848f9916d99690$var$Phi = "Φ";
var $a8848f9916d99690$var$phi = "φ";
var $a8848f9916d99690$var$phiv = "ϕ";
var $a8848f9916d99690$var$phmmat = "ℳ";
var $a8848f9916d99690$var$phone = "☎";
var $a8848f9916d99690$var$Pi = "Π";
var $a8848f9916d99690$var$pi = "π";
var $a8848f9916d99690$var$pitchfork = "⋔";
var $a8848f9916d99690$var$piv = "ϖ";
var $a8848f9916d99690$var$planck = "ℏ";
var $a8848f9916d99690$var$planckh = "ℎ";
var $a8848f9916d99690$var$plankv = "ℏ";
var $a8848f9916d99690$var$plusacir = "⨣";
var $a8848f9916d99690$var$plusb = "⊞";
var $a8848f9916d99690$var$pluscir = "⨢";
var $a8848f9916d99690$var$plus = "+";
var $a8848f9916d99690$var$plusdo = "∔";
var $a8848f9916d99690$var$plusdu = "⨥";
var $a8848f9916d99690$var$pluse = "⩲";
var $a8848f9916d99690$var$PlusMinus = "±";
var $a8848f9916d99690$var$plusmn$1 = "±";
var $a8848f9916d99690$var$plussim = "⨦";
var $a8848f9916d99690$var$plustwo = "⨧";
var $a8848f9916d99690$var$pm = "±";
var $a8848f9916d99690$var$Poincareplane = "ℌ";
var $a8848f9916d99690$var$pointint = "⨕";
var $a8848f9916d99690$var$popf = "𝕡";
var $a8848f9916d99690$var$Popf = "ℙ";
var $a8848f9916d99690$var$pound$1 = "£";
var $a8848f9916d99690$var$prap = "⪷";
var $a8848f9916d99690$var$Pr = "⪻";
var $a8848f9916d99690$var$pr = "≺";
var $a8848f9916d99690$var$prcue = "≼";
var $a8848f9916d99690$var$precapprox = "⪷";
var $a8848f9916d99690$var$prec = "≺";
var $a8848f9916d99690$var$preccurlyeq = "≼";
var $a8848f9916d99690$var$Precedes = "≺";
var $a8848f9916d99690$var$PrecedesEqual = "⪯";
var $a8848f9916d99690$var$PrecedesSlantEqual = "≼";
var $a8848f9916d99690$var$PrecedesTilde = "≾";
var $a8848f9916d99690$var$preceq = "⪯";
var $a8848f9916d99690$var$precnapprox = "⪹";
var $a8848f9916d99690$var$precneqq = "⪵";
var $a8848f9916d99690$var$precnsim = "⋨";
var $a8848f9916d99690$var$pre = "⪯";
var $a8848f9916d99690$var$prE = "⪳";
var $a8848f9916d99690$var$precsim = "≾";
var $a8848f9916d99690$var$prime = "′";
var $a8848f9916d99690$var$Prime = "″";
var $a8848f9916d99690$var$primes = "ℙ";
var $a8848f9916d99690$var$prnap = "⪹";
var $a8848f9916d99690$var$prnE = "⪵";
var $a8848f9916d99690$var$prnsim = "⋨";
var $a8848f9916d99690$var$prod = "∏";
var $a8848f9916d99690$var$Product = "∏";
var $a8848f9916d99690$var$profalar = "⌮";
var $a8848f9916d99690$var$profline = "⌒";
var $a8848f9916d99690$var$profsurf = "⌓";
var $a8848f9916d99690$var$prop = "∝";
var $a8848f9916d99690$var$Proportional = "∝";
var $a8848f9916d99690$var$Proportion = "∷";
var $a8848f9916d99690$var$propto = "∝";
var $a8848f9916d99690$var$prsim = "≾";
var $a8848f9916d99690$var$prurel = "⊰";
var $a8848f9916d99690$var$Pscr = "𝒫";
var $a8848f9916d99690$var$pscr = "𝓅";
var $a8848f9916d99690$var$Psi = "Ψ";
var $a8848f9916d99690$var$psi = "ψ";
var $a8848f9916d99690$var$puncsp = " ";
var $a8848f9916d99690$var$Qfr = "𝔔";
var $a8848f9916d99690$var$qfr = "𝔮";
var $a8848f9916d99690$var$qint = "⨌";
var $a8848f9916d99690$var$qopf = "𝕢";
var $a8848f9916d99690$var$Qopf = "ℚ";
var $a8848f9916d99690$var$qprime = "⁗";
var $a8848f9916d99690$var$Qscr = "𝒬";
var $a8848f9916d99690$var$qscr = "𝓆";
var $a8848f9916d99690$var$quaternions = "ℍ";
var $a8848f9916d99690$var$quatint = "⨖";
var $a8848f9916d99690$var$quest = "?";
var $a8848f9916d99690$var$questeq = "≟";
var $a8848f9916d99690$var$quot$2 = '"';
var $a8848f9916d99690$var$QUOT$1 = '"';
var $a8848f9916d99690$var$rAarr = "⇛";
var $a8848f9916d99690$var$race = "∽̱";
var $a8848f9916d99690$var$Racute = "Ŕ";
var $a8848f9916d99690$var$racute = "ŕ";
var $a8848f9916d99690$var$radic = "√";
var $a8848f9916d99690$var$raemptyv = "⦳";
var $a8848f9916d99690$var$rang = "⟩";
var $a8848f9916d99690$var$Rang = "⟫";
var $a8848f9916d99690$var$rangd = "⦒";
var $a8848f9916d99690$var$range = "⦥";
var $a8848f9916d99690$var$rangle = "⟩";
var $a8848f9916d99690$var$raquo$1 = "»";
var $a8848f9916d99690$var$rarrap = "⥵";
var $a8848f9916d99690$var$rarrb = "⇥";
var $a8848f9916d99690$var$rarrbfs = "⤠";
var $a8848f9916d99690$var$rarrc = "⤳";
var $a8848f9916d99690$var$rarr = "→";
var $a8848f9916d99690$var$Rarr = "↠";
var $a8848f9916d99690$var$rArr = "⇒";
var $a8848f9916d99690$var$rarrfs = "⤞";
var $a8848f9916d99690$var$rarrhk = "↪";
var $a8848f9916d99690$var$rarrlp = "↬";
var $a8848f9916d99690$var$rarrpl = "⥅";
var $a8848f9916d99690$var$rarrsim = "⥴";
var $a8848f9916d99690$var$Rarrtl = "⤖";
var $a8848f9916d99690$var$rarrtl = "↣";
var $a8848f9916d99690$var$rarrw = "↝";
var $a8848f9916d99690$var$ratail = "⤚";
var $a8848f9916d99690$var$rAtail = "⤜";
var $a8848f9916d99690$var$ratio = "∶";
var $a8848f9916d99690$var$rationals = "ℚ";
var $a8848f9916d99690$var$rbarr = "⤍";
var $a8848f9916d99690$var$rBarr = "⤏";
var $a8848f9916d99690$var$RBarr = "⤐";
var $a8848f9916d99690$var$rbbrk = "❳";
var $a8848f9916d99690$var$rbrace = "}";
var $a8848f9916d99690$var$rbrack = "]";
var $a8848f9916d99690$var$rbrke = "⦌";
var $a8848f9916d99690$var$rbrksld = "⦎";
var $a8848f9916d99690$var$rbrkslu = "⦐";
var $a8848f9916d99690$var$Rcaron = "Ř";
var $a8848f9916d99690$var$rcaron = "ř";
var $a8848f9916d99690$var$Rcedil = "Ŗ";
var $a8848f9916d99690$var$rcedil = "ŗ";
var $a8848f9916d99690$var$rceil = "⌉";
var $a8848f9916d99690$var$rcub = "}";
var $a8848f9916d99690$var$Rcy = "Р";
var $a8848f9916d99690$var$rcy = "р";
var $a8848f9916d99690$var$rdca = "⤷";
var $a8848f9916d99690$var$rdldhar = "⥩";
var $a8848f9916d99690$var$rdquo = "”";
var $a8848f9916d99690$var$rdquor = "”";
var $a8848f9916d99690$var$rdsh = "↳";
var $a8848f9916d99690$var$real = "ℜ";
var $a8848f9916d99690$var$realine = "ℛ";
var $a8848f9916d99690$var$realpart = "ℜ";
var $a8848f9916d99690$var$reals = "ℝ";
var $a8848f9916d99690$var$Re = "ℜ";
var $a8848f9916d99690$var$rect = "▭";
var $a8848f9916d99690$var$reg$1 = "®";
var $a8848f9916d99690$var$REG$1 = "®";
var $a8848f9916d99690$var$ReverseElement = "∋";
var $a8848f9916d99690$var$ReverseEquilibrium = "⇋";
var $a8848f9916d99690$var$ReverseUpEquilibrium = "⥯";
var $a8848f9916d99690$var$rfisht = "⥽";
var $a8848f9916d99690$var$rfloor = "⌋";
var $a8848f9916d99690$var$rfr = "𝔯";
var $a8848f9916d99690$var$Rfr = "ℜ";
var $a8848f9916d99690$var$rHar = "⥤";
var $a8848f9916d99690$var$rhard = "⇁";
var $a8848f9916d99690$var$rharu = "⇀";
var $a8848f9916d99690$var$rharul = "⥬";
var $a8848f9916d99690$var$Rho = "Ρ";
var $a8848f9916d99690$var$rho = "ρ";
var $a8848f9916d99690$var$rhov = "ϱ";
var $a8848f9916d99690$var$RightAngleBracket = "⟩";
var $a8848f9916d99690$var$RightArrowBar = "⇥";
var $a8848f9916d99690$var$rightarrow = "→";
var $a8848f9916d99690$var$RightArrow = "→";
var $a8848f9916d99690$var$Rightarrow = "⇒";
var $a8848f9916d99690$var$RightArrowLeftArrow = "⇄";
var $a8848f9916d99690$var$rightarrowtail = "↣";
var $a8848f9916d99690$var$RightCeiling = "⌉";
var $a8848f9916d99690$var$RightDoubleBracket = "⟧";
var $a8848f9916d99690$var$RightDownTeeVector = "⥝";
var $a8848f9916d99690$var$RightDownVectorBar = "⥕";
var $a8848f9916d99690$var$RightDownVector = "⇂";
var $a8848f9916d99690$var$RightFloor = "⌋";
var $a8848f9916d99690$var$rightharpoondown = "⇁";
var $a8848f9916d99690$var$rightharpoonup = "⇀";
var $a8848f9916d99690$var$rightleftarrows = "⇄";
var $a8848f9916d99690$var$rightleftharpoons = "⇌";
var $a8848f9916d99690$var$rightrightarrows = "⇉";
var $a8848f9916d99690$var$rightsquigarrow = "↝";
var $a8848f9916d99690$var$RightTeeArrow = "↦";
var $a8848f9916d99690$var$RightTee = "⊢";
var $a8848f9916d99690$var$RightTeeVector = "⥛";
var $a8848f9916d99690$var$rightthreetimes = "⋌";
var $a8848f9916d99690$var$RightTriangleBar = "⧐";
var $a8848f9916d99690$var$RightTriangle = "⊳";
var $a8848f9916d99690$var$RightTriangleEqual = "⊵";
var $a8848f9916d99690$var$RightUpDownVector = "⥏";
var $a8848f9916d99690$var$RightUpTeeVector = "⥜";
var $a8848f9916d99690$var$RightUpVectorBar = "⥔";
var $a8848f9916d99690$var$RightUpVector = "↾";
var $a8848f9916d99690$var$RightVectorBar = "⥓";
var $a8848f9916d99690$var$RightVector = "⇀";
var $a8848f9916d99690$var$ring = "˚";
var $a8848f9916d99690$var$risingdotseq = "≓";
var $a8848f9916d99690$var$rlarr = "⇄";
var $a8848f9916d99690$var$rlhar = "⇌";
var $a8848f9916d99690$var$rlm = "‏";
var $a8848f9916d99690$var$rmoustache = "⎱";
var $a8848f9916d99690$var$rmoust = "⎱";
var $a8848f9916d99690$var$rnmid = "⫮";
var $a8848f9916d99690$var$roang = "⟭";
var $a8848f9916d99690$var$roarr = "⇾";
var $a8848f9916d99690$var$robrk = "⟧";
var $a8848f9916d99690$var$ropar = "⦆";
var $a8848f9916d99690$var$ropf = "𝕣";
var $a8848f9916d99690$var$Ropf = "ℝ";
var $a8848f9916d99690$var$roplus = "⨮";
var $a8848f9916d99690$var$rotimes = "⨵";
var $a8848f9916d99690$var$RoundImplies = "⥰";
var $a8848f9916d99690$var$rpar = ")";
var $a8848f9916d99690$var$rpargt = "⦔";
var $a8848f9916d99690$var$rppolint = "⨒";
var $a8848f9916d99690$var$rrarr = "⇉";
var $a8848f9916d99690$var$Rrightarrow = "⇛";
var $a8848f9916d99690$var$rsaquo = "›";
var $a8848f9916d99690$var$rscr = "𝓇";
var $a8848f9916d99690$var$Rscr = "ℛ";
var $a8848f9916d99690$var$rsh = "↱";
var $a8848f9916d99690$var$Rsh = "↱";
var $a8848f9916d99690$var$rsqb = "]";
var $a8848f9916d99690$var$rsquo = "’";
var $a8848f9916d99690$var$rsquor = "’";
var $a8848f9916d99690$var$rthree = "⋌";
var $a8848f9916d99690$var$rtimes = "⋊";
var $a8848f9916d99690$var$rtri = "▹";
var $a8848f9916d99690$var$rtrie = "⊵";
var $a8848f9916d99690$var$rtrif = "▸";
var $a8848f9916d99690$var$rtriltri = "⧎";
var $a8848f9916d99690$var$RuleDelayed = "⧴";
var $a8848f9916d99690$var$ruluhar = "⥨";
var $a8848f9916d99690$var$rx = "℞";
var $a8848f9916d99690$var$Sacute = "Ś";
var $a8848f9916d99690$var$sacute = "ś";
var $a8848f9916d99690$var$sbquo = "‚";
var $a8848f9916d99690$var$scap = "⪸";
var $a8848f9916d99690$var$Scaron = "Š";
var $a8848f9916d99690$var$scaron = "š";
var $a8848f9916d99690$var$Sc = "⪼";
var $a8848f9916d99690$var$sc = "≻";
var $a8848f9916d99690$var$sccue = "≽";
var $a8848f9916d99690$var$sce = "⪰";
var $a8848f9916d99690$var$scE = "⪴";
var $a8848f9916d99690$var$Scedil = "Ş";
var $a8848f9916d99690$var$scedil = "ş";
var $a8848f9916d99690$var$Scirc = "Ŝ";
var $a8848f9916d99690$var$scirc = "ŝ";
var $a8848f9916d99690$var$scnap = "⪺";
var $a8848f9916d99690$var$scnE = "⪶";
var $a8848f9916d99690$var$scnsim = "⋩";
var $a8848f9916d99690$var$scpolint = "⨓";
var $a8848f9916d99690$var$scsim = "≿";
var $a8848f9916d99690$var$Scy = "С";
var $a8848f9916d99690$var$scy = "с";
var $a8848f9916d99690$var$sdotb = "⊡";
var $a8848f9916d99690$var$sdot = "⋅";
var $a8848f9916d99690$var$sdote = "⩦";
var $a8848f9916d99690$var$searhk = "⤥";
var $a8848f9916d99690$var$searr = "↘";
var $a8848f9916d99690$var$seArr = "⇘";
var $a8848f9916d99690$var$searrow = "↘";
var $a8848f9916d99690$var$sect$1 = "§";
var $a8848f9916d99690$var$semi = ";";
var $a8848f9916d99690$var$seswar = "⤩";
var $a8848f9916d99690$var$setminus = "∖";
var $a8848f9916d99690$var$setmn = "∖";
var $a8848f9916d99690$var$sext = "✶";
var $a8848f9916d99690$var$Sfr = "𝔖";
var $a8848f9916d99690$var$sfr = "𝔰";
var $a8848f9916d99690$var$sfrown = "⌢";
var $a8848f9916d99690$var$sharp = "♯";
var $a8848f9916d99690$var$SHCHcy = "Щ";
var $a8848f9916d99690$var$shchcy = "щ";
var $a8848f9916d99690$var$SHcy = "Ш";
var $a8848f9916d99690$var$shcy = "ш";
var $a8848f9916d99690$var$ShortDownArrow = "↓";
var $a8848f9916d99690$var$ShortLeftArrow = "←";
var $a8848f9916d99690$var$shortmid = "∣";
var $a8848f9916d99690$var$shortparallel = "∥";
var $a8848f9916d99690$var$ShortRightArrow = "→";
var $a8848f9916d99690$var$ShortUpArrow = "↑";
var $a8848f9916d99690$var$shy$1 = "­";
var $a8848f9916d99690$var$Sigma = "Σ";
var $a8848f9916d99690$var$sigma = "σ";
var $a8848f9916d99690$var$sigmaf = "ς";
var $a8848f9916d99690$var$sigmav = "ς";
var $a8848f9916d99690$var$sim = "∼";
var $a8848f9916d99690$var$simdot = "⩪";
var $a8848f9916d99690$var$sime = "≃";
var $a8848f9916d99690$var$simeq = "≃";
var $a8848f9916d99690$var$simg = "⪞";
var $a8848f9916d99690$var$simgE = "⪠";
var $a8848f9916d99690$var$siml = "⪝";
var $a8848f9916d99690$var$simlE = "⪟";
var $a8848f9916d99690$var$simne = "≆";
var $a8848f9916d99690$var$simplus = "⨤";
var $a8848f9916d99690$var$simrarr = "⥲";
var $a8848f9916d99690$var$slarr = "←";
var $a8848f9916d99690$var$SmallCircle = "∘";
var $a8848f9916d99690$var$smallsetminus = "∖";
var $a8848f9916d99690$var$smashp = "⨳";
var $a8848f9916d99690$var$smeparsl = "⧤";
var $a8848f9916d99690$var$smid = "∣";
var $a8848f9916d99690$var$smile = "⌣";
var $a8848f9916d99690$var$smt = "⪪";
var $a8848f9916d99690$var$smte = "⪬";
var $a8848f9916d99690$var$smtes = "⪬︀";
var $a8848f9916d99690$var$SOFTcy = "Ь";
var $a8848f9916d99690$var$softcy = "ь";
var $a8848f9916d99690$var$solbar = "⌿";
var $a8848f9916d99690$var$solb = "⧄";
var $a8848f9916d99690$var$sol = "/";
var $a8848f9916d99690$var$Sopf = "𝕊";
var $a8848f9916d99690$var$sopf = "𝕤";
var $a8848f9916d99690$var$spades = "♠";
var $a8848f9916d99690$var$spadesuit = "♠";
var $a8848f9916d99690$var$spar = "∥";
var $a8848f9916d99690$var$sqcap = "⊓";
var $a8848f9916d99690$var$sqcaps = "⊓︀";
var $a8848f9916d99690$var$sqcup = "⊔";
var $a8848f9916d99690$var$sqcups = "⊔︀";
var $a8848f9916d99690$var$Sqrt = "√";
var $a8848f9916d99690$var$sqsub = "⊏";
var $a8848f9916d99690$var$sqsube = "⊑";
var $a8848f9916d99690$var$sqsubset = "⊏";
var $a8848f9916d99690$var$sqsubseteq = "⊑";
var $a8848f9916d99690$var$sqsup = "⊐";
var $a8848f9916d99690$var$sqsupe = "⊒";
var $a8848f9916d99690$var$sqsupset = "⊐";
var $a8848f9916d99690$var$sqsupseteq = "⊒";
var $a8848f9916d99690$var$square = "□";
var $a8848f9916d99690$var$Square = "□";
var $a8848f9916d99690$var$SquareIntersection = "⊓";
var $a8848f9916d99690$var$SquareSubset = "⊏";
var $a8848f9916d99690$var$SquareSubsetEqual = "⊑";
var $a8848f9916d99690$var$SquareSuperset = "⊐";
var $a8848f9916d99690$var$SquareSupersetEqual = "⊒";
var $a8848f9916d99690$var$SquareUnion = "⊔";
var $a8848f9916d99690$var$squarf = "▪";
var $a8848f9916d99690$var$squ = "□";
var $a8848f9916d99690$var$squf = "▪";
var $a8848f9916d99690$var$srarr = "→";
var $a8848f9916d99690$var$Sscr = "𝒮";
var $a8848f9916d99690$var$sscr = "𝓈";
var $a8848f9916d99690$var$ssetmn = "∖";
var $a8848f9916d99690$var$ssmile = "⌣";
var $a8848f9916d99690$var$sstarf = "⋆";
var $a8848f9916d99690$var$Star = "⋆";
var $a8848f9916d99690$var$star = "☆";
var $a8848f9916d99690$var$starf = "★";
var $a8848f9916d99690$var$straightepsilon = "ϵ";
var $a8848f9916d99690$var$straightphi = "ϕ";
var $a8848f9916d99690$var$strns = "¯";
var $a8848f9916d99690$var$sub$1 = "⊂";
var $a8848f9916d99690$var$Sub = "⋐";
var $a8848f9916d99690$var$subdot = "⪽";
var $a8848f9916d99690$var$subE = "⫅";
var $a8848f9916d99690$var$sube = "⊆";
var $a8848f9916d99690$var$subedot = "⫃";
var $a8848f9916d99690$var$submult = "⫁";
var $a8848f9916d99690$var$subnE = "⫋";
var $a8848f9916d99690$var$subne = "⊊";
var $a8848f9916d99690$var$subplus = "⪿";
var $a8848f9916d99690$var$subrarr = "⥹";
var $a8848f9916d99690$var$subset = "⊂";
var $a8848f9916d99690$var$Subset = "⋐";
var $a8848f9916d99690$var$subseteq = "⊆";
var $a8848f9916d99690$var$subseteqq = "⫅";
var $a8848f9916d99690$var$SubsetEqual = "⊆";
var $a8848f9916d99690$var$subsetneq = "⊊";
var $a8848f9916d99690$var$subsetneqq = "⫋";
var $a8848f9916d99690$var$subsim = "⫇";
var $a8848f9916d99690$var$subsub = "⫕";
var $a8848f9916d99690$var$subsup = "⫓";
var $a8848f9916d99690$var$succapprox = "⪸";
var $a8848f9916d99690$var$succ = "≻";
var $a8848f9916d99690$var$succcurlyeq = "≽";
var $a8848f9916d99690$var$Succeeds = "≻";
var $a8848f9916d99690$var$SucceedsEqual = "⪰";
var $a8848f9916d99690$var$SucceedsSlantEqual = "≽";
var $a8848f9916d99690$var$SucceedsTilde = "≿";
var $a8848f9916d99690$var$succeq = "⪰";
var $a8848f9916d99690$var$succnapprox = "⪺";
var $a8848f9916d99690$var$succneqq = "⪶";
var $a8848f9916d99690$var$succnsim = "⋩";
var $a8848f9916d99690$var$succsim = "≿";
var $a8848f9916d99690$var$SuchThat = "∋";
var $a8848f9916d99690$var$sum = "∑";
var $a8848f9916d99690$var$Sum = "∑";
var $a8848f9916d99690$var$sung = "♪";
var $a8848f9916d99690$var$sup1$1 = "¹";
var $a8848f9916d99690$var$sup2$1 = "²";
var $a8848f9916d99690$var$sup3$1 = "³";
var $a8848f9916d99690$var$sup = "⊃";
var $a8848f9916d99690$var$Sup = "⋑";
var $a8848f9916d99690$var$supdot = "⪾";
var $a8848f9916d99690$var$supdsub = "⫘";
var $a8848f9916d99690$var$supE = "⫆";
var $a8848f9916d99690$var$supe = "⊇";
var $a8848f9916d99690$var$supedot = "⫄";
var $a8848f9916d99690$var$Superset = "⊃";
var $a8848f9916d99690$var$SupersetEqual = "⊇";
var $a8848f9916d99690$var$suphsol = "⟉";
var $a8848f9916d99690$var$suphsub = "⫗";
var $a8848f9916d99690$var$suplarr = "⥻";
var $a8848f9916d99690$var$supmult = "⫂";
var $a8848f9916d99690$var$supnE = "⫌";
var $a8848f9916d99690$var$supne = "⊋";
var $a8848f9916d99690$var$supplus = "⫀";
var $a8848f9916d99690$var$supset = "⊃";
var $a8848f9916d99690$var$Supset = "⋑";
var $a8848f9916d99690$var$supseteq = "⊇";
var $a8848f9916d99690$var$supseteqq = "⫆";
var $a8848f9916d99690$var$supsetneq = "⊋";
var $a8848f9916d99690$var$supsetneqq = "⫌";
var $a8848f9916d99690$var$supsim = "⫈";
var $a8848f9916d99690$var$supsub = "⫔";
var $a8848f9916d99690$var$supsup = "⫖";
var $a8848f9916d99690$var$swarhk = "⤦";
var $a8848f9916d99690$var$swarr = "↙";
var $a8848f9916d99690$var$swArr = "⇙";
var $a8848f9916d99690$var$swarrow = "↙";
var $a8848f9916d99690$var$swnwar = "⤪";
var $a8848f9916d99690$var$szlig$1 = "ß";
var $a8848f9916d99690$var$Tab = "\t";
var $a8848f9916d99690$var$target = "⌖";
var $a8848f9916d99690$var$Tau = "Τ";
var $a8848f9916d99690$var$tau = "τ";
var $a8848f9916d99690$var$tbrk = "⎴";
var $a8848f9916d99690$var$Tcaron = "Ť";
var $a8848f9916d99690$var$tcaron = "ť";
var $a8848f9916d99690$var$Tcedil = "Ţ";
var $a8848f9916d99690$var$tcedil = "ţ";
var $a8848f9916d99690$var$Tcy = "Т";
var $a8848f9916d99690$var$tcy = "т";
var $a8848f9916d99690$var$tdot = "⃛";
var $a8848f9916d99690$var$telrec = "⌕";
var $a8848f9916d99690$var$Tfr = "𝔗";
var $a8848f9916d99690$var$tfr = "𝔱";
var $a8848f9916d99690$var$there4 = "∴";
var $a8848f9916d99690$var$therefore = "∴";
var $a8848f9916d99690$var$Therefore = "∴";
var $a8848f9916d99690$var$Theta = "Θ";
var $a8848f9916d99690$var$theta = "θ";
var $a8848f9916d99690$var$thetasym = "ϑ";
var $a8848f9916d99690$var$thetav = "ϑ";
var $a8848f9916d99690$var$thickapprox = "≈";
var $a8848f9916d99690$var$thicksim = "∼";
var $a8848f9916d99690$var$ThickSpace = "  ";
var $a8848f9916d99690$var$ThinSpace = " ";
var $a8848f9916d99690$var$thinsp = " ";
var $a8848f9916d99690$var$thkap = "≈";
var $a8848f9916d99690$var$thksim = "∼";
var $a8848f9916d99690$var$THORN$1 = "Þ";
var $a8848f9916d99690$var$thorn$1 = "þ";
var $a8848f9916d99690$var$tilde = "˜";
var $a8848f9916d99690$var$Tilde = "∼";
var $a8848f9916d99690$var$TildeEqual = "≃";
var $a8848f9916d99690$var$TildeFullEqual = "≅";
var $a8848f9916d99690$var$TildeTilde = "≈";
var $a8848f9916d99690$var$timesbar = "⨱";
var $a8848f9916d99690$var$timesb = "⊠";
var $a8848f9916d99690$var$times$1 = "×";
var $a8848f9916d99690$var$timesd = "⨰";
var $a8848f9916d99690$var$tint = "∭";
var $a8848f9916d99690$var$toea = "⤨";
var $a8848f9916d99690$var$topbot = "⌶";
var $a8848f9916d99690$var$topcir = "⫱";
var $a8848f9916d99690$var$top = "⊤";
var $a8848f9916d99690$var$Topf = "𝕋";
var $a8848f9916d99690$var$topf = "𝕥";
var $a8848f9916d99690$var$topfork = "⫚";
var $a8848f9916d99690$var$tosa = "⤩";
var $a8848f9916d99690$var$tprime = "‴";
var $a8848f9916d99690$var$trade = "™";
var $a8848f9916d99690$var$TRADE = "™";
var $a8848f9916d99690$var$triangle = "▵";
var $a8848f9916d99690$var$triangledown = "▿";
var $a8848f9916d99690$var$triangleleft = "◃";
var $a8848f9916d99690$var$trianglelefteq = "⊴";
var $a8848f9916d99690$var$triangleq = "≜";
var $a8848f9916d99690$var$triangleright = "▹";
var $a8848f9916d99690$var$trianglerighteq = "⊵";
var $a8848f9916d99690$var$tridot = "◬";
var $a8848f9916d99690$var$trie = "≜";
var $a8848f9916d99690$var$triminus = "⨺";
var $a8848f9916d99690$var$TripleDot = "⃛";
var $a8848f9916d99690$var$triplus = "⨹";
var $a8848f9916d99690$var$trisb = "⧍";
var $a8848f9916d99690$var$tritime = "⨻";
var $a8848f9916d99690$var$trpezium = "⏢";
var $a8848f9916d99690$var$Tscr = "𝒯";
var $a8848f9916d99690$var$tscr = "𝓉";
var $a8848f9916d99690$var$TScy = "Ц";
var $a8848f9916d99690$var$tscy = "ц";
var $a8848f9916d99690$var$TSHcy = "Ћ";
var $a8848f9916d99690$var$tshcy = "ћ";
var $a8848f9916d99690$var$Tstrok = "Ŧ";
var $a8848f9916d99690$var$tstrok = "ŧ";
var $a8848f9916d99690$var$twixt = "≬";
var $a8848f9916d99690$var$twoheadleftarrow = "↞";
var $a8848f9916d99690$var$twoheadrightarrow = "↠";
var $a8848f9916d99690$var$Uacute$1 = "Ú";
var $a8848f9916d99690$var$uacute$1 = "ú";
var $a8848f9916d99690$var$uarr = "↑";
var $a8848f9916d99690$var$Uarr = "↟";
var $a8848f9916d99690$var$uArr = "⇑";
var $a8848f9916d99690$var$Uarrocir = "⥉";
var $a8848f9916d99690$var$Ubrcy = "Ў";
var $a8848f9916d99690$var$ubrcy = "ў";
var $a8848f9916d99690$var$Ubreve = "Ŭ";
var $a8848f9916d99690$var$ubreve = "ŭ";
var $a8848f9916d99690$var$Ucirc$1 = "Û";
var $a8848f9916d99690$var$ucirc$1 = "û";
var $a8848f9916d99690$var$Ucy = "У";
var $a8848f9916d99690$var$ucy = "у";
var $a8848f9916d99690$var$udarr = "⇅";
var $a8848f9916d99690$var$Udblac = "Ű";
var $a8848f9916d99690$var$udblac = "ű";
var $a8848f9916d99690$var$udhar = "⥮";
var $a8848f9916d99690$var$ufisht = "⥾";
var $a8848f9916d99690$var$Ufr = "𝔘";
var $a8848f9916d99690$var$ufr = "𝔲";
var $a8848f9916d99690$var$Ugrave$1 = "Ù";
var $a8848f9916d99690$var$ugrave$1 = "ù";
var $a8848f9916d99690$var$uHar = "⥣";
var $a8848f9916d99690$var$uharl = "↿";
var $a8848f9916d99690$var$uharr = "↾";
var $a8848f9916d99690$var$uhblk = "▀";
var $a8848f9916d99690$var$ulcorn = "⌜";
var $a8848f9916d99690$var$ulcorner = "⌜";
var $a8848f9916d99690$var$ulcrop = "⌏";
var $a8848f9916d99690$var$ultri = "◸";
var $a8848f9916d99690$var$Umacr = "Ū";
var $a8848f9916d99690$var$umacr = "ū";
var $a8848f9916d99690$var$uml$1 = "¨";
var $a8848f9916d99690$var$UnderBar = "_";
var $a8848f9916d99690$var$UnderBrace = "⏟";
var $a8848f9916d99690$var$UnderBracket = "⎵";
var $a8848f9916d99690$var$UnderParenthesis = "⏝";
var $a8848f9916d99690$var$Union = "⋃";
var $a8848f9916d99690$var$UnionPlus = "⊎";
var $a8848f9916d99690$var$Uogon = "Ų";
var $a8848f9916d99690$var$uogon = "ų";
var $a8848f9916d99690$var$Uopf = "𝕌";
var $a8848f9916d99690$var$uopf = "𝕦";
var $a8848f9916d99690$var$UpArrowBar = "⤒";
var $a8848f9916d99690$var$uparrow = "↑";
var $a8848f9916d99690$var$UpArrow = "↑";
var $a8848f9916d99690$var$Uparrow = "⇑";
var $a8848f9916d99690$var$UpArrowDownArrow = "⇅";
var $a8848f9916d99690$var$updownarrow = "↕";
var $a8848f9916d99690$var$UpDownArrow = "↕";
var $a8848f9916d99690$var$Updownarrow = "⇕";
var $a8848f9916d99690$var$UpEquilibrium = "⥮";
var $a8848f9916d99690$var$upharpoonleft = "↿";
var $a8848f9916d99690$var$upharpoonright = "↾";
var $a8848f9916d99690$var$uplus = "⊎";
var $a8848f9916d99690$var$UpperLeftArrow = "↖";
var $a8848f9916d99690$var$UpperRightArrow = "↗";
var $a8848f9916d99690$var$upsi = "υ";
var $a8848f9916d99690$var$Upsi = "ϒ";
var $a8848f9916d99690$var$upsih = "ϒ";
var $a8848f9916d99690$var$Upsilon = "Υ";
var $a8848f9916d99690$var$upsilon = "υ";
var $a8848f9916d99690$var$UpTeeArrow = "↥";
var $a8848f9916d99690$var$UpTee = "⊥";
var $a8848f9916d99690$var$upuparrows = "⇈";
var $a8848f9916d99690$var$urcorn = "⌝";
var $a8848f9916d99690$var$urcorner = "⌝";
var $a8848f9916d99690$var$urcrop = "⌎";
var $a8848f9916d99690$var$Uring = "Ů";
var $a8848f9916d99690$var$uring = "ů";
var $a8848f9916d99690$var$urtri = "◹";
var $a8848f9916d99690$var$Uscr = "𝒰";
var $a8848f9916d99690$var$uscr = "𝓊";
var $a8848f9916d99690$var$utdot = "⋰";
var $a8848f9916d99690$var$Utilde = "Ũ";
var $a8848f9916d99690$var$utilde = "ũ";
var $a8848f9916d99690$var$utri = "▵";
var $a8848f9916d99690$var$utrif = "▴";
var $a8848f9916d99690$var$uuarr = "⇈";
var $a8848f9916d99690$var$Uuml$1 = "Ü";
var $a8848f9916d99690$var$uuml$1 = "ü";
var $a8848f9916d99690$var$uwangle = "⦧";
var $a8848f9916d99690$var$vangrt = "⦜";
var $a8848f9916d99690$var$varepsilon = "ϵ";
var $a8848f9916d99690$var$varkappa = "ϰ";
var $a8848f9916d99690$var$varnothing = "∅";
var $a8848f9916d99690$var$varphi = "ϕ";
var $a8848f9916d99690$var$varpi = "ϖ";
var $a8848f9916d99690$var$varpropto = "∝";
var $a8848f9916d99690$var$varr = "↕";
var $a8848f9916d99690$var$vArr = "⇕";
var $a8848f9916d99690$var$varrho = "ϱ";
var $a8848f9916d99690$var$varsigma = "ς";
var $a8848f9916d99690$var$varsubsetneq = "⊊︀";
var $a8848f9916d99690$var$varsubsetneqq = "⫋︀";
var $a8848f9916d99690$var$varsupsetneq = "⊋︀";
var $a8848f9916d99690$var$varsupsetneqq = "⫌︀";
var $a8848f9916d99690$var$vartheta = "ϑ";
var $a8848f9916d99690$var$vartriangleleft = "⊲";
var $a8848f9916d99690$var$vartriangleright = "⊳";
var $a8848f9916d99690$var$vBar = "⫨";
var $a8848f9916d99690$var$Vbar = "⫫";
var $a8848f9916d99690$var$vBarv = "⫩";
var $a8848f9916d99690$var$Vcy = "В";
var $a8848f9916d99690$var$vcy = "в";
var $a8848f9916d99690$var$vdash = "⊢";
var $a8848f9916d99690$var$vDash = "⊨";
var $a8848f9916d99690$var$Vdash = "⊩";
var $a8848f9916d99690$var$VDash = "⊫";
var $a8848f9916d99690$var$Vdashl = "⫦";
var $a8848f9916d99690$var$veebar = "⊻";
var $a8848f9916d99690$var$vee = "∨";
var $a8848f9916d99690$var$Vee = "⋁";
var $a8848f9916d99690$var$veeeq = "≚";
var $a8848f9916d99690$var$vellip = "⋮";
var $a8848f9916d99690$var$verbar = "|";
var $a8848f9916d99690$var$Verbar = "‖";
var $a8848f9916d99690$var$vert = "|";
var $a8848f9916d99690$var$Vert = "‖";
var $a8848f9916d99690$var$VerticalBar = "∣";
var $a8848f9916d99690$var$VerticalLine = "|";
var $a8848f9916d99690$var$VerticalSeparator = "❘";
var $a8848f9916d99690$var$VerticalTilde = "≀";
var $a8848f9916d99690$var$VeryThinSpace = " ";
var $a8848f9916d99690$var$Vfr = "𝔙";
var $a8848f9916d99690$var$vfr = "𝔳";
var $a8848f9916d99690$var$vltri = "⊲";
var $a8848f9916d99690$var$vnsub = "⊂⃒";
var $a8848f9916d99690$var$vnsup = "⊃⃒";
var $a8848f9916d99690$var$Vopf = "𝕍";
var $a8848f9916d99690$var$vopf = "𝕧";
var $a8848f9916d99690$var$vprop = "∝";
var $a8848f9916d99690$var$vrtri = "⊳";
var $a8848f9916d99690$var$Vscr = "𝒱";
var $a8848f9916d99690$var$vscr = "𝓋";
var $a8848f9916d99690$var$vsubnE = "⫋︀";
var $a8848f9916d99690$var$vsubne = "⊊︀";
var $a8848f9916d99690$var$vsupnE = "⫌︀";
var $a8848f9916d99690$var$vsupne = "⊋︀";
var $a8848f9916d99690$var$Vvdash = "⊪";
var $a8848f9916d99690$var$vzigzag = "⦚";
var $a8848f9916d99690$var$Wcirc = "Ŵ";
var $a8848f9916d99690$var$wcirc = "ŵ";
var $a8848f9916d99690$var$wedbar = "⩟";
var $a8848f9916d99690$var$wedge = "∧";
var $a8848f9916d99690$var$Wedge = "⋀";
var $a8848f9916d99690$var$wedgeq = "≙";
var $a8848f9916d99690$var$weierp = "℘";
var $a8848f9916d99690$var$Wfr = "𝔚";
var $a8848f9916d99690$var$wfr = "𝔴";
var $a8848f9916d99690$var$Wopf = "𝕎";
var $a8848f9916d99690$var$wopf = "𝕨";
var $a8848f9916d99690$var$wp = "℘";
var $a8848f9916d99690$var$wr = "≀";
var $a8848f9916d99690$var$wreath = "≀";
var $a8848f9916d99690$var$Wscr = "𝒲";
var $a8848f9916d99690$var$wscr = "𝓌";
var $a8848f9916d99690$var$xcap = "⋂";
var $a8848f9916d99690$var$xcirc = "◯";
var $a8848f9916d99690$var$xcup = "⋃";
var $a8848f9916d99690$var$xdtri = "▽";
var $a8848f9916d99690$var$Xfr = "𝔛";
var $a8848f9916d99690$var$xfr = "𝔵";
var $a8848f9916d99690$var$xharr = "⟷";
var $a8848f9916d99690$var$xhArr = "⟺";
var $a8848f9916d99690$var$Xi = "Ξ";
var $a8848f9916d99690$var$xi = "ξ";
var $a8848f9916d99690$var$xlarr = "⟵";
var $a8848f9916d99690$var$xlArr = "⟸";
var $a8848f9916d99690$var$xmap = "⟼";
var $a8848f9916d99690$var$xnis = "⋻";
var $a8848f9916d99690$var$xodot = "⨀";
var $a8848f9916d99690$var$Xopf = "𝕏";
var $a8848f9916d99690$var$xopf = "𝕩";
var $a8848f9916d99690$var$xoplus = "⨁";
var $a8848f9916d99690$var$xotime = "⨂";
var $a8848f9916d99690$var$xrarr = "⟶";
var $a8848f9916d99690$var$xrArr = "⟹";
var $a8848f9916d99690$var$Xscr = "𝒳";
var $a8848f9916d99690$var$xscr = "𝓍";
var $a8848f9916d99690$var$xsqcup = "⨆";
var $a8848f9916d99690$var$xuplus = "⨄";
var $a8848f9916d99690$var$xutri = "△";
var $a8848f9916d99690$var$xvee = "⋁";
var $a8848f9916d99690$var$xwedge = "⋀";
var $a8848f9916d99690$var$Yacute$1 = "Ý";
var $a8848f9916d99690$var$yacute$1 = "ý";
var $a8848f9916d99690$var$YAcy = "Я";
var $a8848f9916d99690$var$yacy = "я";
var $a8848f9916d99690$var$Ycirc = "Ŷ";
var $a8848f9916d99690$var$ycirc = "ŷ";
var $a8848f9916d99690$var$Ycy = "Ы";
var $a8848f9916d99690$var$ycy = "ы";
var $a8848f9916d99690$var$yen$1 = "¥";
var $a8848f9916d99690$var$Yfr = "𝔜";
var $a8848f9916d99690$var$yfr = "𝔶";
var $a8848f9916d99690$var$YIcy = "Ї";
var $a8848f9916d99690$var$yicy = "ї";
var $a8848f9916d99690$var$Yopf = "𝕐";
var $a8848f9916d99690$var$yopf = "𝕪";
var $a8848f9916d99690$var$Yscr = "𝒴";
var $a8848f9916d99690$var$yscr = "𝓎";
var $a8848f9916d99690$var$YUcy = "Ю";
var $a8848f9916d99690$var$yucy = "ю";
var $a8848f9916d99690$var$yuml$1 = "ÿ";
var $a8848f9916d99690$var$Yuml = "Ÿ";
var $a8848f9916d99690$var$Zacute = "Ź";
var $a8848f9916d99690$var$zacute = "ź";
var $a8848f9916d99690$var$Zcaron = "Ž";
var $a8848f9916d99690$var$zcaron = "ž";
var $a8848f9916d99690$var$Zcy = "З";
var $a8848f9916d99690$var$zcy = "з";
var $a8848f9916d99690$var$Zdot = "Ż";
var $a8848f9916d99690$var$zdot = "ż";
var $a8848f9916d99690$var$zeetrf = "ℨ";
var $a8848f9916d99690$var$ZeroWidthSpace = "​";
var $a8848f9916d99690$var$Zeta = "Ζ";
var $a8848f9916d99690$var$zeta = "ζ";
var $a8848f9916d99690$var$zfr = "𝔷";
var $a8848f9916d99690$var$Zfr = "ℨ";
var $a8848f9916d99690$var$ZHcy = "Ж";
var $a8848f9916d99690$var$zhcy = "ж";
var $a8848f9916d99690$var$zigrarr = "⇝";
var $a8848f9916d99690$var$zopf = "𝕫";
var $a8848f9916d99690$var$Zopf = "ℤ";
var $a8848f9916d99690$var$Zscr = "𝒵";
var $a8848f9916d99690$var$zscr = "𝓏";
var $a8848f9916d99690$var$zwj = "‍";
var $a8848f9916d99690$var$zwnj = "‌";
var $a8848f9916d99690$var$require$$1$1 = {
    Aacute: $a8848f9916d99690$var$Aacute$1,
    aacute: $a8848f9916d99690$var$aacute$1,
    Abreve: $a8848f9916d99690$var$Abreve,
    abreve: $a8848f9916d99690$var$abreve,
    ac: $a8848f9916d99690$var$ac,
    acd: $a8848f9916d99690$var$acd,
    acE: $a8848f9916d99690$var$acE,
    Acirc: $a8848f9916d99690$var$Acirc$1,
    acirc: $a8848f9916d99690$var$acirc$1,
    acute: $a8848f9916d99690$var$acute$1,
    Acy: $a8848f9916d99690$var$Acy,
    acy: $a8848f9916d99690$var$acy,
    AElig: $a8848f9916d99690$var$AElig$1,
    aelig: $a8848f9916d99690$var$aelig$1,
    af: $a8848f9916d99690$var$af,
    Afr: $a8848f9916d99690$var$Afr,
    afr: $a8848f9916d99690$var$afr,
    Agrave: $a8848f9916d99690$var$Agrave$1,
    agrave: $a8848f9916d99690$var$agrave$1,
    alefsym: $a8848f9916d99690$var$alefsym,
    aleph: $a8848f9916d99690$var$aleph,
    Alpha: $a8848f9916d99690$var$Alpha,
    alpha: $a8848f9916d99690$var$alpha,
    Amacr: $a8848f9916d99690$var$Amacr,
    amacr: $a8848f9916d99690$var$amacr,
    amalg: $a8848f9916d99690$var$amalg,
    amp: $a8848f9916d99690$var$amp$2,
    AMP: $a8848f9916d99690$var$AMP$1,
    andand: $a8848f9916d99690$var$andand,
    And: $a8848f9916d99690$var$And,
    and: $a8848f9916d99690$var$and,
    andd: $a8848f9916d99690$var$andd,
    andslope: $a8848f9916d99690$var$andslope,
    andv: $a8848f9916d99690$var$andv,
    ang: $a8848f9916d99690$var$ang,
    ange: $a8848f9916d99690$var$ange,
    angle: $a8848f9916d99690$var$angle,
    angmsdaa: $a8848f9916d99690$var$angmsdaa,
    angmsdab: $a8848f9916d99690$var$angmsdab,
    angmsdac: $a8848f9916d99690$var$angmsdac,
    angmsdad: $a8848f9916d99690$var$angmsdad,
    angmsdae: $a8848f9916d99690$var$angmsdae,
    angmsdaf: $a8848f9916d99690$var$angmsdaf,
    angmsdag: $a8848f9916d99690$var$angmsdag,
    angmsdah: $a8848f9916d99690$var$angmsdah,
    angmsd: $a8848f9916d99690$var$angmsd,
    angrt: $a8848f9916d99690$var$angrt,
    angrtvb: $a8848f9916d99690$var$angrtvb,
    angrtvbd: $a8848f9916d99690$var$angrtvbd,
    angsph: $a8848f9916d99690$var$angsph,
    angst: $a8848f9916d99690$var$angst,
    angzarr: $a8848f9916d99690$var$angzarr,
    Aogon: $a8848f9916d99690$var$Aogon,
    aogon: $a8848f9916d99690$var$aogon,
    Aopf: $a8848f9916d99690$var$Aopf,
    aopf: $a8848f9916d99690$var$aopf,
    apacir: $a8848f9916d99690$var$apacir,
    ap: $a8848f9916d99690$var$ap,
    apE: $a8848f9916d99690$var$apE,
    ape: $a8848f9916d99690$var$ape,
    apid: $a8848f9916d99690$var$apid,
    apos: $a8848f9916d99690$var$apos$1,
    ApplyFunction: $a8848f9916d99690$var$ApplyFunction,
    approx: $a8848f9916d99690$var$approx,
    approxeq: $a8848f9916d99690$var$approxeq,
    Aring: $a8848f9916d99690$var$Aring$1,
    aring: $a8848f9916d99690$var$aring$1,
    Ascr: $a8848f9916d99690$var$Ascr,
    ascr: $a8848f9916d99690$var$ascr,
    Assign: $a8848f9916d99690$var$Assign,
    ast: $a8848f9916d99690$var$ast,
    asymp: $a8848f9916d99690$var$asymp,
    asympeq: $a8848f9916d99690$var$asympeq,
    Atilde: $a8848f9916d99690$var$Atilde$1,
    atilde: $a8848f9916d99690$var$atilde$1,
    Auml: $a8848f9916d99690$var$Auml$1,
    auml: $a8848f9916d99690$var$auml$1,
    awconint: $a8848f9916d99690$var$awconint,
    awint: $a8848f9916d99690$var$awint,
    backcong: $a8848f9916d99690$var$backcong,
    backepsilon: $a8848f9916d99690$var$backepsilon,
    backprime: $a8848f9916d99690$var$backprime,
    backsim: $a8848f9916d99690$var$backsim,
    backsimeq: $a8848f9916d99690$var$backsimeq,
    Backslash: $a8848f9916d99690$var$Backslash,
    Barv: $a8848f9916d99690$var$Barv,
    barvee: $a8848f9916d99690$var$barvee,
    barwed: $a8848f9916d99690$var$barwed,
    Barwed: $a8848f9916d99690$var$Barwed,
    barwedge: $a8848f9916d99690$var$barwedge,
    bbrk: $a8848f9916d99690$var$bbrk,
    bbrktbrk: $a8848f9916d99690$var$bbrktbrk,
    bcong: $a8848f9916d99690$var$bcong,
    Bcy: $a8848f9916d99690$var$Bcy,
    bcy: $a8848f9916d99690$var$bcy,
    bdquo: $a8848f9916d99690$var$bdquo,
    becaus: $a8848f9916d99690$var$becaus,
    because: $a8848f9916d99690$var$because,
    Because: $a8848f9916d99690$var$Because,
    bemptyv: $a8848f9916d99690$var$bemptyv,
    bepsi: $a8848f9916d99690$var$bepsi,
    bernou: $a8848f9916d99690$var$bernou,
    Bernoullis: $a8848f9916d99690$var$Bernoullis,
    Beta: $a8848f9916d99690$var$Beta,
    beta: $a8848f9916d99690$var$beta,
    beth: $a8848f9916d99690$var$beth,
    between: $a8848f9916d99690$var$between,
    Bfr: $a8848f9916d99690$var$Bfr,
    bfr: $a8848f9916d99690$var$bfr,
    bigcap: $a8848f9916d99690$var$bigcap,
    bigcirc: $a8848f9916d99690$var$bigcirc,
    bigcup: $a8848f9916d99690$var$bigcup,
    bigodot: $a8848f9916d99690$var$bigodot,
    bigoplus: $a8848f9916d99690$var$bigoplus,
    bigotimes: $a8848f9916d99690$var$bigotimes,
    bigsqcup: $a8848f9916d99690$var$bigsqcup,
    bigstar: $a8848f9916d99690$var$bigstar,
    bigtriangledown: $a8848f9916d99690$var$bigtriangledown,
    bigtriangleup: $a8848f9916d99690$var$bigtriangleup,
    biguplus: $a8848f9916d99690$var$biguplus,
    bigvee: $a8848f9916d99690$var$bigvee,
    bigwedge: $a8848f9916d99690$var$bigwedge,
    bkarow: $a8848f9916d99690$var$bkarow,
    blacklozenge: $a8848f9916d99690$var$blacklozenge,
    blacksquare: $a8848f9916d99690$var$blacksquare,
    blacktriangle: $a8848f9916d99690$var$blacktriangle,
    blacktriangledown: $a8848f9916d99690$var$blacktriangledown,
    blacktriangleleft: $a8848f9916d99690$var$blacktriangleleft,
    blacktriangleright: $a8848f9916d99690$var$blacktriangleright,
    blank: $a8848f9916d99690$var$blank,
    blk12: $a8848f9916d99690$var$blk12,
    blk14: $a8848f9916d99690$var$blk14,
    blk34: $a8848f9916d99690$var$blk34,
    block: $a8848f9916d99690$var$block,
    bne: $a8848f9916d99690$var$bne,
    bnequiv: $a8848f9916d99690$var$bnequiv,
    bNot: $a8848f9916d99690$var$bNot,
    bnot: $a8848f9916d99690$var$bnot,
    Bopf: $a8848f9916d99690$var$Bopf,
    bopf: $a8848f9916d99690$var$bopf,
    bot: $a8848f9916d99690$var$bot,
    bottom: $a8848f9916d99690$var$bottom,
    bowtie: $a8848f9916d99690$var$bowtie,
    boxbox: $a8848f9916d99690$var$boxbox,
    boxdl: $a8848f9916d99690$var$boxdl,
    boxdL: $a8848f9916d99690$var$boxdL,
    boxDl: $a8848f9916d99690$var$boxDl,
    boxDL: $a8848f9916d99690$var$boxDL,
    boxdr: $a8848f9916d99690$var$boxdr,
    boxdR: $a8848f9916d99690$var$boxdR,
    boxDr: $a8848f9916d99690$var$boxDr,
    boxDR: $a8848f9916d99690$var$boxDR,
    boxh: $a8848f9916d99690$var$boxh,
    boxH: $a8848f9916d99690$var$boxH,
    boxhd: $a8848f9916d99690$var$boxhd,
    boxHd: $a8848f9916d99690$var$boxHd,
    boxhD: $a8848f9916d99690$var$boxhD,
    boxHD: $a8848f9916d99690$var$boxHD,
    boxhu: $a8848f9916d99690$var$boxhu,
    boxHu: $a8848f9916d99690$var$boxHu,
    boxhU: $a8848f9916d99690$var$boxhU,
    boxHU: $a8848f9916d99690$var$boxHU,
    boxminus: $a8848f9916d99690$var$boxminus,
    boxplus: $a8848f9916d99690$var$boxplus,
    boxtimes: $a8848f9916d99690$var$boxtimes,
    boxul: $a8848f9916d99690$var$boxul,
    boxuL: $a8848f9916d99690$var$boxuL,
    boxUl: $a8848f9916d99690$var$boxUl,
    boxUL: $a8848f9916d99690$var$boxUL,
    boxur: $a8848f9916d99690$var$boxur,
    boxuR: $a8848f9916d99690$var$boxuR,
    boxUr: $a8848f9916d99690$var$boxUr,
    boxUR: $a8848f9916d99690$var$boxUR,
    boxv: $a8848f9916d99690$var$boxv,
    boxV: $a8848f9916d99690$var$boxV,
    boxvh: $a8848f9916d99690$var$boxvh,
    boxvH: $a8848f9916d99690$var$boxvH,
    boxVh: $a8848f9916d99690$var$boxVh,
    boxVH: $a8848f9916d99690$var$boxVH,
    boxvl: $a8848f9916d99690$var$boxvl,
    boxvL: $a8848f9916d99690$var$boxvL,
    boxVl: $a8848f9916d99690$var$boxVl,
    boxVL: $a8848f9916d99690$var$boxVL,
    boxvr: $a8848f9916d99690$var$boxvr,
    boxvR: $a8848f9916d99690$var$boxvR,
    boxVr: $a8848f9916d99690$var$boxVr,
    boxVR: $a8848f9916d99690$var$boxVR,
    bprime: $a8848f9916d99690$var$bprime,
    breve: $a8848f9916d99690$var$breve,
    Breve: $a8848f9916d99690$var$Breve,
    brvbar: $a8848f9916d99690$var$brvbar$1,
    bscr: $a8848f9916d99690$var$bscr,
    Bscr: $a8848f9916d99690$var$Bscr,
    bsemi: $a8848f9916d99690$var$bsemi,
    bsim: $a8848f9916d99690$var$bsim,
    bsime: $a8848f9916d99690$var$bsime,
    bsolb: $a8848f9916d99690$var$bsolb,
    bsol: $a8848f9916d99690$var$bsol,
    bsolhsub: $a8848f9916d99690$var$bsolhsub,
    bull: $a8848f9916d99690$var$bull,
    bullet: $a8848f9916d99690$var$bullet,
    bump: $a8848f9916d99690$var$bump,
    bumpE: $a8848f9916d99690$var$bumpE,
    bumpe: $a8848f9916d99690$var$bumpe,
    Bumpeq: $a8848f9916d99690$var$Bumpeq,
    bumpeq: $a8848f9916d99690$var$bumpeq,
    Cacute: $a8848f9916d99690$var$Cacute,
    cacute: $a8848f9916d99690$var$cacute,
    capand: $a8848f9916d99690$var$capand,
    capbrcup: $a8848f9916d99690$var$capbrcup,
    capcap: $a8848f9916d99690$var$capcap,
    cap: $a8848f9916d99690$var$cap,
    Cap: $a8848f9916d99690$var$Cap,
    capcup: $a8848f9916d99690$var$capcup,
    capdot: $a8848f9916d99690$var$capdot,
    CapitalDifferentialD: $a8848f9916d99690$var$CapitalDifferentialD,
    caps: $a8848f9916d99690$var$caps,
    caret: $a8848f9916d99690$var$caret,
    caron: $a8848f9916d99690$var$caron,
    Cayleys: $a8848f9916d99690$var$Cayleys,
    ccaps: $a8848f9916d99690$var$ccaps,
    Ccaron: $a8848f9916d99690$var$Ccaron,
    ccaron: $a8848f9916d99690$var$ccaron,
    Ccedil: $a8848f9916d99690$var$Ccedil$1,
    ccedil: $a8848f9916d99690$var$ccedil$1,
    Ccirc: $a8848f9916d99690$var$Ccirc,
    ccirc: $a8848f9916d99690$var$ccirc,
    Cconint: $a8848f9916d99690$var$Cconint,
    ccups: $a8848f9916d99690$var$ccups,
    ccupssm: $a8848f9916d99690$var$ccupssm,
    Cdot: $a8848f9916d99690$var$Cdot,
    cdot: $a8848f9916d99690$var$cdot,
    cedil: $a8848f9916d99690$var$cedil$1,
    Cedilla: $a8848f9916d99690$var$Cedilla,
    cemptyv: $a8848f9916d99690$var$cemptyv,
    cent: $a8848f9916d99690$var$cent$1,
    centerdot: $a8848f9916d99690$var$centerdot,
    CenterDot: $a8848f9916d99690$var$CenterDot,
    cfr: $a8848f9916d99690$var$cfr,
    Cfr: $a8848f9916d99690$var$Cfr,
    CHcy: $a8848f9916d99690$var$CHcy,
    chcy: $a8848f9916d99690$var$chcy,
    check: $a8848f9916d99690$var$check,
    checkmark: $a8848f9916d99690$var$checkmark,
    Chi: $a8848f9916d99690$var$Chi,
    chi: $a8848f9916d99690$var$chi,
    circ: $a8848f9916d99690$var$circ,
    circeq: $a8848f9916d99690$var$circeq,
    circlearrowleft: $a8848f9916d99690$var$circlearrowleft,
    circlearrowright: $a8848f9916d99690$var$circlearrowright,
    circledast: $a8848f9916d99690$var$circledast,
    circledcirc: $a8848f9916d99690$var$circledcirc,
    circleddash: $a8848f9916d99690$var$circleddash,
    CircleDot: $a8848f9916d99690$var$CircleDot,
    circledR: $a8848f9916d99690$var$circledR,
    circledS: $a8848f9916d99690$var$circledS,
    CircleMinus: $a8848f9916d99690$var$CircleMinus,
    CirclePlus: $a8848f9916d99690$var$CirclePlus,
    CircleTimes: $a8848f9916d99690$var$CircleTimes,
    cir: $a8848f9916d99690$var$cir,
    cirE: $a8848f9916d99690$var$cirE,
    cire: $a8848f9916d99690$var$cire,
    cirfnint: $a8848f9916d99690$var$cirfnint,
    cirmid: $a8848f9916d99690$var$cirmid,
    cirscir: $a8848f9916d99690$var$cirscir,
    ClockwiseContourIntegral: $a8848f9916d99690$var$ClockwiseContourIntegral,
    CloseCurlyDoubleQuote: $a8848f9916d99690$var$CloseCurlyDoubleQuote,
    CloseCurlyQuote: $a8848f9916d99690$var$CloseCurlyQuote,
    clubs: $a8848f9916d99690$var$clubs,
    clubsuit: $a8848f9916d99690$var$clubsuit,
    colon: $a8848f9916d99690$var$colon,
    Colon: $a8848f9916d99690$var$Colon,
    Colone: $a8848f9916d99690$var$Colone,
    colone: $a8848f9916d99690$var$colone,
    coloneq: $a8848f9916d99690$var$coloneq,
    comma: $a8848f9916d99690$var$comma,
    commat: $a8848f9916d99690$var$commat,
    comp: $a8848f9916d99690$var$comp,
    compfn: $a8848f9916d99690$var$compfn,
    complement: $a8848f9916d99690$var$complement,
    complexes: $a8848f9916d99690$var$complexes,
    cong: $a8848f9916d99690$var$cong,
    congdot: $a8848f9916d99690$var$congdot,
    Congruent: $a8848f9916d99690$var$Congruent,
    conint: $a8848f9916d99690$var$conint,
    Conint: $a8848f9916d99690$var$Conint,
    ContourIntegral: $a8848f9916d99690$var$ContourIntegral,
    copf: $a8848f9916d99690$var$copf,
    Copf: $a8848f9916d99690$var$Copf,
    coprod: $a8848f9916d99690$var$coprod,
    Coproduct: $a8848f9916d99690$var$Coproduct,
    copy: $a8848f9916d99690$var$copy$2,
    COPY: $a8848f9916d99690$var$COPY$1,
    copysr: $a8848f9916d99690$var$copysr,
    CounterClockwiseContourIntegral: $a8848f9916d99690$var$CounterClockwiseContourIntegral,
    crarr: $a8848f9916d99690$var$crarr,
    cross: $a8848f9916d99690$var$cross$1,
    Cross: $a8848f9916d99690$var$Cross,
    Cscr: $a8848f9916d99690$var$Cscr,
    cscr: $a8848f9916d99690$var$cscr,
    csub: $a8848f9916d99690$var$csub,
    csube: $a8848f9916d99690$var$csube,
    csup: $a8848f9916d99690$var$csup,
    csupe: $a8848f9916d99690$var$csupe,
    ctdot: $a8848f9916d99690$var$ctdot,
    cudarrl: $a8848f9916d99690$var$cudarrl,
    cudarrr: $a8848f9916d99690$var$cudarrr,
    cuepr: $a8848f9916d99690$var$cuepr,
    cuesc: $a8848f9916d99690$var$cuesc,
    cularr: $a8848f9916d99690$var$cularr,
    cularrp: $a8848f9916d99690$var$cularrp,
    cupbrcap: $a8848f9916d99690$var$cupbrcap,
    cupcap: $a8848f9916d99690$var$cupcap,
    CupCap: $a8848f9916d99690$var$CupCap,
    cup: $a8848f9916d99690$var$cup,
    Cup: $a8848f9916d99690$var$Cup,
    cupcup: $a8848f9916d99690$var$cupcup,
    cupdot: $a8848f9916d99690$var$cupdot,
    cupor: $a8848f9916d99690$var$cupor,
    cups: $a8848f9916d99690$var$cups,
    curarr: $a8848f9916d99690$var$curarr,
    curarrm: $a8848f9916d99690$var$curarrm,
    curlyeqprec: $a8848f9916d99690$var$curlyeqprec,
    curlyeqsucc: $a8848f9916d99690$var$curlyeqsucc,
    curlyvee: $a8848f9916d99690$var$curlyvee,
    curlywedge: $a8848f9916d99690$var$curlywedge,
    curren: $a8848f9916d99690$var$curren$1,
    curvearrowleft: $a8848f9916d99690$var$curvearrowleft,
    curvearrowright: $a8848f9916d99690$var$curvearrowright,
    cuvee: $a8848f9916d99690$var$cuvee,
    cuwed: $a8848f9916d99690$var$cuwed,
    cwconint: $a8848f9916d99690$var$cwconint,
    cwint: $a8848f9916d99690$var$cwint,
    cylcty: $a8848f9916d99690$var$cylcty,
    dagger: $a8848f9916d99690$var$dagger,
    Dagger: $a8848f9916d99690$var$Dagger,
    daleth: $a8848f9916d99690$var$daleth,
    darr: $a8848f9916d99690$var$darr,
    Darr: $a8848f9916d99690$var$Darr,
    dArr: $a8848f9916d99690$var$dArr,
    dash: $a8848f9916d99690$var$dash,
    Dashv: $a8848f9916d99690$var$Dashv,
    dashv: $a8848f9916d99690$var$dashv,
    dbkarow: $a8848f9916d99690$var$dbkarow,
    dblac: $a8848f9916d99690$var$dblac,
    Dcaron: $a8848f9916d99690$var$Dcaron,
    dcaron: $a8848f9916d99690$var$dcaron,
    Dcy: $a8848f9916d99690$var$Dcy,
    dcy: $a8848f9916d99690$var$dcy,
    ddagger: $a8848f9916d99690$var$ddagger,
    ddarr: $a8848f9916d99690$var$ddarr,
    DD: $a8848f9916d99690$var$DD,
    dd: $a8848f9916d99690$var$dd,
    DDotrahd: $a8848f9916d99690$var$DDotrahd,
    ddotseq: $a8848f9916d99690$var$ddotseq,
    deg: $a8848f9916d99690$var$deg$1,
    Del: $a8848f9916d99690$var$Del,
    Delta: $a8848f9916d99690$var$Delta,
    delta: $a8848f9916d99690$var$delta,
    demptyv: $a8848f9916d99690$var$demptyv,
    dfisht: $a8848f9916d99690$var$dfisht,
    Dfr: $a8848f9916d99690$var$Dfr,
    dfr: $a8848f9916d99690$var$dfr,
    dHar: $a8848f9916d99690$var$dHar,
    dharl: $a8848f9916d99690$var$dharl,
    dharr: $a8848f9916d99690$var$dharr,
    DiacriticalAcute: $a8848f9916d99690$var$DiacriticalAcute,
    DiacriticalDot: $a8848f9916d99690$var$DiacriticalDot,
    DiacriticalDoubleAcute: $a8848f9916d99690$var$DiacriticalDoubleAcute,
    DiacriticalGrave: $a8848f9916d99690$var$DiacriticalGrave,
    DiacriticalTilde: $a8848f9916d99690$var$DiacriticalTilde,
    diam: $a8848f9916d99690$var$diam,
    diamond: $a8848f9916d99690$var$diamond,
    Diamond: $a8848f9916d99690$var$Diamond,
    diamondsuit: $a8848f9916d99690$var$diamondsuit,
    diams: $a8848f9916d99690$var$diams,
    die: $a8848f9916d99690$var$die,
    DifferentialD: $a8848f9916d99690$var$DifferentialD,
    digamma: $a8848f9916d99690$var$digamma,
    disin: $a8848f9916d99690$var$disin,
    div: $a8848f9916d99690$var$div,
    divide: $a8848f9916d99690$var$divide$1,
    divideontimes: $a8848f9916d99690$var$divideontimes,
    divonx: $a8848f9916d99690$var$divonx,
    DJcy: $a8848f9916d99690$var$DJcy,
    djcy: $a8848f9916d99690$var$djcy,
    dlcorn: $a8848f9916d99690$var$dlcorn,
    dlcrop: $a8848f9916d99690$var$dlcrop,
    dollar: $a8848f9916d99690$var$dollar,
    Dopf: $a8848f9916d99690$var$Dopf,
    dopf: $a8848f9916d99690$var$dopf,
    Dot: $a8848f9916d99690$var$Dot,
    dot: $a8848f9916d99690$var$dot$1,
    DotDot: $a8848f9916d99690$var$DotDot,
    doteq: $a8848f9916d99690$var$doteq,
    doteqdot: $a8848f9916d99690$var$doteqdot,
    DotEqual: $a8848f9916d99690$var$DotEqual,
    dotminus: $a8848f9916d99690$var$dotminus,
    dotplus: $a8848f9916d99690$var$dotplus,
    dotsquare: $a8848f9916d99690$var$dotsquare,
    doublebarwedge: $a8848f9916d99690$var$doublebarwedge,
    DoubleContourIntegral: $a8848f9916d99690$var$DoubleContourIntegral,
    DoubleDot: $a8848f9916d99690$var$DoubleDot,
    DoubleDownArrow: $a8848f9916d99690$var$DoubleDownArrow,
    DoubleLeftArrow: $a8848f9916d99690$var$DoubleLeftArrow,
    DoubleLeftRightArrow: $a8848f9916d99690$var$DoubleLeftRightArrow,
    DoubleLeftTee: $a8848f9916d99690$var$DoubleLeftTee,
    DoubleLongLeftArrow: $a8848f9916d99690$var$DoubleLongLeftArrow,
    DoubleLongLeftRightArrow: $a8848f9916d99690$var$DoubleLongLeftRightArrow,
    DoubleLongRightArrow: $a8848f9916d99690$var$DoubleLongRightArrow,
    DoubleRightArrow: $a8848f9916d99690$var$DoubleRightArrow,
    DoubleRightTee: $a8848f9916d99690$var$DoubleRightTee,
    DoubleUpArrow: $a8848f9916d99690$var$DoubleUpArrow,
    DoubleUpDownArrow: $a8848f9916d99690$var$DoubleUpDownArrow,
    DoubleVerticalBar: $a8848f9916d99690$var$DoubleVerticalBar,
    DownArrowBar: $a8848f9916d99690$var$DownArrowBar,
    downarrow: $a8848f9916d99690$var$downarrow,
    DownArrow: $a8848f9916d99690$var$DownArrow,
    Downarrow: $a8848f9916d99690$var$Downarrow,
    DownArrowUpArrow: $a8848f9916d99690$var$DownArrowUpArrow,
    DownBreve: $a8848f9916d99690$var$DownBreve,
    downdownarrows: $a8848f9916d99690$var$downdownarrows,
    downharpoonleft: $a8848f9916d99690$var$downharpoonleft,
    downharpoonright: $a8848f9916d99690$var$downharpoonright,
    DownLeftRightVector: $a8848f9916d99690$var$DownLeftRightVector,
    DownLeftTeeVector: $a8848f9916d99690$var$DownLeftTeeVector,
    DownLeftVectorBar: $a8848f9916d99690$var$DownLeftVectorBar,
    DownLeftVector: $a8848f9916d99690$var$DownLeftVector,
    DownRightTeeVector: $a8848f9916d99690$var$DownRightTeeVector,
    DownRightVectorBar: $a8848f9916d99690$var$DownRightVectorBar,
    DownRightVector: $a8848f9916d99690$var$DownRightVector,
    DownTeeArrow: $a8848f9916d99690$var$DownTeeArrow,
    DownTee: $a8848f9916d99690$var$DownTee,
    drbkarow: $a8848f9916d99690$var$drbkarow,
    drcorn: $a8848f9916d99690$var$drcorn,
    drcrop: $a8848f9916d99690$var$drcrop,
    Dscr: $a8848f9916d99690$var$Dscr,
    dscr: $a8848f9916d99690$var$dscr,
    DScy: $a8848f9916d99690$var$DScy,
    dscy: $a8848f9916d99690$var$dscy,
    dsol: $a8848f9916d99690$var$dsol,
    Dstrok: $a8848f9916d99690$var$Dstrok,
    dstrok: $a8848f9916d99690$var$dstrok,
    dtdot: $a8848f9916d99690$var$dtdot,
    dtri: $a8848f9916d99690$var$dtri,
    dtrif: $a8848f9916d99690$var$dtrif,
    duarr: $a8848f9916d99690$var$duarr,
    duhar: $a8848f9916d99690$var$duhar,
    dwangle: $a8848f9916d99690$var$dwangle,
    DZcy: $a8848f9916d99690$var$DZcy,
    dzcy: $a8848f9916d99690$var$dzcy,
    dzigrarr: $a8848f9916d99690$var$dzigrarr,
    Eacute: $a8848f9916d99690$var$Eacute$1,
    eacute: $a8848f9916d99690$var$eacute$1,
    easter: $a8848f9916d99690$var$easter,
    Ecaron: $a8848f9916d99690$var$Ecaron,
    ecaron: $a8848f9916d99690$var$ecaron,
    Ecirc: $a8848f9916d99690$var$Ecirc$1,
    ecirc: $a8848f9916d99690$var$ecirc$1,
    ecir: $a8848f9916d99690$var$ecir,
    ecolon: $a8848f9916d99690$var$ecolon,
    Ecy: $a8848f9916d99690$var$Ecy,
    ecy: $a8848f9916d99690$var$ecy,
    eDDot: $a8848f9916d99690$var$eDDot,
    Edot: $a8848f9916d99690$var$Edot,
    edot: $a8848f9916d99690$var$edot,
    eDot: $a8848f9916d99690$var$eDot,
    ee: $a8848f9916d99690$var$ee,
    efDot: $a8848f9916d99690$var$efDot,
    Efr: $a8848f9916d99690$var$Efr,
    efr: $a8848f9916d99690$var$efr,
    eg: $a8848f9916d99690$var$eg,
    Egrave: $a8848f9916d99690$var$Egrave$1,
    egrave: $a8848f9916d99690$var$egrave$1,
    egs: $a8848f9916d99690$var$egs,
    egsdot: $a8848f9916d99690$var$egsdot,
    el: $a8848f9916d99690$var$el,
    Element: $a8848f9916d99690$var$Element,
    elinters: $a8848f9916d99690$var$elinters,
    ell: $a8848f9916d99690$var$ell,
    els: $a8848f9916d99690$var$els,
    elsdot: $a8848f9916d99690$var$elsdot,
    Emacr: $a8848f9916d99690$var$Emacr,
    emacr: $a8848f9916d99690$var$emacr,
    empty: $a8848f9916d99690$var$empty,
    emptyset: $a8848f9916d99690$var$emptyset,
    EmptySmallSquare: $a8848f9916d99690$var$EmptySmallSquare,
    emptyv: $a8848f9916d99690$var$emptyv,
    EmptyVerySmallSquare: $a8848f9916d99690$var$EmptyVerySmallSquare,
    emsp13: $a8848f9916d99690$var$emsp13,
    emsp14: $a8848f9916d99690$var$emsp14,
    emsp: $a8848f9916d99690$var$emsp,
    ENG: $a8848f9916d99690$var$ENG,
    eng: $a8848f9916d99690$var$eng,
    ensp: $a8848f9916d99690$var$ensp,
    Eogon: $a8848f9916d99690$var$Eogon,
    eogon: $a8848f9916d99690$var$eogon,
    Eopf: $a8848f9916d99690$var$Eopf,
    eopf: $a8848f9916d99690$var$eopf,
    epar: $a8848f9916d99690$var$epar,
    eparsl: $a8848f9916d99690$var$eparsl,
    eplus: $a8848f9916d99690$var$eplus,
    epsi: $a8848f9916d99690$var$epsi,
    Epsilon: $a8848f9916d99690$var$Epsilon,
    epsilon: $a8848f9916d99690$var$epsilon,
    epsiv: $a8848f9916d99690$var$epsiv,
    eqcirc: $a8848f9916d99690$var$eqcirc,
    eqcolon: $a8848f9916d99690$var$eqcolon,
    eqsim: $a8848f9916d99690$var$eqsim,
    eqslantgtr: $a8848f9916d99690$var$eqslantgtr,
    eqslantless: $a8848f9916d99690$var$eqslantless,
    Equal: $a8848f9916d99690$var$Equal,
    equals: $a8848f9916d99690$var$equals,
    EqualTilde: $a8848f9916d99690$var$EqualTilde,
    equest: $a8848f9916d99690$var$equest,
    Equilibrium: $a8848f9916d99690$var$Equilibrium,
    equiv: $a8848f9916d99690$var$equiv,
    equivDD: $a8848f9916d99690$var$equivDD,
    eqvparsl: $a8848f9916d99690$var$eqvparsl,
    erarr: $a8848f9916d99690$var$erarr,
    erDot: $a8848f9916d99690$var$erDot,
    escr: $a8848f9916d99690$var$escr,
    Escr: $a8848f9916d99690$var$Escr,
    esdot: $a8848f9916d99690$var$esdot,
    Esim: $a8848f9916d99690$var$Esim,
    esim: $a8848f9916d99690$var$esim,
    Eta: $a8848f9916d99690$var$Eta,
    eta: $a8848f9916d99690$var$eta,
    ETH: $a8848f9916d99690$var$ETH$1,
    eth: $a8848f9916d99690$var$eth$1,
    Euml: $a8848f9916d99690$var$Euml$1,
    euml: $a8848f9916d99690$var$euml$1,
    euro: $a8848f9916d99690$var$euro,
    excl: $a8848f9916d99690$var$excl,
    exist: $a8848f9916d99690$var$exist,
    Exists: $a8848f9916d99690$var$Exists,
    expectation: $a8848f9916d99690$var$expectation,
    exponentiale: $a8848f9916d99690$var$exponentiale,
    ExponentialE: $a8848f9916d99690$var$ExponentialE,
    fallingdotseq: $a8848f9916d99690$var$fallingdotseq,
    Fcy: $a8848f9916d99690$var$Fcy,
    fcy: $a8848f9916d99690$var$fcy,
    female: $a8848f9916d99690$var$female,
    ffilig: $a8848f9916d99690$var$ffilig,
    fflig: $a8848f9916d99690$var$fflig,
    ffllig: $a8848f9916d99690$var$ffllig,
    Ffr: $a8848f9916d99690$var$Ffr,
    ffr: $a8848f9916d99690$var$ffr,
    filig: $a8848f9916d99690$var$filig,
    FilledSmallSquare: $a8848f9916d99690$var$FilledSmallSquare,
    FilledVerySmallSquare: $a8848f9916d99690$var$FilledVerySmallSquare,
    fjlig: $a8848f9916d99690$var$fjlig,
    flat: $a8848f9916d99690$var$flat,
    fllig: $a8848f9916d99690$var$fllig,
    fltns: $a8848f9916d99690$var$fltns,
    fnof: $a8848f9916d99690$var$fnof,
    Fopf: $a8848f9916d99690$var$Fopf,
    fopf: $a8848f9916d99690$var$fopf,
    forall: $a8848f9916d99690$var$forall,
    ForAll: $a8848f9916d99690$var$ForAll,
    fork: $a8848f9916d99690$var$fork,
    forkv: $a8848f9916d99690$var$forkv,
    Fouriertrf: $a8848f9916d99690$var$Fouriertrf,
    fpartint: $a8848f9916d99690$var$fpartint,
    frac12: $a8848f9916d99690$var$frac12$1,
    frac13: $a8848f9916d99690$var$frac13,
    frac14: $a8848f9916d99690$var$frac14$1,
    frac15: $a8848f9916d99690$var$frac15,
    frac16: $a8848f9916d99690$var$frac16,
    frac18: $a8848f9916d99690$var$frac18,
    frac23: $a8848f9916d99690$var$frac23,
    frac25: $a8848f9916d99690$var$frac25,
    frac34: $a8848f9916d99690$var$frac34$1,
    frac35: $a8848f9916d99690$var$frac35,
    frac38: $a8848f9916d99690$var$frac38,
    frac45: $a8848f9916d99690$var$frac45,
    frac56: $a8848f9916d99690$var$frac56,
    frac58: $a8848f9916d99690$var$frac58,
    frac78: $a8848f9916d99690$var$frac78,
    frasl: $a8848f9916d99690$var$frasl,
    frown: $a8848f9916d99690$var$frown,
    fscr: $a8848f9916d99690$var$fscr,
    Fscr: $a8848f9916d99690$var$Fscr,
    gacute: $a8848f9916d99690$var$gacute,
    Gamma: $a8848f9916d99690$var$Gamma,
    gamma: $a8848f9916d99690$var$gamma,
    Gammad: $a8848f9916d99690$var$Gammad,
    gammad: $a8848f9916d99690$var$gammad,
    gap: $a8848f9916d99690$var$gap,
    Gbreve: $a8848f9916d99690$var$Gbreve,
    gbreve: $a8848f9916d99690$var$gbreve,
    Gcedil: $a8848f9916d99690$var$Gcedil,
    Gcirc: $a8848f9916d99690$var$Gcirc,
    gcirc: $a8848f9916d99690$var$gcirc,
    Gcy: $a8848f9916d99690$var$Gcy,
    gcy: $a8848f9916d99690$var$gcy,
    Gdot: $a8848f9916d99690$var$Gdot,
    gdot: $a8848f9916d99690$var$gdot,
    ge: $a8848f9916d99690$var$ge,
    gE: $a8848f9916d99690$var$gE,
    gEl: $a8848f9916d99690$var$gEl,
    gel: $a8848f9916d99690$var$gel,
    geq: $a8848f9916d99690$var$geq,
    geqq: $a8848f9916d99690$var$geqq,
    geqslant: $a8848f9916d99690$var$geqslant,
    gescc: $a8848f9916d99690$var$gescc,
    ges: $a8848f9916d99690$var$ges,
    gesdot: $a8848f9916d99690$var$gesdot,
    gesdoto: $a8848f9916d99690$var$gesdoto,
    gesdotol: $a8848f9916d99690$var$gesdotol,
    gesl: $a8848f9916d99690$var$gesl,
    gesles: $a8848f9916d99690$var$gesles,
    Gfr: $a8848f9916d99690$var$Gfr,
    gfr: $a8848f9916d99690$var$gfr,
    gg: $a8848f9916d99690$var$gg,
    Gg: $a8848f9916d99690$var$Gg,
    ggg: $a8848f9916d99690$var$ggg,
    gimel: $a8848f9916d99690$var$gimel,
    GJcy: $a8848f9916d99690$var$GJcy,
    gjcy: $a8848f9916d99690$var$gjcy,
    gla: $a8848f9916d99690$var$gla,
    gl: $a8848f9916d99690$var$gl,
    glE: $a8848f9916d99690$var$glE,
    glj: $a8848f9916d99690$var$glj,
    gnap: $a8848f9916d99690$var$gnap,
    gnapprox: $a8848f9916d99690$var$gnapprox,
    gne: $a8848f9916d99690$var$gne,
    gnE: $a8848f9916d99690$var$gnE,
    gneq: $a8848f9916d99690$var$gneq,
    gneqq: $a8848f9916d99690$var$gneqq,
    gnsim: $a8848f9916d99690$var$gnsim,
    Gopf: $a8848f9916d99690$var$Gopf,
    gopf: $a8848f9916d99690$var$gopf,
    grave: $a8848f9916d99690$var$grave,
    GreaterEqual: $a8848f9916d99690$var$GreaterEqual,
    GreaterEqualLess: $a8848f9916d99690$var$GreaterEqualLess,
    GreaterFullEqual: $a8848f9916d99690$var$GreaterFullEqual,
    GreaterGreater: $a8848f9916d99690$var$GreaterGreater,
    GreaterLess: $a8848f9916d99690$var$GreaterLess,
    GreaterSlantEqual: $a8848f9916d99690$var$GreaterSlantEqual,
    GreaterTilde: $a8848f9916d99690$var$GreaterTilde,
    Gscr: $a8848f9916d99690$var$Gscr,
    gscr: $a8848f9916d99690$var$gscr,
    gsim: $a8848f9916d99690$var$gsim,
    gsime: $a8848f9916d99690$var$gsime,
    gsiml: $a8848f9916d99690$var$gsiml,
    gtcc: $a8848f9916d99690$var$gtcc,
    gtcir: $a8848f9916d99690$var$gtcir,
    gt: $a8848f9916d99690$var$gt$2,
    GT: $a8848f9916d99690$var$GT$1,
    Gt: $a8848f9916d99690$var$Gt,
    gtdot: $a8848f9916d99690$var$gtdot,
    gtlPar: $a8848f9916d99690$var$gtlPar,
    gtquest: $a8848f9916d99690$var$gtquest,
    gtrapprox: $a8848f9916d99690$var$gtrapprox,
    gtrarr: $a8848f9916d99690$var$gtrarr,
    gtrdot: $a8848f9916d99690$var$gtrdot,
    gtreqless: $a8848f9916d99690$var$gtreqless,
    gtreqqless: $a8848f9916d99690$var$gtreqqless,
    gtrless: $a8848f9916d99690$var$gtrless,
    gtrsim: $a8848f9916d99690$var$gtrsim,
    gvertneqq: $a8848f9916d99690$var$gvertneqq,
    gvnE: $a8848f9916d99690$var$gvnE,
    Hacek: $a8848f9916d99690$var$Hacek,
    hairsp: $a8848f9916d99690$var$hairsp,
    half: $a8848f9916d99690$var$half,
    hamilt: $a8848f9916d99690$var$hamilt,
    HARDcy: $a8848f9916d99690$var$HARDcy,
    hardcy: $a8848f9916d99690$var$hardcy,
    harrcir: $a8848f9916d99690$var$harrcir,
    harr: $a8848f9916d99690$var$harr,
    hArr: $a8848f9916d99690$var$hArr,
    harrw: $a8848f9916d99690$var$harrw,
    Hat: $a8848f9916d99690$var$Hat,
    hbar: $a8848f9916d99690$var$hbar,
    Hcirc: $a8848f9916d99690$var$Hcirc,
    hcirc: $a8848f9916d99690$var$hcirc,
    hearts: $a8848f9916d99690$var$hearts,
    heartsuit: $a8848f9916d99690$var$heartsuit,
    hellip: $a8848f9916d99690$var$hellip,
    hercon: $a8848f9916d99690$var$hercon,
    hfr: $a8848f9916d99690$var$hfr,
    Hfr: $a8848f9916d99690$var$Hfr,
    HilbertSpace: $a8848f9916d99690$var$HilbertSpace,
    hksearow: $a8848f9916d99690$var$hksearow,
    hkswarow: $a8848f9916d99690$var$hkswarow,
    hoarr: $a8848f9916d99690$var$hoarr,
    homtht: $a8848f9916d99690$var$homtht,
    hookleftarrow: $a8848f9916d99690$var$hookleftarrow,
    hookrightarrow: $a8848f9916d99690$var$hookrightarrow,
    hopf: $a8848f9916d99690$var$hopf,
    Hopf: $a8848f9916d99690$var$Hopf,
    horbar: $a8848f9916d99690$var$horbar,
    HorizontalLine: $a8848f9916d99690$var$HorizontalLine,
    hscr: $a8848f9916d99690$var$hscr,
    Hscr: $a8848f9916d99690$var$Hscr,
    hslash: $a8848f9916d99690$var$hslash,
    Hstrok: $a8848f9916d99690$var$Hstrok,
    hstrok: $a8848f9916d99690$var$hstrok,
    HumpDownHump: $a8848f9916d99690$var$HumpDownHump,
    HumpEqual: $a8848f9916d99690$var$HumpEqual,
    hybull: $a8848f9916d99690$var$hybull,
    hyphen: $a8848f9916d99690$var$hyphen,
    Iacute: $a8848f9916d99690$var$Iacute$1,
    iacute: $a8848f9916d99690$var$iacute$1,
    ic: $a8848f9916d99690$var$ic,
    Icirc: $a8848f9916d99690$var$Icirc$1,
    icirc: $a8848f9916d99690$var$icirc$1,
    Icy: $a8848f9916d99690$var$Icy,
    icy: $a8848f9916d99690$var$icy,
    Idot: $a8848f9916d99690$var$Idot,
    IEcy: $a8848f9916d99690$var$IEcy,
    iecy: $a8848f9916d99690$var$iecy,
    iexcl: $a8848f9916d99690$var$iexcl$1,
    iff: $a8848f9916d99690$var$iff,
    ifr: $a8848f9916d99690$var$ifr,
    Ifr: $a8848f9916d99690$var$Ifr,
    Igrave: $a8848f9916d99690$var$Igrave$1,
    igrave: $a8848f9916d99690$var$igrave$1,
    ii: $a8848f9916d99690$var$ii,
    iiiint: $a8848f9916d99690$var$iiiint,
    iiint: $a8848f9916d99690$var$iiint,
    iinfin: $a8848f9916d99690$var$iinfin,
    iiota: $a8848f9916d99690$var$iiota,
    IJlig: $a8848f9916d99690$var$IJlig,
    ijlig: $a8848f9916d99690$var$ijlig,
    Imacr: $a8848f9916d99690$var$Imacr,
    imacr: $a8848f9916d99690$var$imacr,
    image: $a8848f9916d99690$var$image,
    ImaginaryI: $a8848f9916d99690$var$ImaginaryI,
    imagline: $a8848f9916d99690$var$imagline,
    imagpart: $a8848f9916d99690$var$imagpart,
    imath: $a8848f9916d99690$var$imath,
    Im: $a8848f9916d99690$var$Im,
    imof: $a8848f9916d99690$var$imof,
    imped: $a8848f9916d99690$var$imped,
    Implies: $a8848f9916d99690$var$Implies,
    incare: $a8848f9916d99690$var$incare,
    in: "∈",
    infin: $a8848f9916d99690$var$infin,
    infintie: $a8848f9916d99690$var$infintie,
    inodot: $a8848f9916d99690$var$inodot,
    intcal: $a8848f9916d99690$var$intcal,
    int: $a8848f9916d99690$var$int,
    Int: $a8848f9916d99690$var$Int,
    integers: $a8848f9916d99690$var$integers,
    Integral: $a8848f9916d99690$var$Integral,
    intercal: $a8848f9916d99690$var$intercal,
    Intersection: $a8848f9916d99690$var$Intersection,
    intlarhk: $a8848f9916d99690$var$intlarhk,
    intprod: $a8848f9916d99690$var$intprod,
    InvisibleComma: $a8848f9916d99690$var$InvisibleComma,
    InvisibleTimes: $a8848f9916d99690$var$InvisibleTimes,
    IOcy: $a8848f9916d99690$var$IOcy,
    iocy: $a8848f9916d99690$var$iocy,
    Iogon: $a8848f9916d99690$var$Iogon,
    iogon: $a8848f9916d99690$var$iogon,
    Iopf: $a8848f9916d99690$var$Iopf,
    iopf: $a8848f9916d99690$var$iopf,
    Iota: $a8848f9916d99690$var$Iota,
    iota: $a8848f9916d99690$var$iota,
    iprod: $a8848f9916d99690$var$iprod,
    iquest: $a8848f9916d99690$var$iquest$1,
    iscr: $a8848f9916d99690$var$iscr,
    Iscr: $a8848f9916d99690$var$Iscr,
    isin: $a8848f9916d99690$var$isin,
    isindot: $a8848f9916d99690$var$isindot,
    isinE: $a8848f9916d99690$var$isinE,
    isins: $a8848f9916d99690$var$isins,
    isinsv: $a8848f9916d99690$var$isinsv,
    isinv: $a8848f9916d99690$var$isinv,
    it: $a8848f9916d99690$var$it,
    Itilde: $a8848f9916d99690$var$Itilde,
    itilde: $a8848f9916d99690$var$itilde,
    Iukcy: $a8848f9916d99690$var$Iukcy,
    iukcy: $a8848f9916d99690$var$iukcy,
    Iuml: $a8848f9916d99690$var$Iuml$1,
    iuml: $a8848f9916d99690$var$iuml$1,
    Jcirc: $a8848f9916d99690$var$Jcirc,
    jcirc: $a8848f9916d99690$var$jcirc,
    Jcy: $a8848f9916d99690$var$Jcy,
    jcy: $a8848f9916d99690$var$jcy,
    Jfr: $a8848f9916d99690$var$Jfr,
    jfr: $a8848f9916d99690$var$jfr,
    jmath: $a8848f9916d99690$var$jmath,
    Jopf: $a8848f9916d99690$var$Jopf,
    jopf: $a8848f9916d99690$var$jopf,
    Jscr: $a8848f9916d99690$var$Jscr,
    jscr: $a8848f9916d99690$var$jscr,
    Jsercy: $a8848f9916d99690$var$Jsercy,
    jsercy: $a8848f9916d99690$var$jsercy,
    Jukcy: $a8848f9916d99690$var$Jukcy,
    jukcy: $a8848f9916d99690$var$jukcy,
    Kappa: $a8848f9916d99690$var$Kappa,
    kappa: $a8848f9916d99690$var$kappa,
    kappav: $a8848f9916d99690$var$kappav,
    Kcedil: $a8848f9916d99690$var$Kcedil,
    kcedil: $a8848f9916d99690$var$kcedil,
    Kcy: $a8848f9916d99690$var$Kcy,
    kcy: $a8848f9916d99690$var$kcy,
    Kfr: $a8848f9916d99690$var$Kfr,
    kfr: $a8848f9916d99690$var$kfr,
    kgreen: $a8848f9916d99690$var$kgreen,
    KHcy: $a8848f9916d99690$var$KHcy,
    khcy: $a8848f9916d99690$var$khcy,
    KJcy: $a8848f9916d99690$var$KJcy,
    kjcy: $a8848f9916d99690$var$kjcy,
    Kopf: $a8848f9916d99690$var$Kopf,
    kopf: $a8848f9916d99690$var$kopf,
    Kscr: $a8848f9916d99690$var$Kscr,
    kscr: $a8848f9916d99690$var$kscr,
    lAarr: $a8848f9916d99690$var$lAarr,
    Lacute: $a8848f9916d99690$var$Lacute,
    lacute: $a8848f9916d99690$var$lacute,
    laemptyv: $a8848f9916d99690$var$laemptyv,
    lagran: $a8848f9916d99690$var$lagran,
    Lambda: $a8848f9916d99690$var$Lambda,
    lambda: $a8848f9916d99690$var$lambda,
    lang: $a8848f9916d99690$var$lang,
    Lang: $a8848f9916d99690$var$Lang,
    langd: $a8848f9916d99690$var$langd,
    langle: $a8848f9916d99690$var$langle,
    lap: $a8848f9916d99690$var$lap,
    Laplacetrf: $a8848f9916d99690$var$Laplacetrf,
    laquo: $a8848f9916d99690$var$laquo$1,
    larrb: $a8848f9916d99690$var$larrb,
    larrbfs: $a8848f9916d99690$var$larrbfs,
    larr: $a8848f9916d99690$var$larr,
    Larr: $a8848f9916d99690$var$Larr,
    lArr: $a8848f9916d99690$var$lArr,
    larrfs: $a8848f9916d99690$var$larrfs,
    larrhk: $a8848f9916d99690$var$larrhk,
    larrlp: $a8848f9916d99690$var$larrlp,
    larrpl: $a8848f9916d99690$var$larrpl,
    larrsim: $a8848f9916d99690$var$larrsim,
    larrtl: $a8848f9916d99690$var$larrtl,
    latail: $a8848f9916d99690$var$latail,
    lAtail: $a8848f9916d99690$var$lAtail,
    lat: $a8848f9916d99690$var$lat,
    late: $a8848f9916d99690$var$late,
    lates: $a8848f9916d99690$var$lates,
    lbarr: $a8848f9916d99690$var$lbarr,
    lBarr: $a8848f9916d99690$var$lBarr,
    lbbrk: $a8848f9916d99690$var$lbbrk,
    lbrace: $a8848f9916d99690$var$lbrace,
    lbrack: $a8848f9916d99690$var$lbrack,
    lbrke: $a8848f9916d99690$var$lbrke,
    lbrksld: $a8848f9916d99690$var$lbrksld,
    lbrkslu: $a8848f9916d99690$var$lbrkslu,
    Lcaron: $a8848f9916d99690$var$Lcaron,
    lcaron: $a8848f9916d99690$var$lcaron,
    Lcedil: $a8848f9916d99690$var$Lcedil,
    lcedil: $a8848f9916d99690$var$lcedil,
    lceil: $a8848f9916d99690$var$lceil,
    lcub: $a8848f9916d99690$var$lcub,
    Lcy: $a8848f9916d99690$var$Lcy,
    lcy: $a8848f9916d99690$var$lcy,
    ldca: $a8848f9916d99690$var$ldca,
    ldquo: $a8848f9916d99690$var$ldquo,
    ldquor: $a8848f9916d99690$var$ldquor,
    ldrdhar: $a8848f9916d99690$var$ldrdhar,
    ldrushar: $a8848f9916d99690$var$ldrushar,
    ldsh: $a8848f9916d99690$var$ldsh,
    le: $a8848f9916d99690$var$le,
    lE: $a8848f9916d99690$var$lE,
    LeftAngleBracket: $a8848f9916d99690$var$LeftAngleBracket,
    LeftArrowBar: $a8848f9916d99690$var$LeftArrowBar,
    leftarrow: $a8848f9916d99690$var$leftarrow,
    LeftArrow: $a8848f9916d99690$var$LeftArrow,
    Leftarrow: $a8848f9916d99690$var$Leftarrow,
    LeftArrowRightArrow: $a8848f9916d99690$var$LeftArrowRightArrow,
    leftarrowtail: $a8848f9916d99690$var$leftarrowtail,
    LeftCeiling: $a8848f9916d99690$var$LeftCeiling,
    LeftDoubleBracket: $a8848f9916d99690$var$LeftDoubleBracket,
    LeftDownTeeVector: $a8848f9916d99690$var$LeftDownTeeVector,
    LeftDownVectorBar: $a8848f9916d99690$var$LeftDownVectorBar,
    LeftDownVector: $a8848f9916d99690$var$LeftDownVector,
    LeftFloor: $a8848f9916d99690$var$LeftFloor,
    leftharpoondown: $a8848f9916d99690$var$leftharpoondown,
    leftharpoonup: $a8848f9916d99690$var$leftharpoonup,
    leftleftarrows: $a8848f9916d99690$var$leftleftarrows,
    leftrightarrow: $a8848f9916d99690$var$leftrightarrow,
    LeftRightArrow: $a8848f9916d99690$var$LeftRightArrow,
    Leftrightarrow: $a8848f9916d99690$var$Leftrightarrow,
    leftrightarrows: $a8848f9916d99690$var$leftrightarrows,
    leftrightharpoons: $a8848f9916d99690$var$leftrightharpoons,
    leftrightsquigarrow: $a8848f9916d99690$var$leftrightsquigarrow,
    LeftRightVector: $a8848f9916d99690$var$LeftRightVector,
    LeftTeeArrow: $a8848f9916d99690$var$LeftTeeArrow,
    LeftTee: $a8848f9916d99690$var$LeftTee,
    LeftTeeVector: $a8848f9916d99690$var$LeftTeeVector,
    leftthreetimes: $a8848f9916d99690$var$leftthreetimes,
    LeftTriangleBar: $a8848f9916d99690$var$LeftTriangleBar,
    LeftTriangle: $a8848f9916d99690$var$LeftTriangle,
    LeftTriangleEqual: $a8848f9916d99690$var$LeftTriangleEqual,
    LeftUpDownVector: $a8848f9916d99690$var$LeftUpDownVector,
    LeftUpTeeVector: $a8848f9916d99690$var$LeftUpTeeVector,
    LeftUpVectorBar: $a8848f9916d99690$var$LeftUpVectorBar,
    LeftUpVector: $a8848f9916d99690$var$LeftUpVector,
    LeftVectorBar: $a8848f9916d99690$var$LeftVectorBar,
    LeftVector: $a8848f9916d99690$var$LeftVector,
    lEg: $a8848f9916d99690$var$lEg,
    leg: $a8848f9916d99690$var$leg,
    leq: $a8848f9916d99690$var$leq,
    leqq: $a8848f9916d99690$var$leqq,
    leqslant: $a8848f9916d99690$var$leqslant,
    lescc: $a8848f9916d99690$var$lescc,
    les: $a8848f9916d99690$var$les,
    lesdot: $a8848f9916d99690$var$lesdot,
    lesdoto: $a8848f9916d99690$var$lesdoto,
    lesdotor: $a8848f9916d99690$var$lesdotor,
    lesg: $a8848f9916d99690$var$lesg,
    lesges: $a8848f9916d99690$var$lesges,
    lessapprox: $a8848f9916d99690$var$lessapprox,
    lessdot: $a8848f9916d99690$var$lessdot,
    lesseqgtr: $a8848f9916d99690$var$lesseqgtr,
    lesseqqgtr: $a8848f9916d99690$var$lesseqqgtr,
    LessEqualGreater: $a8848f9916d99690$var$LessEqualGreater,
    LessFullEqual: $a8848f9916d99690$var$LessFullEqual,
    LessGreater: $a8848f9916d99690$var$LessGreater,
    lessgtr: $a8848f9916d99690$var$lessgtr,
    LessLess: $a8848f9916d99690$var$LessLess,
    lesssim: $a8848f9916d99690$var$lesssim,
    LessSlantEqual: $a8848f9916d99690$var$LessSlantEqual,
    LessTilde: $a8848f9916d99690$var$LessTilde,
    lfisht: $a8848f9916d99690$var$lfisht,
    lfloor: $a8848f9916d99690$var$lfloor,
    Lfr: $a8848f9916d99690$var$Lfr,
    lfr: $a8848f9916d99690$var$lfr,
    lg: $a8848f9916d99690$var$lg,
    lgE: $a8848f9916d99690$var$lgE,
    lHar: $a8848f9916d99690$var$lHar,
    lhard: $a8848f9916d99690$var$lhard,
    lharu: $a8848f9916d99690$var$lharu,
    lharul: $a8848f9916d99690$var$lharul,
    lhblk: $a8848f9916d99690$var$lhblk,
    LJcy: $a8848f9916d99690$var$LJcy,
    ljcy: $a8848f9916d99690$var$ljcy,
    llarr: $a8848f9916d99690$var$llarr,
    ll: $a8848f9916d99690$var$ll,
    Ll: $a8848f9916d99690$var$Ll,
    llcorner: $a8848f9916d99690$var$llcorner,
    Lleftarrow: $a8848f9916d99690$var$Lleftarrow,
    llhard: $a8848f9916d99690$var$llhard,
    lltri: $a8848f9916d99690$var$lltri,
    Lmidot: $a8848f9916d99690$var$Lmidot,
    lmidot: $a8848f9916d99690$var$lmidot,
    lmoustache: $a8848f9916d99690$var$lmoustache,
    lmoust: $a8848f9916d99690$var$lmoust,
    lnap: $a8848f9916d99690$var$lnap,
    lnapprox: $a8848f9916d99690$var$lnapprox,
    lne: $a8848f9916d99690$var$lne,
    lnE: $a8848f9916d99690$var$lnE,
    lneq: $a8848f9916d99690$var$lneq,
    lneqq: $a8848f9916d99690$var$lneqq,
    lnsim: $a8848f9916d99690$var$lnsim,
    loang: $a8848f9916d99690$var$loang,
    loarr: $a8848f9916d99690$var$loarr,
    lobrk: $a8848f9916d99690$var$lobrk,
    longleftarrow: $a8848f9916d99690$var$longleftarrow,
    LongLeftArrow: $a8848f9916d99690$var$LongLeftArrow,
    Longleftarrow: $a8848f9916d99690$var$Longleftarrow,
    longleftrightarrow: $a8848f9916d99690$var$longleftrightarrow,
    LongLeftRightArrow: $a8848f9916d99690$var$LongLeftRightArrow,
    Longleftrightarrow: $a8848f9916d99690$var$Longleftrightarrow,
    longmapsto: $a8848f9916d99690$var$longmapsto,
    longrightarrow: $a8848f9916d99690$var$longrightarrow,
    LongRightArrow: $a8848f9916d99690$var$LongRightArrow,
    Longrightarrow: $a8848f9916d99690$var$Longrightarrow,
    looparrowleft: $a8848f9916d99690$var$looparrowleft,
    looparrowright: $a8848f9916d99690$var$looparrowright,
    lopar: $a8848f9916d99690$var$lopar,
    Lopf: $a8848f9916d99690$var$Lopf,
    lopf: $a8848f9916d99690$var$lopf,
    loplus: $a8848f9916d99690$var$loplus,
    lotimes: $a8848f9916d99690$var$lotimes,
    lowast: $a8848f9916d99690$var$lowast,
    lowbar: $a8848f9916d99690$var$lowbar,
    LowerLeftArrow: $a8848f9916d99690$var$LowerLeftArrow,
    LowerRightArrow: $a8848f9916d99690$var$LowerRightArrow,
    loz: $a8848f9916d99690$var$loz,
    lozenge: $a8848f9916d99690$var$lozenge,
    lozf: $a8848f9916d99690$var$lozf,
    lpar: $a8848f9916d99690$var$lpar,
    lparlt: $a8848f9916d99690$var$lparlt,
    lrarr: $a8848f9916d99690$var$lrarr,
    lrcorner: $a8848f9916d99690$var$lrcorner,
    lrhar: $a8848f9916d99690$var$lrhar,
    lrhard: $a8848f9916d99690$var$lrhard,
    lrm: $a8848f9916d99690$var$lrm,
    lrtri: $a8848f9916d99690$var$lrtri,
    lsaquo: $a8848f9916d99690$var$lsaquo,
    lscr: $a8848f9916d99690$var$lscr,
    Lscr: $a8848f9916d99690$var$Lscr,
    lsh: $a8848f9916d99690$var$lsh,
    Lsh: $a8848f9916d99690$var$Lsh,
    lsim: $a8848f9916d99690$var$lsim,
    lsime: $a8848f9916d99690$var$lsime,
    lsimg: $a8848f9916d99690$var$lsimg,
    lsqb: $a8848f9916d99690$var$lsqb,
    lsquo: $a8848f9916d99690$var$lsquo,
    lsquor: $a8848f9916d99690$var$lsquor,
    Lstrok: $a8848f9916d99690$var$Lstrok,
    lstrok: $a8848f9916d99690$var$lstrok,
    ltcc: $a8848f9916d99690$var$ltcc,
    ltcir: $a8848f9916d99690$var$ltcir,
    lt: $a8848f9916d99690$var$lt$2,
    LT: $a8848f9916d99690$var$LT$1,
    Lt: $a8848f9916d99690$var$Lt,
    ltdot: $a8848f9916d99690$var$ltdot,
    lthree: $a8848f9916d99690$var$lthree,
    ltimes: $a8848f9916d99690$var$ltimes,
    ltlarr: $a8848f9916d99690$var$ltlarr,
    ltquest: $a8848f9916d99690$var$ltquest,
    ltri: $a8848f9916d99690$var$ltri,
    ltrie: $a8848f9916d99690$var$ltrie,
    ltrif: $a8848f9916d99690$var$ltrif,
    ltrPar: $a8848f9916d99690$var$ltrPar,
    lurdshar: $a8848f9916d99690$var$lurdshar,
    luruhar: $a8848f9916d99690$var$luruhar,
    lvertneqq: $a8848f9916d99690$var$lvertneqq,
    lvnE: $a8848f9916d99690$var$lvnE,
    macr: $a8848f9916d99690$var$macr$1,
    male: $a8848f9916d99690$var$male,
    malt: $a8848f9916d99690$var$malt,
    maltese: $a8848f9916d99690$var$maltese,
    Map: "⤅",
    map: $a8848f9916d99690$var$map,
    mapsto: $a8848f9916d99690$var$mapsto,
    mapstodown: $a8848f9916d99690$var$mapstodown,
    mapstoleft: $a8848f9916d99690$var$mapstoleft,
    mapstoup: $a8848f9916d99690$var$mapstoup,
    marker: $a8848f9916d99690$var$marker,
    mcomma: $a8848f9916d99690$var$mcomma,
    Mcy: $a8848f9916d99690$var$Mcy,
    mcy: $a8848f9916d99690$var$mcy,
    mdash: $a8848f9916d99690$var$mdash,
    mDDot: $a8848f9916d99690$var$mDDot,
    measuredangle: $a8848f9916d99690$var$measuredangle,
    MediumSpace: $a8848f9916d99690$var$MediumSpace,
    Mellintrf: $a8848f9916d99690$var$Mellintrf,
    Mfr: $a8848f9916d99690$var$Mfr,
    mfr: $a8848f9916d99690$var$mfr,
    mho: $a8848f9916d99690$var$mho,
    micro: $a8848f9916d99690$var$micro$1,
    midast: $a8848f9916d99690$var$midast,
    midcir: $a8848f9916d99690$var$midcir,
    mid: $a8848f9916d99690$var$mid,
    middot: $a8848f9916d99690$var$middot$1,
    minusb: $a8848f9916d99690$var$minusb,
    minus: $a8848f9916d99690$var$minus$1,
    minusd: $a8848f9916d99690$var$minusd,
    minusdu: $a8848f9916d99690$var$minusdu,
    MinusPlus: $a8848f9916d99690$var$MinusPlus,
    mlcp: $a8848f9916d99690$var$mlcp,
    mldr: $a8848f9916d99690$var$mldr,
    mnplus: $a8848f9916d99690$var$mnplus,
    models: $a8848f9916d99690$var$models,
    Mopf: $a8848f9916d99690$var$Mopf,
    mopf: $a8848f9916d99690$var$mopf,
    mp: $a8848f9916d99690$var$mp,
    mscr: $a8848f9916d99690$var$mscr,
    Mscr: $a8848f9916d99690$var$Mscr,
    mstpos: $a8848f9916d99690$var$mstpos,
    Mu: $a8848f9916d99690$var$Mu,
    mu: $a8848f9916d99690$var$mu,
    multimap: $a8848f9916d99690$var$multimap,
    mumap: $a8848f9916d99690$var$mumap,
    nabla: $a8848f9916d99690$var$nabla,
    Nacute: $a8848f9916d99690$var$Nacute,
    nacute: $a8848f9916d99690$var$nacute,
    nang: $a8848f9916d99690$var$nang,
    nap: $a8848f9916d99690$var$nap,
    napE: $a8848f9916d99690$var$napE,
    napid: $a8848f9916d99690$var$napid,
    napos: $a8848f9916d99690$var$napos,
    napprox: $a8848f9916d99690$var$napprox,
    natural: $a8848f9916d99690$var$natural,
    naturals: $a8848f9916d99690$var$naturals,
    natur: $a8848f9916d99690$var$natur,
    nbsp: $a8848f9916d99690$var$nbsp$1,
    nbump: $a8848f9916d99690$var$nbump,
    nbumpe: $a8848f9916d99690$var$nbumpe,
    ncap: $a8848f9916d99690$var$ncap,
    Ncaron: $a8848f9916d99690$var$Ncaron,
    ncaron: $a8848f9916d99690$var$ncaron,
    Ncedil: $a8848f9916d99690$var$Ncedil,
    ncedil: $a8848f9916d99690$var$ncedil,
    ncong: $a8848f9916d99690$var$ncong,
    ncongdot: $a8848f9916d99690$var$ncongdot,
    ncup: $a8848f9916d99690$var$ncup,
    Ncy: $a8848f9916d99690$var$Ncy,
    ncy: $a8848f9916d99690$var$ncy,
    ndash: $a8848f9916d99690$var$ndash,
    nearhk: $a8848f9916d99690$var$nearhk,
    nearr: $a8848f9916d99690$var$nearr,
    neArr: $a8848f9916d99690$var$neArr,
    nearrow: $a8848f9916d99690$var$nearrow,
    ne: $a8848f9916d99690$var$ne,
    nedot: $a8848f9916d99690$var$nedot,
    NegativeMediumSpace: $a8848f9916d99690$var$NegativeMediumSpace,
    NegativeThickSpace: $a8848f9916d99690$var$NegativeThickSpace,
    NegativeThinSpace: $a8848f9916d99690$var$NegativeThinSpace,
    NegativeVeryThinSpace: $a8848f9916d99690$var$NegativeVeryThinSpace,
    nequiv: $a8848f9916d99690$var$nequiv,
    nesear: $a8848f9916d99690$var$nesear,
    nesim: $a8848f9916d99690$var$nesim,
    NestedGreaterGreater: $a8848f9916d99690$var$NestedGreaterGreater,
    NestedLessLess: $a8848f9916d99690$var$NestedLessLess,
    NewLine: $a8848f9916d99690$var$NewLine,
    nexist: $a8848f9916d99690$var$nexist,
    nexists: $a8848f9916d99690$var$nexists,
    Nfr: $a8848f9916d99690$var$Nfr,
    nfr: $a8848f9916d99690$var$nfr,
    ngE: $a8848f9916d99690$var$ngE,
    nge: $a8848f9916d99690$var$nge,
    ngeq: $a8848f9916d99690$var$ngeq,
    ngeqq: $a8848f9916d99690$var$ngeqq,
    ngeqslant: $a8848f9916d99690$var$ngeqslant,
    nges: $a8848f9916d99690$var$nges,
    nGg: $a8848f9916d99690$var$nGg,
    ngsim: $a8848f9916d99690$var$ngsim,
    nGt: $a8848f9916d99690$var$nGt,
    ngt: $a8848f9916d99690$var$ngt,
    ngtr: $a8848f9916d99690$var$ngtr,
    nGtv: $a8848f9916d99690$var$nGtv,
    nharr: $a8848f9916d99690$var$nharr,
    nhArr: $a8848f9916d99690$var$nhArr,
    nhpar: $a8848f9916d99690$var$nhpar,
    ni: $a8848f9916d99690$var$ni,
    nis: $a8848f9916d99690$var$nis,
    nisd: $a8848f9916d99690$var$nisd,
    niv: $a8848f9916d99690$var$niv,
    NJcy: $a8848f9916d99690$var$NJcy,
    njcy: $a8848f9916d99690$var$njcy,
    nlarr: $a8848f9916d99690$var$nlarr,
    nlArr: $a8848f9916d99690$var$nlArr,
    nldr: $a8848f9916d99690$var$nldr,
    nlE: $a8848f9916d99690$var$nlE,
    nle: $a8848f9916d99690$var$nle,
    nleftarrow: $a8848f9916d99690$var$nleftarrow,
    nLeftarrow: $a8848f9916d99690$var$nLeftarrow,
    nleftrightarrow: $a8848f9916d99690$var$nleftrightarrow,
    nLeftrightarrow: $a8848f9916d99690$var$nLeftrightarrow,
    nleq: $a8848f9916d99690$var$nleq,
    nleqq: $a8848f9916d99690$var$nleqq,
    nleqslant: $a8848f9916d99690$var$nleqslant,
    nles: $a8848f9916d99690$var$nles,
    nless: $a8848f9916d99690$var$nless,
    nLl: $a8848f9916d99690$var$nLl,
    nlsim: $a8848f9916d99690$var$nlsim,
    nLt: $a8848f9916d99690$var$nLt,
    nlt: $a8848f9916d99690$var$nlt,
    nltri: $a8848f9916d99690$var$nltri,
    nltrie: $a8848f9916d99690$var$nltrie,
    nLtv: $a8848f9916d99690$var$nLtv,
    nmid: $a8848f9916d99690$var$nmid,
    NoBreak: $a8848f9916d99690$var$NoBreak,
    NonBreakingSpace: $a8848f9916d99690$var$NonBreakingSpace,
    nopf: $a8848f9916d99690$var$nopf,
    Nopf: $a8848f9916d99690$var$Nopf,
    Not: $a8848f9916d99690$var$Not,
    not: $a8848f9916d99690$var$not$1,
    NotCongruent: $a8848f9916d99690$var$NotCongruent,
    NotCupCap: $a8848f9916d99690$var$NotCupCap,
    NotDoubleVerticalBar: $a8848f9916d99690$var$NotDoubleVerticalBar,
    NotElement: $a8848f9916d99690$var$NotElement,
    NotEqual: $a8848f9916d99690$var$NotEqual,
    NotEqualTilde: $a8848f9916d99690$var$NotEqualTilde,
    NotExists: $a8848f9916d99690$var$NotExists,
    NotGreater: $a8848f9916d99690$var$NotGreater,
    NotGreaterEqual: $a8848f9916d99690$var$NotGreaterEqual,
    NotGreaterFullEqual: $a8848f9916d99690$var$NotGreaterFullEqual,
    NotGreaterGreater: $a8848f9916d99690$var$NotGreaterGreater,
    NotGreaterLess: $a8848f9916d99690$var$NotGreaterLess,
    NotGreaterSlantEqual: $a8848f9916d99690$var$NotGreaterSlantEqual,
    NotGreaterTilde: $a8848f9916d99690$var$NotGreaterTilde,
    NotHumpDownHump: $a8848f9916d99690$var$NotHumpDownHump,
    NotHumpEqual: $a8848f9916d99690$var$NotHumpEqual,
    notin: $a8848f9916d99690$var$notin,
    notindot: $a8848f9916d99690$var$notindot,
    notinE: $a8848f9916d99690$var$notinE,
    notinva: $a8848f9916d99690$var$notinva,
    notinvb: $a8848f9916d99690$var$notinvb,
    notinvc: $a8848f9916d99690$var$notinvc,
    NotLeftTriangleBar: $a8848f9916d99690$var$NotLeftTriangleBar,
    NotLeftTriangle: $a8848f9916d99690$var$NotLeftTriangle,
    NotLeftTriangleEqual: $a8848f9916d99690$var$NotLeftTriangleEqual,
    NotLess: $a8848f9916d99690$var$NotLess,
    NotLessEqual: $a8848f9916d99690$var$NotLessEqual,
    NotLessGreater: $a8848f9916d99690$var$NotLessGreater,
    NotLessLess: $a8848f9916d99690$var$NotLessLess,
    NotLessSlantEqual: $a8848f9916d99690$var$NotLessSlantEqual,
    NotLessTilde: $a8848f9916d99690$var$NotLessTilde,
    NotNestedGreaterGreater: $a8848f9916d99690$var$NotNestedGreaterGreater,
    NotNestedLessLess: $a8848f9916d99690$var$NotNestedLessLess,
    notni: $a8848f9916d99690$var$notni,
    notniva: $a8848f9916d99690$var$notniva,
    notnivb: $a8848f9916d99690$var$notnivb,
    notnivc: $a8848f9916d99690$var$notnivc,
    NotPrecedes: $a8848f9916d99690$var$NotPrecedes,
    NotPrecedesEqual: $a8848f9916d99690$var$NotPrecedesEqual,
    NotPrecedesSlantEqual: $a8848f9916d99690$var$NotPrecedesSlantEqual,
    NotReverseElement: $a8848f9916d99690$var$NotReverseElement,
    NotRightTriangleBar: $a8848f9916d99690$var$NotRightTriangleBar,
    NotRightTriangle: $a8848f9916d99690$var$NotRightTriangle,
    NotRightTriangleEqual: $a8848f9916d99690$var$NotRightTriangleEqual,
    NotSquareSubset: $a8848f9916d99690$var$NotSquareSubset,
    NotSquareSubsetEqual: $a8848f9916d99690$var$NotSquareSubsetEqual,
    NotSquareSuperset: $a8848f9916d99690$var$NotSquareSuperset,
    NotSquareSupersetEqual: $a8848f9916d99690$var$NotSquareSupersetEqual,
    NotSubset: $a8848f9916d99690$var$NotSubset,
    NotSubsetEqual: $a8848f9916d99690$var$NotSubsetEqual,
    NotSucceeds: $a8848f9916d99690$var$NotSucceeds,
    NotSucceedsEqual: $a8848f9916d99690$var$NotSucceedsEqual,
    NotSucceedsSlantEqual: $a8848f9916d99690$var$NotSucceedsSlantEqual,
    NotSucceedsTilde: $a8848f9916d99690$var$NotSucceedsTilde,
    NotSuperset: $a8848f9916d99690$var$NotSuperset,
    NotSupersetEqual: $a8848f9916d99690$var$NotSupersetEqual,
    NotTilde: $a8848f9916d99690$var$NotTilde,
    NotTildeEqual: $a8848f9916d99690$var$NotTildeEqual,
    NotTildeFullEqual: $a8848f9916d99690$var$NotTildeFullEqual,
    NotTildeTilde: $a8848f9916d99690$var$NotTildeTilde,
    NotVerticalBar: $a8848f9916d99690$var$NotVerticalBar,
    nparallel: $a8848f9916d99690$var$nparallel,
    npar: $a8848f9916d99690$var$npar,
    nparsl: $a8848f9916d99690$var$nparsl,
    npart: $a8848f9916d99690$var$npart,
    npolint: $a8848f9916d99690$var$npolint,
    npr: $a8848f9916d99690$var$npr,
    nprcue: $a8848f9916d99690$var$nprcue,
    nprec: $a8848f9916d99690$var$nprec,
    npreceq: $a8848f9916d99690$var$npreceq,
    npre: $a8848f9916d99690$var$npre,
    nrarrc: $a8848f9916d99690$var$nrarrc,
    nrarr: $a8848f9916d99690$var$nrarr,
    nrArr: $a8848f9916d99690$var$nrArr,
    nrarrw: $a8848f9916d99690$var$nrarrw,
    nrightarrow: $a8848f9916d99690$var$nrightarrow,
    nRightarrow: $a8848f9916d99690$var$nRightarrow,
    nrtri: $a8848f9916d99690$var$nrtri,
    nrtrie: $a8848f9916d99690$var$nrtrie,
    nsc: $a8848f9916d99690$var$nsc,
    nsccue: $a8848f9916d99690$var$nsccue,
    nsce: $a8848f9916d99690$var$nsce,
    Nscr: $a8848f9916d99690$var$Nscr,
    nscr: $a8848f9916d99690$var$nscr,
    nshortmid: $a8848f9916d99690$var$nshortmid,
    nshortparallel: $a8848f9916d99690$var$nshortparallel,
    nsim: $a8848f9916d99690$var$nsim,
    nsime: $a8848f9916d99690$var$nsime,
    nsimeq: $a8848f9916d99690$var$nsimeq,
    nsmid: $a8848f9916d99690$var$nsmid,
    nspar: $a8848f9916d99690$var$nspar,
    nsqsube: $a8848f9916d99690$var$nsqsube,
    nsqsupe: $a8848f9916d99690$var$nsqsupe,
    nsub: $a8848f9916d99690$var$nsub,
    nsubE: $a8848f9916d99690$var$nsubE,
    nsube: $a8848f9916d99690$var$nsube,
    nsubset: $a8848f9916d99690$var$nsubset,
    nsubseteq: $a8848f9916d99690$var$nsubseteq,
    nsubseteqq: $a8848f9916d99690$var$nsubseteqq,
    nsucc: $a8848f9916d99690$var$nsucc,
    nsucceq: $a8848f9916d99690$var$nsucceq,
    nsup: $a8848f9916d99690$var$nsup,
    nsupE: $a8848f9916d99690$var$nsupE,
    nsupe: $a8848f9916d99690$var$nsupe,
    nsupset: $a8848f9916d99690$var$nsupset,
    nsupseteq: $a8848f9916d99690$var$nsupseteq,
    nsupseteqq: $a8848f9916d99690$var$nsupseteqq,
    ntgl: $a8848f9916d99690$var$ntgl,
    Ntilde: $a8848f9916d99690$var$Ntilde$1,
    ntilde: $a8848f9916d99690$var$ntilde$1,
    ntlg: $a8848f9916d99690$var$ntlg,
    ntriangleleft: $a8848f9916d99690$var$ntriangleleft,
    ntrianglelefteq: $a8848f9916d99690$var$ntrianglelefteq,
    ntriangleright: $a8848f9916d99690$var$ntriangleright,
    ntrianglerighteq: $a8848f9916d99690$var$ntrianglerighteq,
    Nu: $a8848f9916d99690$var$Nu,
    nu: $a8848f9916d99690$var$nu,
    num: $a8848f9916d99690$var$num,
    numero: $a8848f9916d99690$var$numero,
    numsp: $a8848f9916d99690$var$numsp,
    nvap: $a8848f9916d99690$var$nvap,
    nvdash: $a8848f9916d99690$var$nvdash,
    nvDash: $a8848f9916d99690$var$nvDash,
    nVdash: $a8848f9916d99690$var$nVdash,
    nVDash: $a8848f9916d99690$var$nVDash,
    nvge: $a8848f9916d99690$var$nvge,
    nvgt: $a8848f9916d99690$var$nvgt,
    nvHarr: $a8848f9916d99690$var$nvHarr,
    nvinfin: $a8848f9916d99690$var$nvinfin,
    nvlArr: $a8848f9916d99690$var$nvlArr,
    nvle: $a8848f9916d99690$var$nvle,
    nvlt: $a8848f9916d99690$var$nvlt,
    nvltrie: $a8848f9916d99690$var$nvltrie,
    nvrArr: $a8848f9916d99690$var$nvrArr,
    nvrtrie: $a8848f9916d99690$var$nvrtrie,
    nvsim: $a8848f9916d99690$var$nvsim,
    nwarhk: $a8848f9916d99690$var$nwarhk,
    nwarr: $a8848f9916d99690$var$nwarr,
    nwArr: $a8848f9916d99690$var$nwArr,
    nwarrow: $a8848f9916d99690$var$nwarrow,
    nwnear: $a8848f9916d99690$var$nwnear,
    Oacute: $a8848f9916d99690$var$Oacute$1,
    oacute: $a8848f9916d99690$var$oacute$1,
    oast: $a8848f9916d99690$var$oast,
    Ocirc: $a8848f9916d99690$var$Ocirc$1,
    ocirc: $a8848f9916d99690$var$ocirc$1,
    ocir: $a8848f9916d99690$var$ocir,
    Ocy: $a8848f9916d99690$var$Ocy,
    ocy: $a8848f9916d99690$var$ocy,
    odash: $a8848f9916d99690$var$odash,
    Odblac: $a8848f9916d99690$var$Odblac,
    odblac: $a8848f9916d99690$var$odblac,
    odiv: $a8848f9916d99690$var$odiv,
    odot: $a8848f9916d99690$var$odot,
    odsold: $a8848f9916d99690$var$odsold,
    OElig: $a8848f9916d99690$var$OElig,
    oelig: $a8848f9916d99690$var$oelig,
    ofcir: $a8848f9916d99690$var$ofcir,
    Ofr: $a8848f9916d99690$var$Ofr,
    ofr: $a8848f9916d99690$var$ofr,
    ogon: $a8848f9916d99690$var$ogon,
    Ograve: $a8848f9916d99690$var$Ograve$1,
    ograve: $a8848f9916d99690$var$ograve$1,
    ogt: $a8848f9916d99690$var$ogt,
    ohbar: $a8848f9916d99690$var$ohbar,
    ohm: $a8848f9916d99690$var$ohm,
    oint: $a8848f9916d99690$var$oint,
    olarr: $a8848f9916d99690$var$olarr,
    olcir: $a8848f9916d99690$var$olcir,
    olcross: $a8848f9916d99690$var$olcross,
    oline: $a8848f9916d99690$var$oline,
    olt: $a8848f9916d99690$var$olt,
    Omacr: $a8848f9916d99690$var$Omacr,
    omacr: $a8848f9916d99690$var$omacr,
    Omega: $a8848f9916d99690$var$Omega,
    omega: $a8848f9916d99690$var$omega,
    Omicron: $a8848f9916d99690$var$Omicron,
    omicron: $a8848f9916d99690$var$omicron,
    omid: $a8848f9916d99690$var$omid,
    ominus: $a8848f9916d99690$var$ominus,
    Oopf: $a8848f9916d99690$var$Oopf,
    oopf: $a8848f9916d99690$var$oopf,
    opar: $a8848f9916d99690$var$opar,
    OpenCurlyDoubleQuote: $a8848f9916d99690$var$OpenCurlyDoubleQuote,
    OpenCurlyQuote: $a8848f9916d99690$var$OpenCurlyQuote,
    operp: $a8848f9916d99690$var$operp,
    oplus: $a8848f9916d99690$var$oplus,
    orarr: $a8848f9916d99690$var$orarr,
    Or: $a8848f9916d99690$var$Or,
    or: $a8848f9916d99690$var$or,
    ord: $a8848f9916d99690$var$ord,
    order: $a8848f9916d99690$var$order,
    orderof: $a8848f9916d99690$var$orderof,
    ordf: $a8848f9916d99690$var$ordf$1,
    ordm: $a8848f9916d99690$var$ordm$1,
    origof: $a8848f9916d99690$var$origof,
    oror: $a8848f9916d99690$var$oror,
    orslope: $a8848f9916d99690$var$orslope,
    orv: $a8848f9916d99690$var$orv,
    oS: $a8848f9916d99690$var$oS,
    Oscr: $a8848f9916d99690$var$Oscr,
    oscr: $a8848f9916d99690$var$oscr,
    Oslash: $a8848f9916d99690$var$Oslash$1,
    oslash: $a8848f9916d99690$var$oslash$1,
    osol: $a8848f9916d99690$var$osol,
    Otilde: $a8848f9916d99690$var$Otilde$1,
    otilde: $a8848f9916d99690$var$otilde$1,
    otimesas: $a8848f9916d99690$var$otimesas,
    Otimes: $a8848f9916d99690$var$Otimes,
    otimes: $a8848f9916d99690$var$otimes,
    Ouml: $a8848f9916d99690$var$Ouml$1,
    ouml: $a8848f9916d99690$var$ouml$1,
    ovbar: $a8848f9916d99690$var$ovbar,
    OverBar: $a8848f9916d99690$var$OverBar,
    OverBrace: $a8848f9916d99690$var$OverBrace,
    OverBracket: $a8848f9916d99690$var$OverBracket,
    OverParenthesis: $a8848f9916d99690$var$OverParenthesis,
    para: $a8848f9916d99690$var$para$1,
    parallel: $a8848f9916d99690$var$parallel,
    par: $a8848f9916d99690$var$par,
    parsim: $a8848f9916d99690$var$parsim,
    parsl: $a8848f9916d99690$var$parsl,
    part: $a8848f9916d99690$var$part,
    PartialD: $a8848f9916d99690$var$PartialD,
    Pcy: $a8848f9916d99690$var$Pcy,
    pcy: $a8848f9916d99690$var$pcy,
    percnt: $a8848f9916d99690$var$percnt,
    period: $a8848f9916d99690$var$period,
    permil: $a8848f9916d99690$var$permil,
    perp: $a8848f9916d99690$var$perp,
    pertenk: $a8848f9916d99690$var$pertenk,
    Pfr: $a8848f9916d99690$var$Pfr,
    pfr: $a8848f9916d99690$var$pfr,
    Phi: $a8848f9916d99690$var$Phi,
    phi: $a8848f9916d99690$var$phi,
    phiv: $a8848f9916d99690$var$phiv,
    phmmat: $a8848f9916d99690$var$phmmat,
    phone: $a8848f9916d99690$var$phone,
    Pi: $a8848f9916d99690$var$Pi,
    pi: $a8848f9916d99690$var$pi,
    pitchfork: $a8848f9916d99690$var$pitchfork,
    piv: $a8848f9916d99690$var$piv,
    planck: $a8848f9916d99690$var$planck,
    planckh: $a8848f9916d99690$var$planckh,
    plankv: $a8848f9916d99690$var$plankv,
    plusacir: $a8848f9916d99690$var$plusacir,
    plusb: $a8848f9916d99690$var$plusb,
    pluscir: $a8848f9916d99690$var$pluscir,
    plus: $a8848f9916d99690$var$plus,
    plusdo: $a8848f9916d99690$var$plusdo,
    plusdu: $a8848f9916d99690$var$plusdu,
    pluse: $a8848f9916d99690$var$pluse,
    PlusMinus: $a8848f9916d99690$var$PlusMinus,
    plusmn: $a8848f9916d99690$var$plusmn$1,
    plussim: $a8848f9916d99690$var$plussim,
    plustwo: $a8848f9916d99690$var$plustwo,
    pm: $a8848f9916d99690$var$pm,
    Poincareplane: $a8848f9916d99690$var$Poincareplane,
    pointint: $a8848f9916d99690$var$pointint,
    popf: $a8848f9916d99690$var$popf,
    Popf: $a8848f9916d99690$var$Popf,
    pound: $a8848f9916d99690$var$pound$1,
    prap: $a8848f9916d99690$var$prap,
    Pr: $a8848f9916d99690$var$Pr,
    pr: $a8848f9916d99690$var$pr,
    prcue: $a8848f9916d99690$var$prcue,
    precapprox: $a8848f9916d99690$var$precapprox,
    prec: $a8848f9916d99690$var$prec,
    preccurlyeq: $a8848f9916d99690$var$preccurlyeq,
    Precedes: $a8848f9916d99690$var$Precedes,
    PrecedesEqual: $a8848f9916d99690$var$PrecedesEqual,
    PrecedesSlantEqual: $a8848f9916d99690$var$PrecedesSlantEqual,
    PrecedesTilde: $a8848f9916d99690$var$PrecedesTilde,
    preceq: $a8848f9916d99690$var$preceq,
    precnapprox: $a8848f9916d99690$var$precnapprox,
    precneqq: $a8848f9916d99690$var$precneqq,
    precnsim: $a8848f9916d99690$var$precnsim,
    pre: $a8848f9916d99690$var$pre,
    prE: $a8848f9916d99690$var$prE,
    precsim: $a8848f9916d99690$var$precsim,
    prime: $a8848f9916d99690$var$prime,
    Prime: $a8848f9916d99690$var$Prime,
    primes: $a8848f9916d99690$var$primes,
    prnap: $a8848f9916d99690$var$prnap,
    prnE: $a8848f9916d99690$var$prnE,
    prnsim: $a8848f9916d99690$var$prnsim,
    prod: $a8848f9916d99690$var$prod,
    Product: $a8848f9916d99690$var$Product,
    profalar: $a8848f9916d99690$var$profalar,
    profline: $a8848f9916d99690$var$profline,
    profsurf: $a8848f9916d99690$var$profsurf,
    prop: $a8848f9916d99690$var$prop,
    Proportional: $a8848f9916d99690$var$Proportional,
    Proportion: $a8848f9916d99690$var$Proportion,
    propto: $a8848f9916d99690$var$propto,
    prsim: $a8848f9916d99690$var$prsim,
    prurel: $a8848f9916d99690$var$prurel,
    Pscr: $a8848f9916d99690$var$Pscr,
    pscr: $a8848f9916d99690$var$pscr,
    Psi: $a8848f9916d99690$var$Psi,
    psi: $a8848f9916d99690$var$psi,
    puncsp: $a8848f9916d99690$var$puncsp,
    Qfr: $a8848f9916d99690$var$Qfr,
    qfr: $a8848f9916d99690$var$qfr,
    qint: $a8848f9916d99690$var$qint,
    qopf: $a8848f9916d99690$var$qopf,
    Qopf: $a8848f9916d99690$var$Qopf,
    qprime: $a8848f9916d99690$var$qprime,
    Qscr: $a8848f9916d99690$var$Qscr,
    qscr: $a8848f9916d99690$var$qscr,
    quaternions: $a8848f9916d99690$var$quaternions,
    quatint: $a8848f9916d99690$var$quatint,
    quest: $a8848f9916d99690$var$quest,
    questeq: $a8848f9916d99690$var$questeq,
    quot: $a8848f9916d99690$var$quot$2,
    QUOT: $a8848f9916d99690$var$QUOT$1,
    rAarr: $a8848f9916d99690$var$rAarr,
    race: $a8848f9916d99690$var$race,
    Racute: $a8848f9916d99690$var$Racute,
    racute: $a8848f9916d99690$var$racute,
    radic: $a8848f9916d99690$var$radic,
    raemptyv: $a8848f9916d99690$var$raemptyv,
    rang: $a8848f9916d99690$var$rang,
    Rang: $a8848f9916d99690$var$Rang,
    rangd: $a8848f9916d99690$var$rangd,
    range: $a8848f9916d99690$var$range,
    rangle: $a8848f9916d99690$var$rangle,
    raquo: $a8848f9916d99690$var$raquo$1,
    rarrap: $a8848f9916d99690$var$rarrap,
    rarrb: $a8848f9916d99690$var$rarrb,
    rarrbfs: $a8848f9916d99690$var$rarrbfs,
    rarrc: $a8848f9916d99690$var$rarrc,
    rarr: $a8848f9916d99690$var$rarr,
    Rarr: $a8848f9916d99690$var$Rarr,
    rArr: $a8848f9916d99690$var$rArr,
    rarrfs: $a8848f9916d99690$var$rarrfs,
    rarrhk: $a8848f9916d99690$var$rarrhk,
    rarrlp: $a8848f9916d99690$var$rarrlp,
    rarrpl: $a8848f9916d99690$var$rarrpl,
    rarrsim: $a8848f9916d99690$var$rarrsim,
    Rarrtl: $a8848f9916d99690$var$Rarrtl,
    rarrtl: $a8848f9916d99690$var$rarrtl,
    rarrw: $a8848f9916d99690$var$rarrw,
    ratail: $a8848f9916d99690$var$ratail,
    rAtail: $a8848f9916d99690$var$rAtail,
    ratio: $a8848f9916d99690$var$ratio,
    rationals: $a8848f9916d99690$var$rationals,
    rbarr: $a8848f9916d99690$var$rbarr,
    rBarr: $a8848f9916d99690$var$rBarr,
    RBarr: $a8848f9916d99690$var$RBarr,
    rbbrk: $a8848f9916d99690$var$rbbrk,
    rbrace: $a8848f9916d99690$var$rbrace,
    rbrack: $a8848f9916d99690$var$rbrack,
    rbrke: $a8848f9916d99690$var$rbrke,
    rbrksld: $a8848f9916d99690$var$rbrksld,
    rbrkslu: $a8848f9916d99690$var$rbrkslu,
    Rcaron: $a8848f9916d99690$var$Rcaron,
    rcaron: $a8848f9916d99690$var$rcaron,
    Rcedil: $a8848f9916d99690$var$Rcedil,
    rcedil: $a8848f9916d99690$var$rcedil,
    rceil: $a8848f9916d99690$var$rceil,
    rcub: $a8848f9916d99690$var$rcub,
    Rcy: $a8848f9916d99690$var$Rcy,
    rcy: $a8848f9916d99690$var$rcy,
    rdca: $a8848f9916d99690$var$rdca,
    rdldhar: $a8848f9916d99690$var$rdldhar,
    rdquo: $a8848f9916d99690$var$rdquo,
    rdquor: $a8848f9916d99690$var$rdquor,
    rdsh: $a8848f9916d99690$var$rdsh,
    real: $a8848f9916d99690$var$real,
    realine: $a8848f9916d99690$var$realine,
    realpart: $a8848f9916d99690$var$realpart,
    reals: $a8848f9916d99690$var$reals,
    Re: $a8848f9916d99690$var$Re,
    rect: $a8848f9916d99690$var$rect,
    reg: $a8848f9916d99690$var$reg$1,
    REG: $a8848f9916d99690$var$REG$1,
    ReverseElement: $a8848f9916d99690$var$ReverseElement,
    ReverseEquilibrium: $a8848f9916d99690$var$ReverseEquilibrium,
    ReverseUpEquilibrium: $a8848f9916d99690$var$ReverseUpEquilibrium,
    rfisht: $a8848f9916d99690$var$rfisht,
    rfloor: $a8848f9916d99690$var$rfloor,
    rfr: $a8848f9916d99690$var$rfr,
    Rfr: $a8848f9916d99690$var$Rfr,
    rHar: $a8848f9916d99690$var$rHar,
    rhard: $a8848f9916d99690$var$rhard,
    rharu: $a8848f9916d99690$var$rharu,
    rharul: $a8848f9916d99690$var$rharul,
    Rho: $a8848f9916d99690$var$Rho,
    rho: $a8848f9916d99690$var$rho,
    rhov: $a8848f9916d99690$var$rhov,
    RightAngleBracket: $a8848f9916d99690$var$RightAngleBracket,
    RightArrowBar: $a8848f9916d99690$var$RightArrowBar,
    rightarrow: $a8848f9916d99690$var$rightarrow,
    RightArrow: $a8848f9916d99690$var$RightArrow,
    Rightarrow: $a8848f9916d99690$var$Rightarrow,
    RightArrowLeftArrow: $a8848f9916d99690$var$RightArrowLeftArrow,
    rightarrowtail: $a8848f9916d99690$var$rightarrowtail,
    RightCeiling: $a8848f9916d99690$var$RightCeiling,
    RightDoubleBracket: $a8848f9916d99690$var$RightDoubleBracket,
    RightDownTeeVector: $a8848f9916d99690$var$RightDownTeeVector,
    RightDownVectorBar: $a8848f9916d99690$var$RightDownVectorBar,
    RightDownVector: $a8848f9916d99690$var$RightDownVector,
    RightFloor: $a8848f9916d99690$var$RightFloor,
    rightharpoondown: $a8848f9916d99690$var$rightharpoondown,
    rightharpoonup: $a8848f9916d99690$var$rightharpoonup,
    rightleftarrows: $a8848f9916d99690$var$rightleftarrows,
    rightleftharpoons: $a8848f9916d99690$var$rightleftharpoons,
    rightrightarrows: $a8848f9916d99690$var$rightrightarrows,
    rightsquigarrow: $a8848f9916d99690$var$rightsquigarrow,
    RightTeeArrow: $a8848f9916d99690$var$RightTeeArrow,
    RightTee: $a8848f9916d99690$var$RightTee,
    RightTeeVector: $a8848f9916d99690$var$RightTeeVector,
    rightthreetimes: $a8848f9916d99690$var$rightthreetimes,
    RightTriangleBar: $a8848f9916d99690$var$RightTriangleBar,
    RightTriangle: $a8848f9916d99690$var$RightTriangle,
    RightTriangleEqual: $a8848f9916d99690$var$RightTriangleEqual,
    RightUpDownVector: $a8848f9916d99690$var$RightUpDownVector,
    RightUpTeeVector: $a8848f9916d99690$var$RightUpTeeVector,
    RightUpVectorBar: $a8848f9916d99690$var$RightUpVectorBar,
    RightUpVector: $a8848f9916d99690$var$RightUpVector,
    RightVectorBar: $a8848f9916d99690$var$RightVectorBar,
    RightVector: $a8848f9916d99690$var$RightVector,
    ring: $a8848f9916d99690$var$ring,
    risingdotseq: $a8848f9916d99690$var$risingdotseq,
    rlarr: $a8848f9916d99690$var$rlarr,
    rlhar: $a8848f9916d99690$var$rlhar,
    rlm: $a8848f9916d99690$var$rlm,
    rmoustache: $a8848f9916d99690$var$rmoustache,
    rmoust: $a8848f9916d99690$var$rmoust,
    rnmid: $a8848f9916d99690$var$rnmid,
    roang: $a8848f9916d99690$var$roang,
    roarr: $a8848f9916d99690$var$roarr,
    robrk: $a8848f9916d99690$var$robrk,
    ropar: $a8848f9916d99690$var$ropar,
    ropf: $a8848f9916d99690$var$ropf,
    Ropf: $a8848f9916d99690$var$Ropf,
    roplus: $a8848f9916d99690$var$roplus,
    rotimes: $a8848f9916d99690$var$rotimes,
    RoundImplies: $a8848f9916d99690$var$RoundImplies,
    rpar: $a8848f9916d99690$var$rpar,
    rpargt: $a8848f9916d99690$var$rpargt,
    rppolint: $a8848f9916d99690$var$rppolint,
    rrarr: $a8848f9916d99690$var$rrarr,
    Rrightarrow: $a8848f9916d99690$var$Rrightarrow,
    rsaquo: $a8848f9916d99690$var$rsaquo,
    rscr: $a8848f9916d99690$var$rscr,
    Rscr: $a8848f9916d99690$var$Rscr,
    rsh: $a8848f9916d99690$var$rsh,
    Rsh: $a8848f9916d99690$var$Rsh,
    rsqb: $a8848f9916d99690$var$rsqb,
    rsquo: $a8848f9916d99690$var$rsquo,
    rsquor: $a8848f9916d99690$var$rsquor,
    rthree: $a8848f9916d99690$var$rthree,
    rtimes: $a8848f9916d99690$var$rtimes,
    rtri: $a8848f9916d99690$var$rtri,
    rtrie: $a8848f9916d99690$var$rtrie,
    rtrif: $a8848f9916d99690$var$rtrif,
    rtriltri: $a8848f9916d99690$var$rtriltri,
    RuleDelayed: $a8848f9916d99690$var$RuleDelayed,
    ruluhar: $a8848f9916d99690$var$ruluhar,
    rx: $a8848f9916d99690$var$rx,
    Sacute: $a8848f9916d99690$var$Sacute,
    sacute: $a8848f9916d99690$var$sacute,
    sbquo: $a8848f9916d99690$var$sbquo,
    scap: $a8848f9916d99690$var$scap,
    Scaron: $a8848f9916d99690$var$Scaron,
    scaron: $a8848f9916d99690$var$scaron,
    Sc: $a8848f9916d99690$var$Sc,
    sc: $a8848f9916d99690$var$sc,
    sccue: $a8848f9916d99690$var$sccue,
    sce: $a8848f9916d99690$var$sce,
    scE: $a8848f9916d99690$var$scE,
    Scedil: $a8848f9916d99690$var$Scedil,
    scedil: $a8848f9916d99690$var$scedil,
    Scirc: $a8848f9916d99690$var$Scirc,
    scirc: $a8848f9916d99690$var$scirc,
    scnap: $a8848f9916d99690$var$scnap,
    scnE: $a8848f9916d99690$var$scnE,
    scnsim: $a8848f9916d99690$var$scnsim,
    scpolint: $a8848f9916d99690$var$scpolint,
    scsim: $a8848f9916d99690$var$scsim,
    Scy: $a8848f9916d99690$var$Scy,
    scy: $a8848f9916d99690$var$scy,
    sdotb: $a8848f9916d99690$var$sdotb,
    sdot: $a8848f9916d99690$var$sdot,
    sdote: $a8848f9916d99690$var$sdote,
    searhk: $a8848f9916d99690$var$searhk,
    searr: $a8848f9916d99690$var$searr,
    seArr: $a8848f9916d99690$var$seArr,
    searrow: $a8848f9916d99690$var$searrow,
    sect: $a8848f9916d99690$var$sect$1,
    semi: $a8848f9916d99690$var$semi,
    seswar: $a8848f9916d99690$var$seswar,
    setminus: $a8848f9916d99690$var$setminus,
    setmn: $a8848f9916d99690$var$setmn,
    sext: $a8848f9916d99690$var$sext,
    Sfr: $a8848f9916d99690$var$Sfr,
    sfr: $a8848f9916d99690$var$sfr,
    sfrown: $a8848f9916d99690$var$sfrown,
    sharp: $a8848f9916d99690$var$sharp,
    SHCHcy: $a8848f9916d99690$var$SHCHcy,
    shchcy: $a8848f9916d99690$var$shchcy,
    SHcy: $a8848f9916d99690$var$SHcy,
    shcy: $a8848f9916d99690$var$shcy,
    ShortDownArrow: $a8848f9916d99690$var$ShortDownArrow,
    ShortLeftArrow: $a8848f9916d99690$var$ShortLeftArrow,
    shortmid: $a8848f9916d99690$var$shortmid,
    shortparallel: $a8848f9916d99690$var$shortparallel,
    ShortRightArrow: $a8848f9916d99690$var$ShortRightArrow,
    ShortUpArrow: $a8848f9916d99690$var$ShortUpArrow,
    shy: $a8848f9916d99690$var$shy$1,
    Sigma: $a8848f9916d99690$var$Sigma,
    sigma: $a8848f9916d99690$var$sigma,
    sigmaf: $a8848f9916d99690$var$sigmaf,
    sigmav: $a8848f9916d99690$var$sigmav,
    sim: $a8848f9916d99690$var$sim,
    simdot: $a8848f9916d99690$var$simdot,
    sime: $a8848f9916d99690$var$sime,
    simeq: $a8848f9916d99690$var$simeq,
    simg: $a8848f9916d99690$var$simg,
    simgE: $a8848f9916d99690$var$simgE,
    siml: $a8848f9916d99690$var$siml,
    simlE: $a8848f9916d99690$var$simlE,
    simne: $a8848f9916d99690$var$simne,
    simplus: $a8848f9916d99690$var$simplus,
    simrarr: $a8848f9916d99690$var$simrarr,
    slarr: $a8848f9916d99690$var$slarr,
    SmallCircle: $a8848f9916d99690$var$SmallCircle,
    smallsetminus: $a8848f9916d99690$var$smallsetminus,
    smashp: $a8848f9916d99690$var$smashp,
    smeparsl: $a8848f9916d99690$var$smeparsl,
    smid: $a8848f9916d99690$var$smid,
    smile: $a8848f9916d99690$var$smile,
    smt: $a8848f9916d99690$var$smt,
    smte: $a8848f9916d99690$var$smte,
    smtes: $a8848f9916d99690$var$smtes,
    SOFTcy: $a8848f9916d99690$var$SOFTcy,
    softcy: $a8848f9916d99690$var$softcy,
    solbar: $a8848f9916d99690$var$solbar,
    solb: $a8848f9916d99690$var$solb,
    sol: $a8848f9916d99690$var$sol,
    Sopf: $a8848f9916d99690$var$Sopf,
    sopf: $a8848f9916d99690$var$sopf,
    spades: $a8848f9916d99690$var$spades,
    spadesuit: $a8848f9916d99690$var$spadesuit,
    spar: $a8848f9916d99690$var$spar,
    sqcap: $a8848f9916d99690$var$sqcap,
    sqcaps: $a8848f9916d99690$var$sqcaps,
    sqcup: $a8848f9916d99690$var$sqcup,
    sqcups: $a8848f9916d99690$var$sqcups,
    Sqrt: $a8848f9916d99690$var$Sqrt,
    sqsub: $a8848f9916d99690$var$sqsub,
    sqsube: $a8848f9916d99690$var$sqsube,
    sqsubset: $a8848f9916d99690$var$sqsubset,
    sqsubseteq: $a8848f9916d99690$var$sqsubseteq,
    sqsup: $a8848f9916d99690$var$sqsup,
    sqsupe: $a8848f9916d99690$var$sqsupe,
    sqsupset: $a8848f9916d99690$var$sqsupset,
    sqsupseteq: $a8848f9916d99690$var$sqsupseteq,
    square: $a8848f9916d99690$var$square,
    Square: $a8848f9916d99690$var$Square,
    SquareIntersection: $a8848f9916d99690$var$SquareIntersection,
    SquareSubset: $a8848f9916d99690$var$SquareSubset,
    SquareSubsetEqual: $a8848f9916d99690$var$SquareSubsetEqual,
    SquareSuperset: $a8848f9916d99690$var$SquareSuperset,
    SquareSupersetEqual: $a8848f9916d99690$var$SquareSupersetEqual,
    SquareUnion: $a8848f9916d99690$var$SquareUnion,
    squarf: $a8848f9916d99690$var$squarf,
    squ: $a8848f9916d99690$var$squ,
    squf: $a8848f9916d99690$var$squf,
    srarr: $a8848f9916d99690$var$srarr,
    Sscr: $a8848f9916d99690$var$Sscr,
    sscr: $a8848f9916d99690$var$sscr,
    ssetmn: $a8848f9916d99690$var$ssetmn,
    ssmile: $a8848f9916d99690$var$ssmile,
    sstarf: $a8848f9916d99690$var$sstarf,
    Star: $a8848f9916d99690$var$Star,
    star: $a8848f9916d99690$var$star,
    starf: $a8848f9916d99690$var$starf,
    straightepsilon: $a8848f9916d99690$var$straightepsilon,
    straightphi: $a8848f9916d99690$var$straightphi,
    strns: $a8848f9916d99690$var$strns,
    sub: $a8848f9916d99690$var$sub$1,
    Sub: $a8848f9916d99690$var$Sub,
    subdot: $a8848f9916d99690$var$subdot,
    subE: $a8848f9916d99690$var$subE,
    sube: $a8848f9916d99690$var$sube,
    subedot: $a8848f9916d99690$var$subedot,
    submult: $a8848f9916d99690$var$submult,
    subnE: $a8848f9916d99690$var$subnE,
    subne: $a8848f9916d99690$var$subne,
    subplus: $a8848f9916d99690$var$subplus,
    subrarr: $a8848f9916d99690$var$subrarr,
    subset: $a8848f9916d99690$var$subset,
    Subset: $a8848f9916d99690$var$Subset,
    subseteq: $a8848f9916d99690$var$subseteq,
    subseteqq: $a8848f9916d99690$var$subseteqq,
    SubsetEqual: $a8848f9916d99690$var$SubsetEqual,
    subsetneq: $a8848f9916d99690$var$subsetneq,
    subsetneqq: $a8848f9916d99690$var$subsetneqq,
    subsim: $a8848f9916d99690$var$subsim,
    subsub: $a8848f9916d99690$var$subsub,
    subsup: $a8848f9916d99690$var$subsup,
    succapprox: $a8848f9916d99690$var$succapprox,
    succ: $a8848f9916d99690$var$succ,
    succcurlyeq: $a8848f9916d99690$var$succcurlyeq,
    Succeeds: $a8848f9916d99690$var$Succeeds,
    SucceedsEqual: $a8848f9916d99690$var$SucceedsEqual,
    SucceedsSlantEqual: $a8848f9916d99690$var$SucceedsSlantEqual,
    SucceedsTilde: $a8848f9916d99690$var$SucceedsTilde,
    succeq: $a8848f9916d99690$var$succeq,
    succnapprox: $a8848f9916d99690$var$succnapprox,
    succneqq: $a8848f9916d99690$var$succneqq,
    succnsim: $a8848f9916d99690$var$succnsim,
    succsim: $a8848f9916d99690$var$succsim,
    SuchThat: $a8848f9916d99690$var$SuchThat,
    sum: $a8848f9916d99690$var$sum,
    Sum: $a8848f9916d99690$var$Sum,
    sung: $a8848f9916d99690$var$sung,
    sup1: $a8848f9916d99690$var$sup1$1,
    sup2: $a8848f9916d99690$var$sup2$1,
    sup3: $a8848f9916d99690$var$sup3$1,
    sup: $a8848f9916d99690$var$sup,
    Sup: $a8848f9916d99690$var$Sup,
    supdot: $a8848f9916d99690$var$supdot,
    supdsub: $a8848f9916d99690$var$supdsub,
    supE: $a8848f9916d99690$var$supE,
    supe: $a8848f9916d99690$var$supe,
    supedot: $a8848f9916d99690$var$supedot,
    Superset: $a8848f9916d99690$var$Superset,
    SupersetEqual: $a8848f9916d99690$var$SupersetEqual,
    suphsol: $a8848f9916d99690$var$suphsol,
    suphsub: $a8848f9916d99690$var$suphsub,
    suplarr: $a8848f9916d99690$var$suplarr,
    supmult: $a8848f9916d99690$var$supmult,
    supnE: $a8848f9916d99690$var$supnE,
    supne: $a8848f9916d99690$var$supne,
    supplus: $a8848f9916d99690$var$supplus,
    supset: $a8848f9916d99690$var$supset,
    Supset: $a8848f9916d99690$var$Supset,
    supseteq: $a8848f9916d99690$var$supseteq,
    supseteqq: $a8848f9916d99690$var$supseteqq,
    supsetneq: $a8848f9916d99690$var$supsetneq,
    supsetneqq: $a8848f9916d99690$var$supsetneqq,
    supsim: $a8848f9916d99690$var$supsim,
    supsub: $a8848f9916d99690$var$supsub,
    supsup: $a8848f9916d99690$var$supsup,
    swarhk: $a8848f9916d99690$var$swarhk,
    swarr: $a8848f9916d99690$var$swarr,
    swArr: $a8848f9916d99690$var$swArr,
    swarrow: $a8848f9916d99690$var$swarrow,
    swnwar: $a8848f9916d99690$var$swnwar,
    szlig: $a8848f9916d99690$var$szlig$1,
    Tab: $a8848f9916d99690$var$Tab,
    target: $a8848f9916d99690$var$target,
    Tau: $a8848f9916d99690$var$Tau,
    tau: $a8848f9916d99690$var$tau,
    tbrk: $a8848f9916d99690$var$tbrk,
    Tcaron: $a8848f9916d99690$var$Tcaron,
    tcaron: $a8848f9916d99690$var$tcaron,
    Tcedil: $a8848f9916d99690$var$Tcedil,
    tcedil: $a8848f9916d99690$var$tcedil,
    Tcy: $a8848f9916d99690$var$Tcy,
    tcy: $a8848f9916d99690$var$tcy,
    tdot: $a8848f9916d99690$var$tdot,
    telrec: $a8848f9916d99690$var$telrec,
    Tfr: $a8848f9916d99690$var$Tfr,
    tfr: $a8848f9916d99690$var$tfr,
    there4: $a8848f9916d99690$var$there4,
    therefore: $a8848f9916d99690$var$therefore,
    Therefore: $a8848f9916d99690$var$Therefore,
    Theta: $a8848f9916d99690$var$Theta,
    theta: $a8848f9916d99690$var$theta,
    thetasym: $a8848f9916d99690$var$thetasym,
    thetav: $a8848f9916d99690$var$thetav,
    thickapprox: $a8848f9916d99690$var$thickapprox,
    thicksim: $a8848f9916d99690$var$thicksim,
    ThickSpace: $a8848f9916d99690$var$ThickSpace,
    ThinSpace: $a8848f9916d99690$var$ThinSpace,
    thinsp: $a8848f9916d99690$var$thinsp,
    thkap: $a8848f9916d99690$var$thkap,
    thksim: $a8848f9916d99690$var$thksim,
    THORN: $a8848f9916d99690$var$THORN$1,
    thorn: $a8848f9916d99690$var$thorn$1,
    tilde: $a8848f9916d99690$var$tilde,
    Tilde: $a8848f9916d99690$var$Tilde,
    TildeEqual: $a8848f9916d99690$var$TildeEqual,
    TildeFullEqual: $a8848f9916d99690$var$TildeFullEqual,
    TildeTilde: $a8848f9916d99690$var$TildeTilde,
    timesbar: $a8848f9916d99690$var$timesbar,
    timesb: $a8848f9916d99690$var$timesb,
    times: $a8848f9916d99690$var$times$1,
    timesd: $a8848f9916d99690$var$timesd,
    tint: $a8848f9916d99690$var$tint,
    toea: $a8848f9916d99690$var$toea,
    topbot: $a8848f9916d99690$var$topbot,
    topcir: $a8848f9916d99690$var$topcir,
    top: $a8848f9916d99690$var$top,
    Topf: $a8848f9916d99690$var$Topf,
    topf: $a8848f9916d99690$var$topf,
    topfork: $a8848f9916d99690$var$topfork,
    tosa: $a8848f9916d99690$var$tosa,
    tprime: $a8848f9916d99690$var$tprime,
    trade: $a8848f9916d99690$var$trade,
    TRADE: $a8848f9916d99690$var$TRADE,
    triangle: $a8848f9916d99690$var$triangle,
    triangledown: $a8848f9916d99690$var$triangledown,
    triangleleft: $a8848f9916d99690$var$triangleleft,
    trianglelefteq: $a8848f9916d99690$var$trianglelefteq,
    triangleq: $a8848f9916d99690$var$triangleq,
    triangleright: $a8848f9916d99690$var$triangleright,
    trianglerighteq: $a8848f9916d99690$var$trianglerighteq,
    tridot: $a8848f9916d99690$var$tridot,
    trie: $a8848f9916d99690$var$trie,
    triminus: $a8848f9916d99690$var$triminus,
    TripleDot: $a8848f9916d99690$var$TripleDot,
    triplus: $a8848f9916d99690$var$triplus,
    trisb: $a8848f9916d99690$var$trisb,
    tritime: $a8848f9916d99690$var$tritime,
    trpezium: $a8848f9916d99690$var$trpezium,
    Tscr: $a8848f9916d99690$var$Tscr,
    tscr: $a8848f9916d99690$var$tscr,
    TScy: $a8848f9916d99690$var$TScy,
    tscy: $a8848f9916d99690$var$tscy,
    TSHcy: $a8848f9916d99690$var$TSHcy,
    tshcy: $a8848f9916d99690$var$tshcy,
    Tstrok: $a8848f9916d99690$var$Tstrok,
    tstrok: $a8848f9916d99690$var$tstrok,
    twixt: $a8848f9916d99690$var$twixt,
    twoheadleftarrow: $a8848f9916d99690$var$twoheadleftarrow,
    twoheadrightarrow: $a8848f9916d99690$var$twoheadrightarrow,
    Uacute: $a8848f9916d99690$var$Uacute$1,
    uacute: $a8848f9916d99690$var$uacute$1,
    uarr: $a8848f9916d99690$var$uarr,
    Uarr: $a8848f9916d99690$var$Uarr,
    uArr: $a8848f9916d99690$var$uArr,
    Uarrocir: $a8848f9916d99690$var$Uarrocir,
    Ubrcy: $a8848f9916d99690$var$Ubrcy,
    ubrcy: $a8848f9916d99690$var$ubrcy,
    Ubreve: $a8848f9916d99690$var$Ubreve,
    ubreve: $a8848f9916d99690$var$ubreve,
    Ucirc: $a8848f9916d99690$var$Ucirc$1,
    ucirc: $a8848f9916d99690$var$ucirc$1,
    Ucy: $a8848f9916d99690$var$Ucy,
    ucy: $a8848f9916d99690$var$ucy,
    udarr: $a8848f9916d99690$var$udarr,
    Udblac: $a8848f9916d99690$var$Udblac,
    udblac: $a8848f9916d99690$var$udblac,
    udhar: $a8848f9916d99690$var$udhar,
    ufisht: $a8848f9916d99690$var$ufisht,
    Ufr: $a8848f9916d99690$var$Ufr,
    ufr: $a8848f9916d99690$var$ufr,
    Ugrave: $a8848f9916d99690$var$Ugrave$1,
    ugrave: $a8848f9916d99690$var$ugrave$1,
    uHar: $a8848f9916d99690$var$uHar,
    uharl: $a8848f9916d99690$var$uharl,
    uharr: $a8848f9916d99690$var$uharr,
    uhblk: $a8848f9916d99690$var$uhblk,
    ulcorn: $a8848f9916d99690$var$ulcorn,
    ulcorner: $a8848f9916d99690$var$ulcorner,
    ulcrop: $a8848f9916d99690$var$ulcrop,
    ultri: $a8848f9916d99690$var$ultri,
    Umacr: $a8848f9916d99690$var$Umacr,
    umacr: $a8848f9916d99690$var$umacr,
    uml: $a8848f9916d99690$var$uml$1,
    UnderBar: $a8848f9916d99690$var$UnderBar,
    UnderBrace: $a8848f9916d99690$var$UnderBrace,
    UnderBracket: $a8848f9916d99690$var$UnderBracket,
    UnderParenthesis: $a8848f9916d99690$var$UnderParenthesis,
    Union: $a8848f9916d99690$var$Union,
    UnionPlus: $a8848f9916d99690$var$UnionPlus,
    Uogon: $a8848f9916d99690$var$Uogon,
    uogon: $a8848f9916d99690$var$uogon,
    Uopf: $a8848f9916d99690$var$Uopf,
    uopf: $a8848f9916d99690$var$uopf,
    UpArrowBar: $a8848f9916d99690$var$UpArrowBar,
    uparrow: $a8848f9916d99690$var$uparrow,
    UpArrow: $a8848f9916d99690$var$UpArrow,
    Uparrow: $a8848f9916d99690$var$Uparrow,
    UpArrowDownArrow: $a8848f9916d99690$var$UpArrowDownArrow,
    updownarrow: $a8848f9916d99690$var$updownarrow,
    UpDownArrow: $a8848f9916d99690$var$UpDownArrow,
    Updownarrow: $a8848f9916d99690$var$Updownarrow,
    UpEquilibrium: $a8848f9916d99690$var$UpEquilibrium,
    upharpoonleft: $a8848f9916d99690$var$upharpoonleft,
    upharpoonright: $a8848f9916d99690$var$upharpoonright,
    uplus: $a8848f9916d99690$var$uplus,
    UpperLeftArrow: $a8848f9916d99690$var$UpperLeftArrow,
    UpperRightArrow: $a8848f9916d99690$var$UpperRightArrow,
    upsi: $a8848f9916d99690$var$upsi,
    Upsi: $a8848f9916d99690$var$Upsi,
    upsih: $a8848f9916d99690$var$upsih,
    Upsilon: $a8848f9916d99690$var$Upsilon,
    upsilon: $a8848f9916d99690$var$upsilon,
    UpTeeArrow: $a8848f9916d99690$var$UpTeeArrow,
    UpTee: $a8848f9916d99690$var$UpTee,
    upuparrows: $a8848f9916d99690$var$upuparrows,
    urcorn: $a8848f9916d99690$var$urcorn,
    urcorner: $a8848f9916d99690$var$urcorner,
    urcrop: $a8848f9916d99690$var$urcrop,
    Uring: $a8848f9916d99690$var$Uring,
    uring: $a8848f9916d99690$var$uring,
    urtri: $a8848f9916d99690$var$urtri,
    Uscr: $a8848f9916d99690$var$Uscr,
    uscr: $a8848f9916d99690$var$uscr,
    utdot: $a8848f9916d99690$var$utdot,
    Utilde: $a8848f9916d99690$var$Utilde,
    utilde: $a8848f9916d99690$var$utilde,
    utri: $a8848f9916d99690$var$utri,
    utrif: $a8848f9916d99690$var$utrif,
    uuarr: $a8848f9916d99690$var$uuarr,
    Uuml: $a8848f9916d99690$var$Uuml$1,
    uuml: $a8848f9916d99690$var$uuml$1,
    uwangle: $a8848f9916d99690$var$uwangle,
    vangrt: $a8848f9916d99690$var$vangrt,
    varepsilon: $a8848f9916d99690$var$varepsilon,
    varkappa: $a8848f9916d99690$var$varkappa,
    varnothing: $a8848f9916d99690$var$varnothing,
    varphi: $a8848f9916d99690$var$varphi,
    varpi: $a8848f9916d99690$var$varpi,
    varpropto: $a8848f9916d99690$var$varpropto,
    varr: $a8848f9916d99690$var$varr,
    vArr: $a8848f9916d99690$var$vArr,
    varrho: $a8848f9916d99690$var$varrho,
    varsigma: $a8848f9916d99690$var$varsigma,
    varsubsetneq: $a8848f9916d99690$var$varsubsetneq,
    varsubsetneqq: $a8848f9916d99690$var$varsubsetneqq,
    varsupsetneq: $a8848f9916d99690$var$varsupsetneq,
    varsupsetneqq: $a8848f9916d99690$var$varsupsetneqq,
    vartheta: $a8848f9916d99690$var$vartheta,
    vartriangleleft: $a8848f9916d99690$var$vartriangleleft,
    vartriangleright: $a8848f9916d99690$var$vartriangleright,
    vBar: $a8848f9916d99690$var$vBar,
    Vbar: $a8848f9916d99690$var$Vbar,
    vBarv: $a8848f9916d99690$var$vBarv,
    Vcy: $a8848f9916d99690$var$Vcy,
    vcy: $a8848f9916d99690$var$vcy,
    vdash: $a8848f9916d99690$var$vdash,
    vDash: $a8848f9916d99690$var$vDash,
    Vdash: $a8848f9916d99690$var$Vdash,
    VDash: $a8848f9916d99690$var$VDash,
    Vdashl: $a8848f9916d99690$var$Vdashl,
    veebar: $a8848f9916d99690$var$veebar,
    vee: $a8848f9916d99690$var$vee,
    Vee: $a8848f9916d99690$var$Vee,
    veeeq: $a8848f9916d99690$var$veeeq,
    vellip: $a8848f9916d99690$var$vellip,
    verbar: $a8848f9916d99690$var$verbar,
    Verbar: $a8848f9916d99690$var$Verbar,
    vert: $a8848f9916d99690$var$vert,
    Vert: $a8848f9916d99690$var$Vert,
    VerticalBar: $a8848f9916d99690$var$VerticalBar,
    VerticalLine: $a8848f9916d99690$var$VerticalLine,
    VerticalSeparator: $a8848f9916d99690$var$VerticalSeparator,
    VerticalTilde: $a8848f9916d99690$var$VerticalTilde,
    VeryThinSpace: $a8848f9916d99690$var$VeryThinSpace,
    Vfr: $a8848f9916d99690$var$Vfr,
    vfr: $a8848f9916d99690$var$vfr,
    vltri: $a8848f9916d99690$var$vltri,
    vnsub: $a8848f9916d99690$var$vnsub,
    vnsup: $a8848f9916d99690$var$vnsup,
    Vopf: $a8848f9916d99690$var$Vopf,
    vopf: $a8848f9916d99690$var$vopf,
    vprop: $a8848f9916d99690$var$vprop,
    vrtri: $a8848f9916d99690$var$vrtri,
    Vscr: $a8848f9916d99690$var$Vscr,
    vscr: $a8848f9916d99690$var$vscr,
    vsubnE: $a8848f9916d99690$var$vsubnE,
    vsubne: $a8848f9916d99690$var$vsubne,
    vsupnE: $a8848f9916d99690$var$vsupnE,
    vsupne: $a8848f9916d99690$var$vsupne,
    Vvdash: $a8848f9916d99690$var$Vvdash,
    vzigzag: $a8848f9916d99690$var$vzigzag,
    Wcirc: $a8848f9916d99690$var$Wcirc,
    wcirc: $a8848f9916d99690$var$wcirc,
    wedbar: $a8848f9916d99690$var$wedbar,
    wedge: $a8848f9916d99690$var$wedge,
    Wedge: $a8848f9916d99690$var$Wedge,
    wedgeq: $a8848f9916d99690$var$wedgeq,
    weierp: $a8848f9916d99690$var$weierp,
    Wfr: $a8848f9916d99690$var$Wfr,
    wfr: $a8848f9916d99690$var$wfr,
    Wopf: $a8848f9916d99690$var$Wopf,
    wopf: $a8848f9916d99690$var$wopf,
    wp: $a8848f9916d99690$var$wp,
    wr: $a8848f9916d99690$var$wr,
    wreath: $a8848f9916d99690$var$wreath,
    Wscr: $a8848f9916d99690$var$Wscr,
    wscr: $a8848f9916d99690$var$wscr,
    xcap: $a8848f9916d99690$var$xcap,
    xcirc: $a8848f9916d99690$var$xcirc,
    xcup: $a8848f9916d99690$var$xcup,
    xdtri: $a8848f9916d99690$var$xdtri,
    Xfr: $a8848f9916d99690$var$Xfr,
    xfr: $a8848f9916d99690$var$xfr,
    xharr: $a8848f9916d99690$var$xharr,
    xhArr: $a8848f9916d99690$var$xhArr,
    Xi: $a8848f9916d99690$var$Xi,
    xi: $a8848f9916d99690$var$xi,
    xlarr: $a8848f9916d99690$var$xlarr,
    xlArr: $a8848f9916d99690$var$xlArr,
    xmap: $a8848f9916d99690$var$xmap,
    xnis: $a8848f9916d99690$var$xnis,
    xodot: $a8848f9916d99690$var$xodot,
    Xopf: $a8848f9916d99690$var$Xopf,
    xopf: $a8848f9916d99690$var$xopf,
    xoplus: $a8848f9916d99690$var$xoplus,
    xotime: $a8848f9916d99690$var$xotime,
    xrarr: $a8848f9916d99690$var$xrarr,
    xrArr: $a8848f9916d99690$var$xrArr,
    Xscr: $a8848f9916d99690$var$Xscr,
    xscr: $a8848f9916d99690$var$xscr,
    xsqcup: $a8848f9916d99690$var$xsqcup,
    xuplus: $a8848f9916d99690$var$xuplus,
    xutri: $a8848f9916d99690$var$xutri,
    xvee: $a8848f9916d99690$var$xvee,
    xwedge: $a8848f9916d99690$var$xwedge,
    Yacute: $a8848f9916d99690$var$Yacute$1,
    yacute: $a8848f9916d99690$var$yacute$1,
    YAcy: $a8848f9916d99690$var$YAcy,
    yacy: $a8848f9916d99690$var$yacy,
    Ycirc: $a8848f9916d99690$var$Ycirc,
    ycirc: $a8848f9916d99690$var$ycirc,
    Ycy: $a8848f9916d99690$var$Ycy,
    ycy: $a8848f9916d99690$var$ycy,
    yen: $a8848f9916d99690$var$yen$1,
    Yfr: $a8848f9916d99690$var$Yfr,
    yfr: $a8848f9916d99690$var$yfr,
    YIcy: $a8848f9916d99690$var$YIcy,
    yicy: $a8848f9916d99690$var$yicy,
    Yopf: $a8848f9916d99690$var$Yopf,
    yopf: $a8848f9916d99690$var$yopf,
    Yscr: $a8848f9916d99690$var$Yscr,
    yscr: $a8848f9916d99690$var$yscr,
    YUcy: $a8848f9916d99690$var$YUcy,
    yucy: $a8848f9916d99690$var$yucy,
    yuml: $a8848f9916d99690$var$yuml$1,
    Yuml: $a8848f9916d99690$var$Yuml,
    Zacute: $a8848f9916d99690$var$Zacute,
    zacute: $a8848f9916d99690$var$zacute,
    Zcaron: $a8848f9916d99690$var$Zcaron,
    zcaron: $a8848f9916d99690$var$zcaron,
    Zcy: $a8848f9916d99690$var$Zcy,
    zcy: $a8848f9916d99690$var$zcy,
    Zdot: $a8848f9916d99690$var$Zdot,
    zdot: $a8848f9916d99690$var$zdot,
    zeetrf: $a8848f9916d99690$var$zeetrf,
    ZeroWidthSpace: $a8848f9916d99690$var$ZeroWidthSpace,
    Zeta: $a8848f9916d99690$var$Zeta,
    zeta: $a8848f9916d99690$var$zeta,
    zfr: $a8848f9916d99690$var$zfr,
    Zfr: $a8848f9916d99690$var$Zfr,
    ZHcy: $a8848f9916d99690$var$ZHcy,
    zhcy: $a8848f9916d99690$var$zhcy,
    zigrarr: $a8848f9916d99690$var$zigrarr,
    zopf: $a8848f9916d99690$var$zopf,
    Zopf: $a8848f9916d99690$var$Zopf,
    Zscr: $a8848f9916d99690$var$Zscr,
    zscr: $a8848f9916d99690$var$zscr,
    zwj: $a8848f9916d99690$var$zwj,
    zwnj: $a8848f9916d99690$var$zwnj
};
var $a8848f9916d99690$var$Aacute = "Á";
var $a8848f9916d99690$var$aacute = "á";
var $a8848f9916d99690$var$Acirc = "Â";
var $a8848f9916d99690$var$acirc = "â";
var $a8848f9916d99690$var$acute = "´";
var $a8848f9916d99690$var$AElig = "Æ";
var $a8848f9916d99690$var$aelig = "æ";
var $a8848f9916d99690$var$Agrave = "À";
var $a8848f9916d99690$var$agrave = "à";
var $a8848f9916d99690$var$amp$1 = "&";
var $a8848f9916d99690$var$AMP = "&";
var $a8848f9916d99690$var$Aring = "Å";
var $a8848f9916d99690$var$aring = "å";
var $a8848f9916d99690$var$Atilde = "Ã";
var $a8848f9916d99690$var$atilde = "ã";
var $a8848f9916d99690$var$Auml = "Ä";
var $a8848f9916d99690$var$auml = "ä";
var $a8848f9916d99690$var$brvbar = "¦";
var $a8848f9916d99690$var$Ccedil = "Ç";
var $a8848f9916d99690$var$ccedil = "ç";
var $a8848f9916d99690$var$cedil = "¸";
var $a8848f9916d99690$var$cent = "¢";
var $a8848f9916d99690$var$copy$1 = "©";
var $a8848f9916d99690$var$COPY = "©";
var $a8848f9916d99690$var$curren = "¤";
var $a8848f9916d99690$var$deg = "°";
var $a8848f9916d99690$var$divide = "÷";
var $a8848f9916d99690$var$Eacute = "É";
var $a8848f9916d99690$var$eacute = "é";
var $a8848f9916d99690$var$Ecirc = "Ê";
var $a8848f9916d99690$var$ecirc = "ê";
var $a8848f9916d99690$var$Egrave = "È";
var $a8848f9916d99690$var$egrave = "è";
var $a8848f9916d99690$var$ETH = "Ð";
var $a8848f9916d99690$var$eth = "ð";
var $a8848f9916d99690$var$Euml = "Ë";
var $a8848f9916d99690$var$euml = "ë";
var $a8848f9916d99690$var$frac12 = "½";
var $a8848f9916d99690$var$frac14 = "¼";
var $a8848f9916d99690$var$frac34 = "¾";
var $a8848f9916d99690$var$gt$1 = ">";
var $a8848f9916d99690$var$GT = ">";
var $a8848f9916d99690$var$Iacute = "Í";
var $a8848f9916d99690$var$iacute = "í";
var $a8848f9916d99690$var$Icirc = "Î";
var $a8848f9916d99690$var$icirc = "î";
var $a8848f9916d99690$var$iexcl = "¡";
var $a8848f9916d99690$var$Igrave = "Ì";
var $a8848f9916d99690$var$igrave = "ì";
var $a8848f9916d99690$var$iquest = "¿";
var $a8848f9916d99690$var$Iuml = "Ï";
var $a8848f9916d99690$var$iuml = "ï";
var $a8848f9916d99690$var$laquo = "«";
var $a8848f9916d99690$var$lt$1 = "<";
var $a8848f9916d99690$var$LT = "<";
var $a8848f9916d99690$var$macr = "¯";
var $a8848f9916d99690$var$micro = "µ";
var $a8848f9916d99690$var$middot = "·";
var $a8848f9916d99690$var$nbsp = " ";
var $a8848f9916d99690$var$not = "¬";
var $a8848f9916d99690$var$Ntilde = "Ñ";
var $a8848f9916d99690$var$ntilde = "ñ";
var $a8848f9916d99690$var$Oacute = "Ó";
var $a8848f9916d99690$var$oacute = "ó";
var $a8848f9916d99690$var$Ocirc = "Ô";
var $a8848f9916d99690$var$ocirc = "ô";
var $a8848f9916d99690$var$Ograve = "Ò";
var $a8848f9916d99690$var$ograve = "ò";
var $a8848f9916d99690$var$ordf = "ª";
var $a8848f9916d99690$var$ordm = "º";
var $a8848f9916d99690$var$Oslash = "Ø";
var $a8848f9916d99690$var$oslash = "ø";
var $a8848f9916d99690$var$Otilde = "Õ";
var $a8848f9916d99690$var$otilde = "õ";
var $a8848f9916d99690$var$Ouml = "Ö";
var $a8848f9916d99690$var$ouml = "ö";
var $a8848f9916d99690$var$para = "¶";
var $a8848f9916d99690$var$plusmn = "±";
var $a8848f9916d99690$var$pound = "£";
var $a8848f9916d99690$var$quot$1 = '"';
var $a8848f9916d99690$var$QUOT = '"';
var $a8848f9916d99690$var$raquo = "»";
var $a8848f9916d99690$var$reg = "®";
var $a8848f9916d99690$var$REG = "®";
var $a8848f9916d99690$var$sect = "§";
var $a8848f9916d99690$var$shy = "­";
var $a8848f9916d99690$var$sup1 = "¹";
var $a8848f9916d99690$var$sup2 = "²";
var $a8848f9916d99690$var$sup3 = "³";
var $a8848f9916d99690$var$szlig = "ß";
var $a8848f9916d99690$var$THORN = "Þ";
var $a8848f9916d99690$var$thorn = "þ";
var $a8848f9916d99690$var$times = "×";
var $a8848f9916d99690$var$Uacute = "Ú";
var $a8848f9916d99690$var$uacute = "ú";
var $a8848f9916d99690$var$Ucirc = "Û";
var $a8848f9916d99690$var$ucirc = "û";
var $a8848f9916d99690$var$Ugrave = "Ù";
var $a8848f9916d99690$var$ugrave = "ù";
var $a8848f9916d99690$var$uml = "¨";
var $a8848f9916d99690$var$Uuml = "Ü";
var $a8848f9916d99690$var$uuml = "ü";
var $a8848f9916d99690$var$Yacute = "Ý";
var $a8848f9916d99690$var$yacute = "ý";
var $a8848f9916d99690$var$yen = "¥";
var $a8848f9916d99690$var$yuml = "ÿ";
var $a8848f9916d99690$var$require$$1 = {
    Aacute: $a8848f9916d99690$var$Aacute,
    aacute: $a8848f9916d99690$var$aacute,
    Acirc: $a8848f9916d99690$var$Acirc,
    acirc: $a8848f9916d99690$var$acirc,
    acute: $a8848f9916d99690$var$acute,
    AElig: $a8848f9916d99690$var$AElig,
    aelig: $a8848f9916d99690$var$aelig,
    Agrave: $a8848f9916d99690$var$Agrave,
    agrave: $a8848f9916d99690$var$agrave,
    amp: $a8848f9916d99690$var$amp$1,
    AMP: $a8848f9916d99690$var$AMP,
    Aring: $a8848f9916d99690$var$Aring,
    aring: $a8848f9916d99690$var$aring,
    Atilde: $a8848f9916d99690$var$Atilde,
    atilde: $a8848f9916d99690$var$atilde,
    Auml: $a8848f9916d99690$var$Auml,
    auml: $a8848f9916d99690$var$auml,
    brvbar: $a8848f9916d99690$var$brvbar,
    Ccedil: $a8848f9916d99690$var$Ccedil,
    ccedil: $a8848f9916d99690$var$ccedil,
    cedil: $a8848f9916d99690$var$cedil,
    cent: $a8848f9916d99690$var$cent,
    copy: $a8848f9916d99690$var$copy$1,
    COPY: $a8848f9916d99690$var$COPY,
    curren: $a8848f9916d99690$var$curren,
    deg: $a8848f9916d99690$var$deg,
    divide: $a8848f9916d99690$var$divide,
    Eacute: $a8848f9916d99690$var$Eacute,
    eacute: $a8848f9916d99690$var$eacute,
    Ecirc: $a8848f9916d99690$var$Ecirc,
    ecirc: $a8848f9916d99690$var$ecirc,
    Egrave: $a8848f9916d99690$var$Egrave,
    egrave: $a8848f9916d99690$var$egrave,
    ETH: $a8848f9916d99690$var$ETH,
    eth: $a8848f9916d99690$var$eth,
    Euml: $a8848f9916d99690$var$Euml,
    euml: $a8848f9916d99690$var$euml,
    frac12: $a8848f9916d99690$var$frac12,
    frac14: $a8848f9916d99690$var$frac14,
    frac34: $a8848f9916d99690$var$frac34,
    gt: $a8848f9916d99690$var$gt$1,
    GT: $a8848f9916d99690$var$GT,
    Iacute: $a8848f9916d99690$var$Iacute,
    iacute: $a8848f9916d99690$var$iacute,
    Icirc: $a8848f9916d99690$var$Icirc,
    icirc: $a8848f9916d99690$var$icirc,
    iexcl: $a8848f9916d99690$var$iexcl,
    Igrave: $a8848f9916d99690$var$Igrave,
    igrave: $a8848f9916d99690$var$igrave,
    iquest: $a8848f9916d99690$var$iquest,
    Iuml: $a8848f9916d99690$var$Iuml,
    iuml: $a8848f9916d99690$var$iuml,
    laquo: $a8848f9916d99690$var$laquo,
    lt: $a8848f9916d99690$var$lt$1,
    LT: $a8848f9916d99690$var$LT,
    macr: $a8848f9916d99690$var$macr,
    micro: $a8848f9916d99690$var$micro,
    middot: $a8848f9916d99690$var$middot,
    nbsp: $a8848f9916d99690$var$nbsp,
    not: $a8848f9916d99690$var$not,
    Ntilde: $a8848f9916d99690$var$Ntilde,
    ntilde: $a8848f9916d99690$var$ntilde,
    Oacute: $a8848f9916d99690$var$Oacute,
    oacute: $a8848f9916d99690$var$oacute,
    Ocirc: $a8848f9916d99690$var$Ocirc,
    ocirc: $a8848f9916d99690$var$ocirc,
    Ograve: $a8848f9916d99690$var$Ograve,
    ograve: $a8848f9916d99690$var$ograve,
    ordf: $a8848f9916d99690$var$ordf,
    ordm: $a8848f9916d99690$var$ordm,
    Oslash: $a8848f9916d99690$var$Oslash,
    oslash: $a8848f9916d99690$var$oslash,
    Otilde: $a8848f9916d99690$var$Otilde,
    otilde: $a8848f9916d99690$var$otilde,
    Ouml: $a8848f9916d99690$var$Ouml,
    ouml: $a8848f9916d99690$var$ouml,
    para: $a8848f9916d99690$var$para,
    plusmn: $a8848f9916d99690$var$plusmn,
    pound: $a8848f9916d99690$var$pound,
    quot: $a8848f9916d99690$var$quot$1,
    QUOT: $a8848f9916d99690$var$QUOT,
    raquo: $a8848f9916d99690$var$raquo,
    reg: $a8848f9916d99690$var$reg,
    REG: $a8848f9916d99690$var$REG,
    sect: $a8848f9916d99690$var$sect,
    shy: $a8848f9916d99690$var$shy,
    sup1: $a8848f9916d99690$var$sup1,
    sup2: $a8848f9916d99690$var$sup2,
    sup3: $a8848f9916d99690$var$sup3,
    szlig: $a8848f9916d99690$var$szlig,
    THORN: $a8848f9916d99690$var$THORN,
    thorn: $a8848f9916d99690$var$thorn,
    times: $a8848f9916d99690$var$times,
    Uacute: $a8848f9916d99690$var$Uacute,
    uacute: $a8848f9916d99690$var$uacute,
    Ucirc: $a8848f9916d99690$var$Ucirc,
    ucirc: $a8848f9916d99690$var$ucirc,
    Ugrave: $a8848f9916d99690$var$Ugrave,
    ugrave: $a8848f9916d99690$var$ugrave,
    uml: $a8848f9916d99690$var$uml,
    Uuml: $a8848f9916d99690$var$Uuml,
    uuml: $a8848f9916d99690$var$uuml,
    Yacute: $a8848f9916d99690$var$Yacute,
    yacute: $a8848f9916d99690$var$yacute,
    yen: $a8848f9916d99690$var$yen,
    yuml: $a8848f9916d99690$var$yuml
};
var $a8848f9916d99690$var$amp = "&";
var $a8848f9916d99690$var$apos = "'";
var $a8848f9916d99690$var$gt = ">";
var $a8848f9916d99690$var$lt = "<";
var $a8848f9916d99690$var$quot = '"';
var $a8848f9916d99690$var$require$$0$1 = {
    amp: $a8848f9916d99690$var$amp,
    apos: $a8848f9916d99690$var$apos,
    gt: $a8848f9916d99690$var$gt,
    lt: $a8848f9916d99690$var$lt,
    quot: $a8848f9916d99690$var$quot
};
var $a8848f9916d99690$var$decode_codepoint = {
};
var $a8848f9916d99690$var$require$$0 = {
    0: 65533,
    128: 8364,
    130: 8218,
    131: 402,
    132: 8222,
    133: 8230,
    134: 8224,
    135: 8225,
    136: 710,
    137: 8240,
    138: 352,
    139: 8249,
    140: 338,
    142: 381,
    145: 8216,
    146: 8217,
    147: 8220,
    148: 8221,
    149: 8226,
    150: 8211,
    151: 8212,
    152: 732,
    153: 8482,
    154: 353,
    155: 8250,
    156: 339,
    158: 382,
    159: 376
};
var $a8848f9916d99690$var$__importDefault$4 = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
};
Object.defineProperty($a8848f9916d99690$var$decode_codepoint, "__esModule", {
    value: true
});
var $a8848f9916d99690$var$decode_json_1 = $a8848f9916d99690$var$__importDefault$4($a8848f9916d99690$var$require$$0);
var $a8848f9916d99690$var$fromCodePoint = String.fromCodePoint || function(codePoint) {
    var output = "";
    if (codePoint > 65535) {
        codePoint -= 65536;
        output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
    }
    output += String.fromCharCode(codePoint);
    return output;
};
function $a8848f9916d99690$var$decodeCodePoint(codePoint) {
    if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) return "�";
    if (codePoint in $a8848f9916d99690$var$decode_json_1.default) codePoint = $a8848f9916d99690$var$decode_json_1.default[codePoint];
    return $a8848f9916d99690$var$fromCodePoint(codePoint);
}
$a8848f9916d99690$var$decode_codepoint.default = $a8848f9916d99690$var$decodeCodePoint;
var $a8848f9916d99690$var$__importDefault$3 = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
};
Object.defineProperty($a8848f9916d99690$var$decode, "__esModule", {
    value: true
});
$a8848f9916d99690$var$decode.decodeHTML = $a8848f9916d99690$var$decode.decodeHTMLStrict = $a8848f9916d99690$var$decode.decodeXML = void 0;
var $a8848f9916d99690$var$entities_json_1$1 = $a8848f9916d99690$var$__importDefault$3($a8848f9916d99690$var$require$$1$1);
var $a8848f9916d99690$var$legacy_json_1 = $a8848f9916d99690$var$__importDefault$3($a8848f9916d99690$var$require$$1);
var $a8848f9916d99690$var$xml_json_1$1 = $a8848f9916d99690$var$__importDefault$3($a8848f9916d99690$var$require$$0$1);
var $a8848f9916d99690$var$decode_codepoint_1 = $a8848f9916d99690$var$__importDefault$3($a8848f9916d99690$var$decode_codepoint);
var $a8848f9916d99690$var$strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
$a8848f9916d99690$var$decode.decodeXML = $a8848f9916d99690$var$getStrictDecoder($a8848f9916d99690$var$xml_json_1$1.default);
$a8848f9916d99690$var$decode.decodeHTMLStrict = $a8848f9916d99690$var$getStrictDecoder($a8848f9916d99690$var$entities_json_1$1.default);
function $a8848f9916d99690$var$getStrictDecoder(map) {
    var replace = $a8848f9916d99690$var$getReplacer(map);
    return function(str) {
        return String(str).replace($a8848f9916d99690$var$strictEntityRe, replace);
    };
}
var $a8848f9916d99690$var$sorter = function(a, b) {
    return a < b ? 1 : -1;
};
$a8848f9916d99690$var$decode.decodeHTML = (function() {
    var legacy = Object.keys($a8848f9916d99690$var$legacy_json_1.default).sort($a8848f9916d99690$var$sorter);
    var keys = Object.keys($a8848f9916d99690$var$entities_json_1$1.default).sort($a8848f9916d99690$var$sorter);
    for(var i = 0, j = 0; i < keys.length; i++)if (legacy[j] === keys[i]) {
        keys[i] += ";?";
        j++;
    } else keys[i] += ";";
    var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
    var replace = $a8848f9916d99690$var$getReplacer($a8848f9916d99690$var$entities_json_1$1.default);
    function replacer(str) {
        if (str.substr(-1) !== ";") str += ";";
        return replace(str);
    }
    return function(str) {
        return String(str).replace(re, replacer);
    };
})();
function $a8848f9916d99690$var$getReplacer(map) {
    return function replace(str) {
        if (str.charAt(1) === "#") {
            var secondChar = str.charAt(2);
            if (secondChar === "X" || secondChar === "x") return $a8848f9916d99690$var$decode_codepoint_1.default(parseInt(str.substr(3), 16));
            return $a8848f9916d99690$var$decode_codepoint_1.default(parseInt(str.substr(2), 10));
        }
        return map[str.slice(1, -1)] || str;
    };
}
var $a8848f9916d99690$var$encode = {
};
var $a8848f9916d99690$var$__importDefault$2 = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
};
Object.defineProperty($a8848f9916d99690$var$encode, "__esModule", {
    value: true
});
$a8848f9916d99690$var$encode.escapeUTF8 = $a8848f9916d99690$var$encode.escape = $a8848f9916d99690$var$encode.encodeNonAsciiHTML = $a8848f9916d99690$var$encode.encodeHTML = $a8848f9916d99690$var$encode.encodeXML = void 0;
var $a8848f9916d99690$var$xml_json_1 = $a8848f9916d99690$var$__importDefault$2($a8848f9916d99690$var$require$$0$1);
var $a8848f9916d99690$var$inverseXML = $a8848f9916d99690$var$getInverseObj($a8848f9916d99690$var$xml_json_1.default);
var $a8848f9916d99690$var$xmlReplacer = $a8848f9916d99690$var$getInverseReplacer($a8848f9916d99690$var$inverseXML);
$a8848f9916d99690$var$encode.encodeXML = $a8848f9916d99690$var$getASCIIEncoder($a8848f9916d99690$var$inverseXML);
var $a8848f9916d99690$var$entities_json_1 = $a8848f9916d99690$var$__importDefault$2($a8848f9916d99690$var$require$$1$1);
var $a8848f9916d99690$var$inverseHTML = $a8848f9916d99690$var$getInverseObj($a8848f9916d99690$var$entities_json_1.default);
var $a8848f9916d99690$var$htmlReplacer = $a8848f9916d99690$var$getInverseReplacer($a8848f9916d99690$var$inverseHTML);
$a8848f9916d99690$var$encode.encodeHTML = $a8848f9916d99690$var$getInverse($a8848f9916d99690$var$inverseHTML, $a8848f9916d99690$var$htmlReplacer);
$a8848f9916d99690$var$encode.encodeNonAsciiHTML = $a8848f9916d99690$var$getASCIIEncoder($a8848f9916d99690$var$inverseHTML);
function $a8848f9916d99690$var$getInverseObj(obj) {
    return Object.keys(obj).sort().reduce(function(inverse, name7) {
        inverse[obj[name7]] = "&" + name7 + ";";
        return inverse;
    }, {
    });
}
function $a8848f9916d99690$var$getInverseReplacer(inverse) {
    var single = [];
    var multiple = [];
    for(var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++){
        var k = _a[_i];
        if (k.length === 1) single.push("\\" + k);
        else multiple.push(k);
    }
    single.sort();
    for(var start = 0; start < single.length - 1; start++){
        var end = start;
        while(end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1))end += 1;
        var count = 1 + end - start;
        if (count < 3) continue;
        single.splice(start, count, single[start] + "-" + single[end]);
    }
    multiple.unshift("[" + single.join("") + "]");
    return new RegExp(multiple.join("|"), "g");
}
var $a8848f9916d99690$var$reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
var $a8848f9916d99690$var$getCodePoint = String.prototype.codePointAt != null ? function(str) {
    return str.codePointAt(0);
} : function(c) {
    return (c.charCodeAt(0) - 55296) * 1024 + c.charCodeAt(1) - 56320 + 65536;
};
function $a8848f9916d99690$var$singleCharReplacer(c) {
    return "&#x" + (c.length > 1 ? $a8848f9916d99690$var$getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + ";";
}
function $a8848f9916d99690$var$getInverse(inverse, re) {
    return function(data) {
        return data.replace(re, function(name) {
            return inverse[name];
        }).replace($a8848f9916d99690$var$reNonASCII, $a8848f9916d99690$var$singleCharReplacer);
    };
}
var $a8848f9916d99690$var$reEscapeChars = new RegExp($a8848f9916d99690$var$xmlReplacer.source + "|" + $a8848f9916d99690$var$reNonASCII.source, "g");
function $a8848f9916d99690$var$escape(data) {
    return data.replace($a8848f9916d99690$var$reEscapeChars, $a8848f9916d99690$var$singleCharReplacer);
}
$a8848f9916d99690$var$encode.escape = $a8848f9916d99690$var$escape;
function $a8848f9916d99690$var$escapeUTF8(data) {
    return data.replace($a8848f9916d99690$var$xmlReplacer, $a8848f9916d99690$var$singleCharReplacer);
}
$a8848f9916d99690$var$encode.escapeUTF8 = $a8848f9916d99690$var$escapeUTF8;
function $a8848f9916d99690$var$getASCIIEncoder(obj) {
    return function(data) {
        return data.replace($a8848f9916d99690$var$reEscapeChars, function(c) {
            return obj[c] || $a8848f9916d99690$var$singleCharReplacer(c);
        });
    };
}
(function(exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
    var decode_1 = $a8848f9916d99690$var$decode;
    var encode_1 = $a8848f9916d99690$var$encode;
    function decode$1(data, level) {
        return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
    }
    exports.decode = decode$1;
    function decodeStrict(data, level) {
        return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
    }
    exports.decodeStrict = decodeStrict;
    function encode$1(data, level) {
        return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
    }
    exports.encode = encode$1;
    var encode_2 = $a8848f9916d99690$var$encode;
    Object.defineProperty(exports, "encodeXML", {
        enumerable: true,
        get: function() {
            return encode_2.encodeXML;
        }
    });
    Object.defineProperty(exports, "encodeHTML", {
        enumerable: true,
        get: function() {
            return encode_2.encodeHTML;
        }
    });
    Object.defineProperty(exports, "encodeNonAsciiHTML", {
        enumerable: true,
        get: function() {
            return encode_2.encodeNonAsciiHTML;
        }
    });
    Object.defineProperty(exports, "escape", {
        enumerable: true,
        get: function() {
            return encode_2.escape;
        }
    });
    Object.defineProperty(exports, "escapeUTF8", {
        enumerable: true,
        get: function() {
            return encode_2.escapeUTF8;
        }
    });
    Object.defineProperty(exports, "encodeHTML4", {
        enumerable: true,
        get: function() {
            return encode_2.encodeHTML;
        }
    });
    Object.defineProperty(exports, "encodeHTML5", {
        enumerable: true,
        get: function() {
            return encode_2.encodeHTML;
        }
    });
    var decode_2 = $a8848f9916d99690$var$decode;
    Object.defineProperty(exports, "decodeXML", {
        enumerable: true,
        get: function() {
            return decode_2.decodeXML;
        }
    });
    Object.defineProperty(exports, "decodeHTML", {
        enumerable: true,
        get: function() {
            return decode_2.decodeHTML;
        }
    });
    Object.defineProperty(exports, "decodeHTMLStrict", {
        enumerable: true,
        get: function() {
            return decode_2.decodeHTMLStrict;
        }
    });
    Object.defineProperty(exports, "decodeHTML4", {
        enumerable: true,
        get: function() {
            return decode_2.decodeHTML;
        }
    });
    Object.defineProperty(exports, "decodeHTML5", {
        enumerable: true,
        get: function() {
            return decode_2.decodeHTML;
        }
    });
    Object.defineProperty(exports, "decodeHTML4Strict", {
        enumerable: true,
        get: function() {
            return decode_2.decodeHTMLStrict;
        }
    });
    Object.defineProperty(exports, "decodeHTML5Strict", {
        enumerable: true,
        get: function() {
            return decode_2.decodeHTMLStrict;
        }
    });
    Object.defineProperty(exports, "decodeXMLStrict", {
        enumerable: true,
        get: function() {
            return decode_2.decodeXML;
        }
    });
})($a8848f9916d99690$var$lib$3);
var $a8848f9916d99690$var$foreignNames = {
};
Object.defineProperty($a8848f9916d99690$var$foreignNames, "__esModule", {
    value: true
});
$a8848f9916d99690$var$foreignNames.attributeNames = $a8848f9916d99690$var$foreignNames.elementNames = void 0;
$a8848f9916d99690$var$foreignNames.elementNames = new Map([
    [
        "altglyph",
        "altGlyph"
    ],
    [
        "altglyphdef",
        "altGlyphDef"
    ],
    [
        "altglyphitem",
        "altGlyphItem"
    ],
    [
        "animatecolor",
        "animateColor"
    ],
    [
        "animatemotion",
        "animateMotion"
    ],
    [
        "animatetransform",
        "animateTransform"
    ],
    [
        "clippath",
        "clipPath"
    ],
    [
        "feblend",
        "feBlend"
    ],
    [
        "fecolormatrix",
        "feColorMatrix"
    ],
    [
        "fecomponenttransfer",
        "feComponentTransfer"
    ],
    [
        "fecomposite",
        "feComposite"
    ],
    [
        "feconvolvematrix",
        "feConvolveMatrix"
    ],
    [
        "fediffuselighting",
        "feDiffuseLighting"
    ],
    [
        "fedisplacementmap",
        "feDisplacementMap"
    ],
    [
        "fedistantlight",
        "feDistantLight"
    ],
    [
        "fedropshadow",
        "feDropShadow"
    ],
    [
        "feflood",
        "feFlood"
    ],
    [
        "fefunca",
        "feFuncA"
    ],
    [
        "fefuncb",
        "feFuncB"
    ],
    [
        "fefuncg",
        "feFuncG"
    ],
    [
        "fefuncr",
        "feFuncR"
    ],
    [
        "fegaussianblur",
        "feGaussianBlur"
    ],
    [
        "feimage",
        "feImage"
    ],
    [
        "femerge",
        "feMerge"
    ],
    [
        "femergenode",
        "feMergeNode"
    ],
    [
        "femorphology",
        "feMorphology"
    ],
    [
        "feoffset",
        "feOffset"
    ],
    [
        "fepointlight",
        "fePointLight"
    ],
    [
        "fespecularlighting",
        "feSpecularLighting"
    ],
    [
        "fespotlight",
        "feSpotLight"
    ],
    [
        "fetile",
        "feTile"
    ],
    [
        "feturbulence",
        "feTurbulence"
    ],
    [
        "foreignobject",
        "foreignObject"
    ],
    [
        "glyphref",
        "glyphRef"
    ],
    [
        "lineargradient",
        "linearGradient"
    ],
    [
        "radialgradient",
        "radialGradient"
    ],
    [
        "textpath",
        "textPath"
    ]
]);
$a8848f9916d99690$var$foreignNames.attributeNames = new Map([
    [
        "definitionurl",
        "definitionURL"
    ],
    [
        "attributename",
        "attributeName"
    ],
    [
        "attributetype",
        "attributeType"
    ],
    [
        "basefrequency",
        "baseFrequency"
    ],
    [
        "baseprofile",
        "baseProfile"
    ],
    [
        "calcmode",
        "calcMode"
    ],
    [
        "clippathunits",
        "clipPathUnits"
    ],
    [
        "diffuseconstant",
        "diffuseConstant"
    ],
    [
        "edgemode",
        "edgeMode"
    ],
    [
        "filterunits",
        "filterUnits"
    ],
    [
        "glyphref",
        "glyphRef"
    ],
    [
        "gradienttransform",
        "gradientTransform"
    ],
    [
        "gradientunits",
        "gradientUnits"
    ],
    [
        "kernelmatrix",
        "kernelMatrix"
    ],
    [
        "kernelunitlength",
        "kernelUnitLength"
    ],
    [
        "keypoints",
        "keyPoints"
    ],
    [
        "keysplines",
        "keySplines"
    ],
    [
        "keytimes",
        "keyTimes"
    ],
    [
        "lengthadjust",
        "lengthAdjust"
    ],
    [
        "limitingconeangle",
        "limitingConeAngle"
    ],
    [
        "markerheight",
        "markerHeight"
    ],
    [
        "markerunits",
        "markerUnits"
    ],
    [
        "markerwidth",
        "markerWidth"
    ],
    [
        "maskcontentunits",
        "maskContentUnits"
    ],
    [
        "maskunits",
        "maskUnits"
    ],
    [
        "numoctaves",
        "numOctaves"
    ],
    [
        "pathlength",
        "pathLength"
    ],
    [
        "patterncontentunits",
        "patternContentUnits"
    ],
    [
        "patterntransform",
        "patternTransform"
    ],
    [
        "patternunits",
        "patternUnits"
    ],
    [
        "pointsatx",
        "pointsAtX"
    ],
    [
        "pointsaty",
        "pointsAtY"
    ],
    [
        "pointsatz",
        "pointsAtZ"
    ],
    [
        "preservealpha",
        "preserveAlpha"
    ],
    [
        "preserveaspectratio",
        "preserveAspectRatio"
    ],
    [
        "primitiveunits",
        "primitiveUnits"
    ],
    [
        "refx",
        "refX"
    ],
    [
        "refy",
        "refY"
    ],
    [
        "repeatcount",
        "repeatCount"
    ],
    [
        "repeatdur",
        "repeatDur"
    ],
    [
        "requiredextensions",
        "requiredExtensions"
    ],
    [
        "requiredfeatures",
        "requiredFeatures"
    ],
    [
        "specularconstant",
        "specularConstant"
    ],
    [
        "specularexponent",
        "specularExponent"
    ],
    [
        "spreadmethod",
        "spreadMethod"
    ],
    [
        "startoffset",
        "startOffset"
    ],
    [
        "stddeviation",
        "stdDeviation"
    ],
    [
        "stitchtiles",
        "stitchTiles"
    ],
    [
        "surfacescale",
        "surfaceScale"
    ],
    [
        "systemlanguage",
        "systemLanguage"
    ],
    [
        "tablevalues",
        "tableValues"
    ],
    [
        "targetx",
        "targetX"
    ],
    [
        "targety",
        "targetY"
    ],
    [
        "textlength",
        "textLength"
    ],
    [
        "viewbox",
        "viewBox"
    ],
    [
        "viewtarget",
        "viewTarget"
    ],
    [
        "xchannelselector",
        "xChannelSelector"
    ],
    [
        "ychannelselector",
        "yChannelSelector"
    ],
    [
        "zoomandpan",
        "zoomAndPan"
    ]
]);
var $a8848f9916d99690$var$__assign = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__assign || function() {
    $a8848f9916d99690$var$__assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $a8848f9916d99690$var$__assign.apply(this, arguments);
};
var $a8848f9916d99690$var$__createBinding = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $a8848f9916d99690$var$__setModuleDefault = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $a8848f9916d99690$var$__importStar = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {
    };
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $a8848f9916d99690$var$__createBinding(result, mod, k);
    }
    $a8848f9916d99690$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty($a8848f9916d99690$var$lib$4, "__esModule", {
    value: true
});
var $a8848f9916d99690$var$ElementType = $a8848f9916d99690$var$__importStar($a8848f9916d99690$var$lib$5);
var $a8848f9916d99690$var$entities_1 = $a8848f9916d99690$var$lib$3;
var $a8848f9916d99690$var$foreignNames_1 = $a8848f9916d99690$var$foreignNames;
var $a8848f9916d99690$var$unencodedElements = new Set([
    "style",
    "script",
    "xmp",
    "iframe",
    "noembed",
    "noframes",
    "plaintext",
    "noscript"
]);
function $a8848f9916d99690$var$formatAttributes(attributes, opts) {
    if (!attributes) return;
    return Object.keys(attributes).map(function(key) {
        var _a, _b;
        var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : "";
        if (opts.xmlMode === "foreign") key = (_b = $a8848f9916d99690$var$foreignNames_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
        if (!opts.emptyAttrs && !opts.xmlMode && value === "") return key;
        return key + '="' + (opts.decodeEntities !== false ? $a8848f9916d99690$var$entities_1.encodeXML(value) : value.replace(/"/g, "&quot;")) + '"';
    }).join(" ");
}
var $a8848f9916d99690$var$singleTag = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
]);
function $a8848f9916d99690$var$render(node, options) {
    if (options === void 0) options = {
    };
    var nodes = "length" in node ? node : [
        node
    ];
    var output = "";
    for(var i = 0; i < nodes.length; i++)output += $a8848f9916d99690$var$renderNode(nodes[i], options);
    return output;
}
$a8848f9916d99690$var$lib$4.default = $a8848f9916d99690$var$render;
function $a8848f9916d99690$var$renderNode(node, options) {
    switch(node.type){
        case $a8848f9916d99690$var$ElementType.Root:
            return $a8848f9916d99690$var$render(node.children, options);
        case $a8848f9916d99690$var$ElementType.Directive:
        case $a8848f9916d99690$var$ElementType.Doctype:
            return $a8848f9916d99690$var$renderDirective(node);
        case $a8848f9916d99690$var$ElementType.Comment:
            return $a8848f9916d99690$var$renderComment(node);
        case $a8848f9916d99690$var$ElementType.CDATA:
            return $a8848f9916d99690$var$renderCdata(node);
        case $a8848f9916d99690$var$ElementType.Script:
        case $a8848f9916d99690$var$ElementType.Style:
        case $a8848f9916d99690$var$ElementType.Tag:
            return $a8848f9916d99690$var$renderTag(node, options);
        case $a8848f9916d99690$var$ElementType.Text:
            return $a8848f9916d99690$var$renderText(node, options);
    }
}
var $a8848f9916d99690$var$foreignModeIntegrationPoints = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title"
]);
var $a8848f9916d99690$var$foreignElements = new Set([
    "svg",
    "math"
]);
function $a8848f9916d99690$var$renderTag(elem, opts) {
    var _a;
    if (opts.xmlMode === "foreign") {
        elem.name = (_a = $a8848f9916d99690$var$foreignNames_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
        if (elem.parent && $a8848f9916d99690$var$foreignModeIntegrationPoints.has(elem.parent.name)) opts = $a8848f9916d99690$var$__assign($a8848f9916d99690$var$__assign({
        }, opts), {
            xmlMode: false
        });
    }
    if (!opts.xmlMode && $a8848f9916d99690$var$foreignElements.has(elem.name)) opts = $a8848f9916d99690$var$__assign($a8848f9916d99690$var$__assign({
    }, opts), {
        xmlMode: "foreign"
    });
    var tag = "<" + elem.name;
    var attribs = $a8848f9916d99690$var$formatAttributes(elem.attribs, opts);
    if (attribs) tag += " " + attribs;
    if (elem.children.length === 0 && (opts.xmlMode ? opts.selfClosingTags !== false : opts.selfClosingTags && $a8848f9916d99690$var$singleTag.has(elem.name))) {
        if (!opts.xmlMode) tag += " ";
        tag += "/>";
    } else {
        tag += ">";
        if (elem.children.length > 0) tag += $a8848f9916d99690$var$render(elem.children, opts);
        if (opts.xmlMode || !$a8848f9916d99690$var$singleTag.has(elem.name)) tag += "</" + elem.name + ">";
    }
    return tag;
}
function $a8848f9916d99690$var$renderDirective(elem) {
    return "<" + elem.data + ">";
}
function $a8848f9916d99690$var$renderText(elem, opts) {
    var data = elem.data || "";
    if (opts.decodeEntities !== false && !(!opts.xmlMode && elem.parent && $a8848f9916d99690$var$unencodedElements.has(elem.parent.name))) data = $a8848f9916d99690$var$entities_1.encodeXML(data);
    return data;
}
function $a8848f9916d99690$var$renderCdata(elem) {
    return "<![CDATA[" + elem.children[0].data + "]]>";
}
function $a8848f9916d99690$var$renderComment(elem) {
    return "\x3c!--" + elem.data + "--\x3e";
}
var $a8848f9916d99690$var$__importDefault$1 = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
};
Object.defineProperty($a8848f9916d99690$var$stringify$2, "__esModule", {
    value: true
});
$a8848f9916d99690$var$stringify$2.innerText = $a8848f9916d99690$var$stringify$2.textContent = $a8848f9916d99690$var$stringify$2.getText = $a8848f9916d99690$var$stringify$2.getInnerHTML = $a8848f9916d99690$var$stringify$2.getOuterHTML = void 0;
var $a8848f9916d99690$var$domhandler_1$4 = $a8848f9916d99690$var$lib$6;
var $a8848f9916d99690$var$dom_serializer_1 = $a8848f9916d99690$var$__importDefault$1($a8848f9916d99690$var$lib$4);
var $a8848f9916d99690$var$domelementtype_1 = $a8848f9916d99690$var$lib$5;
function $a8848f9916d99690$var$getOuterHTML(node, options) {
    return (0, $a8848f9916d99690$var$dom_serializer_1.default)(node, options);
}
$a8848f9916d99690$var$stringify$2.getOuterHTML = $a8848f9916d99690$var$getOuterHTML;
function $a8848f9916d99690$var$getInnerHTML(node1, options) {
    return (0, $a8848f9916d99690$var$domhandler_1$4.hasChildren)(node1) ? node1.children.map(function(node) {
        return $a8848f9916d99690$var$getOuterHTML(node, options);
    }).join("") : "";
}
$a8848f9916d99690$var$stringify$2.getInnerHTML = $a8848f9916d99690$var$getInnerHTML;
function $a8848f9916d99690$var$getText$1(node) {
    if (Array.isArray(node)) return node.map($a8848f9916d99690$var$getText$1).join("");
    if ((0, $a8848f9916d99690$var$domhandler_1$4.isTag)(node)) return node.name === "br" ? "\n" : $a8848f9916d99690$var$getText$1(node.children);
    if ((0, $a8848f9916d99690$var$domhandler_1$4.isCDATA)(node)) return $a8848f9916d99690$var$getText$1(node.children);
    if ((0, $a8848f9916d99690$var$domhandler_1$4.isText)(node)) return node.data;
    return "";
}
$a8848f9916d99690$var$stringify$2.getText = $a8848f9916d99690$var$getText$1;
function $a8848f9916d99690$var$textContent(node) {
    if (Array.isArray(node)) return node.map($a8848f9916d99690$var$textContent).join("");
    if ((0, $a8848f9916d99690$var$domhandler_1$4.hasChildren)(node) && !(0, $a8848f9916d99690$var$domhandler_1$4.isComment)(node)) return $a8848f9916d99690$var$textContent(node.children);
    if ((0, $a8848f9916d99690$var$domhandler_1$4.isText)(node)) return node.data;
    return "";
}
$a8848f9916d99690$var$stringify$2.textContent = $a8848f9916d99690$var$textContent;
function $a8848f9916d99690$var$innerText(node) {
    if (Array.isArray(node)) return node.map($a8848f9916d99690$var$innerText).join("");
    if ((0, $a8848f9916d99690$var$domhandler_1$4.hasChildren)(node) && (node.type === $a8848f9916d99690$var$domelementtype_1.ElementType.Tag || (0, $a8848f9916d99690$var$domhandler_1$4.isCDATA)(node))) return $a8848f9916d99690$var$innerText(node.children);
    if ((0, $a8848f9916d99690$var$domhandler_1$4.isText)(node)) return node.data;
    return "";
}
$a8848f9916d99690$var$stringify$2.innerText = $a8848f9916d99690$var$innerText;
var $a8848f9916d99690$var$traversal = {
};
Object.defineProperty($a8848f9916d99690$var$traversal, "__esModule", {
    value: true
});
$a8848f9916d99690$var$traversal.prevElementSibling = $a8848f9916d99690$var$traversal.nextElementSibling = $a8848f9916d99690$var$traversal.getName = $a8848f9916d99690$var$traversal.hasAttrib = $a8848f9916d99690$var$traversal.getAttributeValue = $a8848f9916d99690$var$traversal.getSiblings = $a8848f9916d99690$var$traversal.getParent = $a8848f9916d99690$var$traversal.getChildren = void 0;
var $a8848f9916d99690$var$domhandler_1$3 = $a8848f9916d99690$var$lib$6;
var $a8848f9916d99690$var$emptyArray = [];
function $a8848f9916d99690$var$getChildren$1(elem) {
    var _a;
    return (_a = elem.children) !== null && _a !== void 0 ? _a : $a8848f9916d99690$var$emptyArray;
}
$a8848f9916d99690$var$traversal.getChildren = $a8848f9916d99690$var$getChildren$1;
function $a8848f9916d99690$var$getParent$1(elem) {
    return elem.parent || null;
}
$a8848f9916d99690$var$traversal.getParent = $a8848f9916d99690$var$getParent$1;
function $a8848f9916d99690$var$getSiblings$1(elem) {
    var _a, _b;
    var parent = $a8848f9916d99690$var$getParent$1(elem);
    if (parent != null) return $a8848f9916d99690$var$getChildren$1(parent);
    var siblings = [
        elem
    ];
    var prev = elem.prev, next = elem.next;
    while(prev != null){
        siblings.unshift(prev);
        _a = prev, prev = _a.prev;
    }
    while(next != null){
        siblings.push(next);
        _b = next, next = _b.next;
    }
    return siblings;
}
$a8848f9916d99690$var$traversal.getSiblings = $a8848f9916d99690$var$getSiblings$1;
function $a8848f9916d99690$var$getAttributeValue$1(elem, name) {
    var _a;
    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
}
$a8848f9916d99690$var$traversal.getAttributeValue = $a8848f9916d99690$var$getAttributeValue$1;
function $a8848f9916d99690$var$hasAttrib$1(elem, name8) {
    return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name8) && elem.attribs[name8] != null;
}
$a8848f9916d99690$var$traversal.hasAttrib = $a8848f9916d99690$var$hasAttrib$1;
function $a8848f9916d99690$var$getName$1(elem) {
    return elem.name;
}
$a8848f9916d99690$var$traversal.getName = $a8848f9916d99690$var$getName$1;
function $a8848f9916d99690$var$nextElementSibling(elem) {
    var _a;
    var next = elem.next;
    while(next !== null && !(0, $a8848f9916d99690$var$domhandler_1$3.isTag)(next))_a = next, next = _a.next;
    return next;
}
$a8848f9916d99690$var$traversal.nextElementSibling = $a8848f9916d99690$var$nextElementSibling;
function $a8848f9916d99690$var$prevElementSibling(elem) {
    var _a;
    var prev = elem.prev;
    while(prev !== null && !(0, $a8848f9916d99690$var$domhandler_1$3.isTag)(prev))_a = prev, prev = _a.prev;
    return prev;
}
$a8848f9916d99690$var$traversal.prevElementSibling = $a8848f9916d99690$var$prevElementSibling;
var $a8848f9916d99690$var$manipulation = {
};
Object.defineProperty($a8848f9916d99690$var$manipulation, "__esModule", {
    value: true
});
$a8848f9916d99690$var$manipulation.prepend = $a8848f9916d99690$var$manipulation.prependChild = $a8848f9916d99690$var$manipulation.append = $a8848f9916d99690$var$manipulation.appendChild = $a8848f9916d99690$var$manipulation.replaceElement = $a8848f9916d99690$var$manipulation.removeElement = void 0;
function $a8848f9916d99690$var$removeElement(elem) {
    if (elem.prev) elem.prev.next = elem.next;
    if (elem.next) elem.next.prev = elem.prev;
    if (elem.parent) {
        var childs = elem.parent.children;
        childs.splice(childs.lastIndexOf(elem), 1);
    }
}
$a8848f9916d99690$var$manipulation.removeElement = $a8848f9916d99690$var$removeElement;
function $a8848f9916d99690$var$replaceElement(elem, replacement) {
    var prev = replacement.prev = elem.prev;
    if (prev) prev.next = replacement;
    var next = replacement.next = elem.next;
    if (next) next.prev = replacement;
    var parent = replacement.parent = elem.parent;
    if (parent) {
        var childs = parent.children;
        childs[childs.lastIndexOf(elem)] = replacement;
    }
}
$a8848f9916d99690$var$manipulation.replaceElement = $a8848f9916d99690$var$replaceElement;
function $a8848f9916d99690$var$appendChild(elem, child) {
    $a8848f9916d99690$var$removeElement(child);
    child.next = null;
    child.parent = elem;
    if (elem.children.push(child) > 1) {
        var sibling = elem.children[elem.children.length - 2];
        sibling.next = child;
        child.prev = sibling;
    } else child.prev = null;
}
$a8848f9916d99690$var$manipulation.appendChild = $a8848f9916d99690$var$appendChild;
function $a8848f9916d99690$var$append(elem, next) {
    $a8848f9916d99690$var$removeElement(next);
    var parent = elem.parent;
    var currNext = elem.next;
    next.next = currNext;
    next.prev = elem;
    elem.next = next;
    next.parent = parent;
    if (currNext) {
        currNext.prev = next;
        if (parent) {
            var childs = parent.children;
            childs.splice(childs.lastIndexOf(currNext), 0, next);
        }
    } else if (parent) parent.children.push(next);
}
$a8848f9916d99690$var$manipulation.append = $a8848f9916d99690$var$append;
function $a8848f9916d99690$var$prependChild(elem, child) {
    $a8848f9916d99690$var$removeElement(child);
    child.parent = elem;
    child.prev = null;
    if (elem.children.unshift(child) !== 1) {
        var sibling = elem.children[1];
        sibling.prev = child;
        child.next = sibling;
    } else child.next = null;
}
$a8848f9916d99690$var$manipulation.prependChild = $a8848f9916d99690$var$prependChild;
function $a8848f9916d99690$var$prepend(elem, prev) {
    $a8848f9916d99690$var$removeElement(prev);
    var parent = elem.parent;
    if (parent) {
        var childs = parent.children;
        childs.splice(childs.indexOf(elem), 0, prev);
    }
    if (elem.prev) elem.prev.next = prev;
    prev.parent = parent;
    prev.prev = elem.prev;
    prev.next = elem;
    elem.prev = prev;
}
$a8848f9916d99690$var$manipulation.prepend = $a8848f9916d99690$var$prepend;
var $a8848f9916d99690$var$querying = {
};
Object.defineProperty($a8848f9916d99690$var$querying, "__esModule", {
    value: true
});
$a8848f9916d99690$var$querying.findAll = $a8848f9916d99690$var$querying.existsOne = $a8848f9916d99690$var$querying.findOne = $a8848f9916d99690$var$querying.findOneChild = $a8848f9916d99690$var$querying.find = $a8848f9916d99690$var$querying.filter = void 0;
var $a8848f9916d99690$var$domhandler_1$2 = $a8848f9916d99690$var$lib$6;
function $a8848f9916d99690$var$filter(test, node, recurse, limit) {
    if (recurse === void 0) recurse = true;
    if (limit === void 0) limit = Infinity;
    if (!Array.isArray(node)) node = [
        node
    ];
    return $a8848f9916d99690$var$find(test, node, recurse, limit);
}
$a8848f9916d99690$var$querying.filter = $a8848f9916d99690$var$filter;
function $a8848f9916d99690$var$find(test, nodes, recurse, limit) {
    var result = [];
    for(var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++){
        var elem = nodes_1[_i];
        if (test(elem)) {
            result.push(elem);
            if (--limit <= 0) break;
        }
        if (recurse && (0, $a8848f9916d99690$var$domhandler_1$2.hasChildren)(elem) && elem.children.length > 0) {
            var children = $a8848f9916d99690$var$find(test, elem.children, recurse, limit);
            result.push.apply(result, children);
            limit -= children.length;
            if (limit <= 0) break;
        }
    }
    return result;
}
$a8848f9916d99690$var$querying.find = $a8848f9916d99690$var$find;
function $a8848f9916d99690$var$findOneChild(test, nodes) {
    return nodes.find(test);
}
$a8848f9916d99690$var$querying.findOneChild = $a8848f9916d99690$var$findOneChild;
function $a8848f9916d99690$var$findOne$1(test, nodes, recurse) {
    if (recurse === void 0) recurse = true;
    var elem = null;
    for(var i = 0; i < nodes.length && !elem; i++){
        var checked = nodes[i];
        if (!(0, $a8848f9916d99690$var$domhandler_1$2.isTag)(checked)) continue;
        else if (test(checked)) elem = checked;
        else if (recurse && checked.children.length > 0) elem = $a8848f9916d99690$var$findOne$1(test, checked.children);
    }
    return elem;
}
$a8848f9916d99690$var$querying.findOne = $a8848f9916d99690$var$findOne$1;
function $a8848f9916d99690$var$existsOne$1(test, nodes) {
    return nodes.some(function(checked) {
        return (0, $a8848f9916d99690$var$domhandler_1$2.isTag)(checked) && (test(checked) || checked.children.length > 0 && $a8848f9916d99690$var$existsOne$1(test, checked.children));
    });
}
$a8848f9916d99690$var$querying.existsOne = $a8848f9916d99690$var$existsOne$1;
function $a8848f9916d99690$var$findAll$1(test, nodes) {
    var _a;
    var result = [];
    var stack = nodes.filter($a8848f9916d99690$var$domhandler_1$2.isTag);
    var elem;
    while(elem = stack.shift()){
        var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter($a8848f9916d99690$var$domhandler_1$2.isTag);
        if (children && children.length > 0) stack.unshift.apply(stack, children);
        if (test(elem)) result.push(elem);
    }
    return result;
}
$a8848f9916d99690$var$querying.findAll = $a8848f9916d99690$var$findAll$1;
var $a8848f9916d99690$var$legacy = {
};
Object.defineProperty($a8848f9916d99690$var$legacy, "__esModule", {
    value: true
});
$a8848f9916d99690$var$legacy.getElementsByTagType = $a8848f9916d99690$var$legacy.getElementsByTagName = $a8848f9916d99690$var$legacy.getElementById = $a8848f9916d99690$var$legacy.getElements = $a8848f9916d99690$var$legacy.testElement = void 0;
var $a8848f9916d99690$var$domhandler_1$1 = $a8848f9916d99690$var$lib$6;
var $a8848f9916d99690$var$querying_1 = $a8848f9916d99690$var$querying;
var $a8848f9916d99690$var$Checks = {
    tag_name: function(name9) {
        if (typeof name9 === "function") return function(elem) {
            return (0, $a8848f9916d99690$var$domhandler_1$1.isTag)(elem) && name9(elem.name);
        };
        else if (name9 === "*") return $a8848f9916d99690$var$domhandler_1$1.isTag;
        return function(elem) {
            return (0, $a8848f9916d99690$var$domhandler_1$1.isTag)(elem) && elem.name === name9;
        };
    },
    tag_type: function(type) {
        if (typeof type === "function") return function(elem) {
            return type(elem.type);
        };
        return function(elem) {
            return elem.type === type;
        };
    },
    tag_contains: function(data) {
        if (typeof data === "function") return function(elem) {
            return (0, $a8848f9916d99690$var$domhandler_1$1.isText)(elem) && data(elem.data);
        };
        return function(elem) {
            return (0, $a8848f9916d99690$var$domhandler_1$1.isText)(elem) && elem.data === data;
        };
    }
};
function $a8848f9916d99690$var$getAttribCheck(attrib, value) {
    if (typeof value === "function") return function(elem) {
        return (0, $a8848f9916d99690$var$domhandler_1$1.isTag)(elem) && value(elem.attribs[attrib]);
    };
    return function(elem) {
        return (0, $a8848f9916d99690$var$domhandler_1$1.isTag)(elem) && elem.attribs[attrib] === value;
    };
}
function $a8848f9916d99690$var$combineFuncs(a, b) {
    return function(elem) {
        return a(elem) || b(elem);
    };
}
function $a8848f9916d99690$var$compileTest(options) {
    var funcs = Object.keys(options).map(function(key) {
        var value = options[key];
        return Object.prototype.hasOwnProperty.call($a8848f9916d99690$var$Checks, key) ? $a8848f9916d99690$var$Checks[key](value) : $a8848f9916d99690$var$getAttribCheck(key, value);
    });
    return funcs.length === 0 ? null : funcs.reduce($a8848f9916d99690$var$combineFuncs);
}
function $a8848f9916d99690$var$testElement(options, node) {
    var test = $a8848f9916d99690$var$compileTest(options);
    return test ? test(node) : true;
}
$a8848f9916d99690$var$legacy.testElement = $a8848f9916d99690$var$testElement;
function $a8848f9916d99690$var$getElements(options, nodes, recurse, limit) {
    if (limit === void 0) limit = Infinity;
    var test = $a8848f9916d99690$var$compileTest(options);
    return test ? (0, $a8848f9916d99690$var$querying_1.filter)(test, nodes, recurse, limit) : [];
}
$a8848f9916d99690$var$legacy.getElements = $a8848f9916d99690$var$getElements;
function $a8848f9916d99690$var$getElementById(id, nodes, recurse) {
    if (recurse === void 0) recurse = true;
    if (!Array.isArray(nodes)) nodes = [
        nodes
    ];
    return (0, $a8848f9916d99690$var$querying_1.findOne)($a8848f9916d99690$var$getAttribCheck("id", id), nodes, recurse);
}
$a8848f9916d99690$var$legacy.getElementById = $a8848f9916d99690$var$getElementById;
function $a8848f9916d99690$var$getElementsByTagName(tagName, nodes, recurse, limit) {
    if (recurse === void 0) recurse = true;
    if (limit === void 0) limit = Infinity;
    return (0, $a8848f9916d99690$var$querying_1.filter)($a8848f9916d99690$var$Checks.tag_name(tagName), nodes, recurse, limit);
}
$a8848f9916d99690$var$legacy.getElementsByTagName = $a8848f9916d99690$var$getElementsByTagName;
function $a8848f9916d99690$var$getElementsByTagType(type, nodes, recurse, limit) {
    if (recurse === void 0) recurse = true;
    if (limit === void 0) limit = Infinity;
    return (0, $a8848f9916d99690$var$querying_1.filter)($a8848f9916d99690$var$Checks.tag_type(type), nodes, recurse, limit);
}
$a8848f9916d99690$var$legacy.getElementsByTagType = $a8848f9916d99690$var$getElementsByTagType;
var $a8848f9916d99690$var$helpers = {
};
Object.defineProperty($a8848f9916d99690$var$helpers, "__esModule", {
    value: true
});
$a8848f9916d99690$var$helpers.uniqueSort = $a8848f9916d99690$var$helpers.compareDocumentPosition = $a8848f9916d99690$var$helpers.removeSubsets = void 0;
var $a8848f9916d99690$var$domhandler_1 = $a8848f9916d99690$var$lib$6;
function $a8848f9916d99690$var$removeSubsets$1(nodes) {
    var idx = nodes.length;
    while(--idx >= 0){
        var node = nodes[idx];
        if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
            nodes.splice(idx, 1);
            continue;
        }
        for(var ancestor = node.parent; ancestor; ancestor = ancestor.parent)if (nodes.includes(ancestor)) {
            nodes.splice(idx, 1);
            break;
        }
    }
    return nodes;
}
$a8848f9916d99690$var$helpers.removeSubsets = $a8848f9916d99690$var$removeSubsets$1;
function $a8848f9916d99690$var$compareDocumentPosition(nodeA, nodeB) {
    var aParents = [];
    var bParents = [];
    if (nodeA === nodeB) return 0;
    var current = (0, $a8848f9916d99690$var$domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;
    while(current){
        aParents.unshift(current);
        current = current.parent;
    }
    current = (0, $a8848f9916d99690$var$domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;
    while(current){
        bParents.unshift(current);
        current = current.parent;
    }
    var maxIdx = Math.min(aParents.length, bParents.length);
    var idx = 0;
    while(idx < maxIdx && aParents[idx] === bParents[idx])idx++;
    if (idx === 0) return 1;
    var sharedParent = aParents[idx - 1];
    var siblings = sharedParent.children;
    var aSibling = aParents[idx];
    var bSibling = bParents[idx];
    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
        if (sharedParent === nodeB) return 20;
        return 4;
    }
    if (sharedParent === nodeA) return 10;
    return 2;
}
$a8848f9916d99690$var$helpers.compareDocumentPosition = $a8848f9916d99690$var$compareDocumentPosition;
function $a8848f9916d99690$var$uniqueSort(nodes) {
    nodes = nodes.filter(function(node, i, arr) {
        return !arr.includes(node, i + 1);
    });
    nodes.sort(function(a, b) {
        var relative = $a8848f9916d99690$var$compareDocumentPosition(a, b);
        if (relative & 2) return -1;
        else if (relative & 4) return 1;
        return 0;
    });
    return nodes;
}
$a8848f9916d99690$var$helpers.uniqueSort = $a8848f9916d99690$var$uniqueSort;
var $a8848f9916d99690$var$feeds = {
};
Object.defineProperty($a8848f9916d99690$var$feeds, "__esModule", {
    value: true
});
$a8848f9916d99690$var$feeds.getFeed = void 0;
var $a8848f9916d99690$var$stringify_1 = $a8848f9916d99690$var$stringify$2;
var $a8848f9916d99690$var$legacy_1 = $a8848f9916d99690$var$legacy;
function $a8848f9916d99690$var$getFeed(doc) {
    var feedRoot = $a8848f9916d99690$var$getOneElement($a8848f9916d99690$var$isValidFeed, doc);
    return !feedRoot ? null : feedRoot.name === "feed" ? $a8848f9916d99690$var$getAtomFeed(feedRoot) : $a8848f9916d99690$var$getRssFeed(feedRoot);
}
$a8848f9916d99690$var$feeds.getFeed = $a8848f9916d99690$var$getFeed;
function $a8848f9916d99690$var$getAtomFeed(feedRoot) {
    var _a1;
    var childs = feedRoot.children;
    var feed = {
        type: "atom",
        items: (0, $a8848f9916d99690$var$legacy_1.getElementsByTagName)("entry", childs).map(function(item) {
            var _a;
            var children = item.children;
            var entry = {
                media: $a8848f9916d99690$var$getMediaElements(children)
            };
            $a8848f9916d99690$var$addConditionally(entry, "id", "id", children);
            $a8848f9916d99690$var$addConditionally(entry, "title", "title", children);
            var href = (_a = $a8848f9916d99690$var$getOneElement("link", children)) === null || _a === void 0 ? void 0 : _a.attribs.href;
            if (href) entry.link = href;
            var description = $a8848f9916d99690$var$fetch("summary", children) || $a8848f9916d99690$var$fetch("content", children);
            if (description) entry.description = description;
            var pubDate = $a8848f9916d99690$var$fetch("updated", children);
            if (pubDate) entry.pubDate = new Date(pubDate);
            return entry;
        })
    };
    $a8848f9916d99690$var$addConditionally(feed, "id", "id", childs);
    $a8848f9916d99690$var$addConditionally(feed, "title", "title", childs);
    var href1 = (_a1 = $a8848f9916d99690$var$getOneElement("link", childs)) === null || _a1 === void 0 ? void 0 : _a1.attribs.href;
    if (href1) feed.link = href1;
    $a8848f9916d99690$var$addConditionally(feed, "description", "subtitle", childs);
    var updated = $a8848f9916d99690$var$fetch("updated", childs);
    if (updated) feed.updated = new Date(updated);
    $a8848f9916d99690$var$addConditionally(feed, "author", "email", childs, true);
    return feed;
}
function $a8848f9916d99690$var$getRssFeed(feedRoot) {
    var _a, _b;
    var childs = (_b = (_a = $a8848f9916d99690$var$getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
    var feed = {
        type: feedRoot.name.substr(0, 3),
        id: "",
        items: (0, $a8848f9916d99690$var$legacy_1.getElementsByTagName)("item", feedRoot.children).map(function(item) {
            var children = item.children;
            var entry = {
                media: $a8848f9916d99690$var$getMediaElements(children)
            };
            $a8848f9916d99690$var$addConditionally(entry, "id", "guid", children);
            $a8848f9916d99690$var$addConditionally(entry, "title", "title", children);
            $a8848f9916d99690$var$addConditionally(entry, "link", "link", children);
            $a8848f9916d99690$var$addConditionally(entry, "description", "description", children);
            var pubDate = $a8848f9916d99690$var$fetch("pubDate", children);
            if (pubDate) entry.pubDate = new Date(pubDate);
            return entry;
        })
    };
    $a8848f9916d99690$var$addConditionally(feed, "title", "title", childs);
    $a8848f9916d99690$var$addConditionally(feed, "link", "link", childs);
    $a8848f9916d99690$var$addConditionally(feed, "description", "description", childs);
    var updated = $a8848f9916d99690$var$fetch("lastBuildDate", childs);
    if (updated) feed.updated = new Date(updated);
    $a8848f9916d99690$var$addConditionally(feed, "author", "managingEditor", childs, true);
    return feed;
}
var $a8848f9916d99690$var$MEDIA_KEYS_STRING = [
    "url",
    "type",
    "lang"
];
var $a8848f9916d99690$var$MEDIA_KEYS_INT = [
    "fileSize",
    "bitrate",
    "framerate",
    "samplingrate",
    "channels",
    "duration",
    "height",
    "width"
];
function $a8848f9916d99690$var$getMediaElements(where) {
    return (0, $a8848f9916d99690$var$legacy_1.getElementsByTagName)("media:content", where).map(function(elem) {
        var attribs = elem.attribs;
        var media = {
            medium: attribs.medium,
            isDefault: !!attribs.isDefault
        };
        for(var _i = 0, MEDIA_KEYS_STRING_1 = $a8848f9916d99690$var$MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++){
            var attrib = MEDIA_KEYS_STRING_1[_i];
            if (attribs[attrib]) media[attrib] = attribs[attrib];
        }
        for(var _a = 0, MEDIA_KEYS_INT_1 = $a8848f9916d99690$var$MEDIA_KEYS_INT; _a < MEDIA_KEYS_INT_1.length; _a++){
            var attrib = MEDIA_KEYS_INT_1[_a];
            if (attribs[attrib]) media[attrib] = parseInt(attribs[attrib], 10);
        }
        if (attribs.expression) media.expression = attribs.expression;
        return media;
    });
}
function $a8848f9916d99690$var$getOneElement(tagName, node) {
    return (0, $a8848f9916d99690$var$legacy_1.getElementsByTagName)(tagName, node, true, 1)[0];
}
function $a8848f9916d99690$var$fetch(tagName, where, recurse) {
    if (recurse === void 0) recurse = false;
    return (0, $a8848f9916d99690$var$stringify_1.textContent)((0, $a8848f9916d99690$var$legacy_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();
}
function $a8848f9916d99690$var$addConditionally(obj, prop, tagName, where, recurse) {
    if (recurse === void 0) recurse = false;
    var val = $a8848f9916d99690$var$fetch(tagName, where, recurse);
    if (val) obj[prop] = val;
}
function $a8848f9916d99690$var$isValidFeed(value) {
    return value === "rss" || value === "feed" || value === "rdf:RDF";
}
(function(exports2) {
    var __createBinding = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
            enumerable: true,
            get: function() {
                return m[k];
            }
        });
    } : function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    });
    var __exportStar = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__exportStar || function(m, exports) {
        for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports2, "__esModule", {
        value: true
    });
    exports2.hasChildren = exports2.isDocument = exports2.isComment = exports2.isText = exports2.isCDATA = exports2.isTag = void 0;
    __exportStar($a8848f9916d99690$var$stringify$2, exports2);
    __exportStar($a8848f9916d99690$var$traversal, exports2);
    __exportStar($a8848f9916d99690$var$manipulation, exports2);
    __exportStar($a8848f9916d99690$var$querying, exports2);
    __exportStar($a8848f9916d99690$var$legacy, exports2);
    __exportStar($a8848f9916d99690$var$helpers, exports2);
    __exportStar($a8848f9916d99690$var$feeds, exports2);
    var domhandler_1 = $a8848f9916d99690$var$lib$6;
    Object.defineProperty(exports2, "isTag", {
        enumerable: true,
        get: function() {
            return domhandler_1.isTag;
        }
    });
    Object.defineProperty(exports2, "isCDATA", {
        enumerable: true,
        get: function() {
            return domhandler_1.isCDATA;
        }
    });
    Object.defineProperty(exports2, "isText", {
        enumerable: true,
        get: function() {
            return domhandler_1.isText;
        }
    });
    Object.defineProperty(exports2, "isComment", {
        enumerable: true,
        get: function() {
            return domhandler_1.isComment;
        }
    });
    Object.defineProperty(exports2, "isDocument", {
        enumerable: true,
        get: function() {
            return domhandler_1.isDocument;
        }
    });
    Object.defineProperty(exports2, "hasChildren", {
        enumerable: true,
        get: function() {
            return domhandler_1.hasChildren;
        }
    });
})($a8848f9916d99690$var$lib$7);
var $a8848f9916d99690$var$boolbase = {
    trueFunc: function trueFunc() {
        return true;
    },
    falseFunc: function falseFunc() {
        return false;
    }
};
var $a8848f9916d99690$var$compile$3 = {
};
var $a8848f9916d99690$var$lib$2 = {
};
var $a8848f9916d99690$var$parse$4 = {
};
var $a8848f9916d99690$var$__spreadArray$1 = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__spreadArray || function(to, from) {
    for(var i = 0, il = from.length, j = to.length; i < il; i++, j++)to[j] = from[i];
    return to;
};
Object.defineProperty($a8848f9916d99690$var$parse$4, "__esModule", {
    value: true
});
$a8848f9916d99690$var$parse$4.isTraversal = void 0;
var $a8848f9916d99690$var$reName = /^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/;
var $a8848f9916d99690$var$reEscape = /\\([\da-f]{1,6}\s?|(\s)|.)/gi;
var $a8848f9916d99690$var$actionTypes$1 = new Map([
    [
        "~",
        "element"
    ],
    [
        "^",
        "start"
    ],
    [
        "$",
        "end"
    ],
    [
        "*",
        "any"
    ],
    [
        "!",
        "not"
    ],
    [
        "|",
        "hyphen"
    ]
]);
var $a8848f9916d99690$var$Traversals = {
    ">": "child",
    "<": "parent",
    "~": "sibling",
    "+": "adjacent"
};
var $a8848f9916d99690$var$attribSelectors = {
    "#": [
        "id",
        "equals"
    ],
    ".": [
        "class",
        "element"
    ]
};
var $a8848f9916d99690$var$unpackPseudos = new Set([
    "has",
    "not",
    "matches",
    "is",
    "host",
    "host-context"
]);
var $a8848f9916d99690$var$traversalNames = new Set($a8848f9916d99690$var$__spreadArray$1([
    "descendant"
], Object.keys($a8848f9916d99690$var$Traversals).map(function(k) {
    return $a8848f9916d99690$var$Traversals[k];
})));
var $a8848f9916d99690$var$caseInsensitiveAttributes = new Set([
    "accept",
    "accept-charset",
    "align",
    "alink",
    "axis",
    "bgcolor",
    "charset",
    "checked",
    "clear",
    "codetype",
    "color",
    "compact",
    "declare",
    "defer",
    "dir",
    "direction",
    "disabled",
    "enctype",
    "face",
    "frame",
    "hreflang",
    "http-equiv",
    "lang",
    "language",
    "link",
    "media",
    "method",
    "multiple",
    "nohref",
    "noresize",
    "noshade",
    "nowrap",
    "readonly",
    "rel",
    "rev",
    "rules",
    "scope",
    "scrolling",
    "selected",
    "shape",
    "target",
    "text",
    "type",
    "valign",
    "valuetype",
    "vlink"
]);
function $a8848f9916d99690$var$isTraversal(selector) {
    return $a8848f9916d99690$var$traversalNames.has(selector.type);
}
$a8848f9916d99690$var$parse$4.isTraversal = $a8848f9916d99690$var$isTraversal;
var $a8848f9916d99690$var$stripQuotesFromPseudos = new Set([
    "contains",
    "icontains"
]);
var $a8848f9916d99690$var$quotes = new Set([
    '"',
    "'"
]);
function $a8848f9916d99690$var$funescape(_, escaped, escapedWhitespace) {
    var high = parseInt(escaped, 16) - 65536;
    return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
}
function $a8848f9916d99690$var$unescapeCSS(str) {
    return str.replace($a8848f9916d99690$var$reEscape, $a8848f9916d99690$var$funescape);
}
function $a8848f9916d99690$var$isWhitespace(c) {
    return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}
function $a8848f9916d99690$var$parse$3(selector, options) {
    var subselects = [];
    var endIndex = $a8848f9916d99690$var$parseSelector(subselects, "" + selector, options, 0);
    if (endIndex < selector.length) throw new Error("Unmatched selector: " + selector.slice(endIndex));
    return subselects;
}
$a8848f9916d99690$var$parse$4.default = $a8848f9916d99690$var$parse$3;
function $a8848f9916d99690$var$parseSelector(subselects, selector, options, selectorIndex) {
    var _a, _b;
    if (options === void 0) options = {
    };
    var tokens = [];
    var sawWS = false;
    function getName(offset) {
        var match = selector.slice(selectorIndex + offset).match($a8848f9916d99690$var$reName);
        if (!match) throw new Error("Expected name, found " + selector.slice(selectorIndex));
        var name10 = match[0];
        selectorIndex += offset + name10.length;
        return $a8848f9916d99690$var$unescapeCSS(name10);
    }
    function stripWhitespace(offset) {
        while($a8848f9916d99690$var$isWhitespace(selector.charAt(selectorIndex + offset)))offset++;
        selectorIndex += offset;
    }
    function isEscaped(pos) {
        var slashCount = 0;
        while(selector.charAt(--pos) === "\\")slashCount++;
        return (slashCount & 1) === 1;
    }
    function ensureNotTraversal() {
        if (tokens.length > 0 && $a8848f9916d99690$var$isTraversal(tokens[tokens.length - 1])) throw new Error("Did not expect successive traversals.");
    }
    stripWhitespace(0);
    while(selector !== ""){
        var firstChar = selector.charAt(selectorIndex);
        if ($a8848f9916d99690$var$isWhitespace(firstChar)) {
            sawWS = true;
            stripWhitespace(1);
        } else if (firstChar in $a8848f9916d99690$var$Traversals) {
            ensureNotTraversal();
            tokens.push({
                type: $a8848f9916d99690$var$Traversals[firstChar]
            });
            sawWS = false;
            stripWhitespace(1);
        } else if (firstChar === ",") {
            if (tokens.length === 0) throw new Error("Empty sub-selector");
            subselects.push(tokens);
            tokens = [];
            sawWS = false;
            stripWhitespace(1);
        } else if (selector.startsWith("/*", selectorIndex)) {
            var endIndex = selector.indexOf("*/", selectorIndex + 2);
            if (endIndex < 0) throw new Error("Comment was not terminated");
            selectorIndex = endIndex + 2;
        } else {
            if (sawWS) {
                ensureNotTraversal();
                tokens.push({
                    type: "descendant"
                });
                sawWS = false;
            }
            if (firstChar in $a8848f9916d99690$var$attribSelectors) {
                var _c = $a8848f9916d99690$var$attribSelectors[firstChar], name_1 = _c[0], action = _c[1];
                tokens.push({
                    type: "attribute",
                    name: name_1,
                    action: action,
                    value: getName(1),
                    namespace: null,
                    ignoreCase: options.xmlMode ? null : false
                });
            } else if (firstChar === "[") {
                stripWhitespace(1);
                var name_2 = void 0;
                var namespace = null;
                if (selector.charAt(selectorIndex) === "|") {
                    namespace = "";
                    selectorIndex += 1;
                }
                if (selector.startsWith("*|", selectorIndex)) {
                    namespace = "*";
                    selectorIndex += 2;
                }
                name_2 = getName(0);
                if (namespace === null && selector.charAt(selectorIndex) === "|" && selector.charAt(selectorIndex + 1) !== "=") {
                    namespace = name_2;
                    name_2 = getName(1);
                }
                if ((_a = options.lowerCaseAttributeNames) !== null && _a !== void 0 ? _a : !options.xmlMode) name_2 = name_2.toLowerCase();
                stripWhitespace(0);
                var action = "exists";
                var possibleAction = $a8848f9916d99690$var$actionTypes$1.get(selector.charAt(selectorIndex));
                if (possibleAction) {
                    action = possibleAction;
                    if (selector.charAt(selectorIndex + 1) !== "=") throw new Error("Expected `=`");
                    stripWhitespace(2);
                } else if (selector.charAt(selectorIndex) === "=") {
                    action = "equals";
                    stripWhitespace(1);
                }
                var value = "";
                var ignoreCase = null;
                if (action !== "exists") {
                    if ($a8848f9916d99690$var$quotes.has(selector.charAt(selectorIndex))) {
                        var quote = selector.charAt(selectorIndex);
                        var sectionEnd = selectorIndex + 1;
                        while(sectionEnd < selector.length && (selector.charAt(sectionEnd) !== quote || isEscaped(sectionEnd)))sectionEnd += 1;
                        if (selector.charAt(sectionEnd) !== quote) throw new Error("Attribute value didn't end");
                        value = $a8848f9916d99690$var$unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));
                        selectorIndex = sectionEnd + 1;
                    } else {
                        var valueStart = selectorIndex;
                        while(selectorIndex < selector.length && (!$a8848f9916d99690$var$isWhitespace(selector.charAt(selectorIndex)) && selector.charAt(selectorIndex) !== "]" || isEscaped(selectorIndex)))selectorIndex += 1;
                        value = $a8848f9916d99690$var$unescapeCSS(selector.slice(valueStart, selectorIndex));
                    }
                    stripWhitespace(0);
                    var forceIgnore = selector.charAt(selectorIndex);
                    if (forceIgnore === "s" || forceIgnore === "S") {
                        ignoreCase = false;
                        stripWhitespace(1);
                    } else if (forceIgnore === "i" || forceIgnore === "I") {
                        ignoreCase = true;
                        stripWhitespace(1);
                    }
                }
                if (!options.xmlMode) ignoreCase !== null && ignoreCase !== void 0 || (ignoreCase = $a8848f9916d99690$var$caseInsensitiveAttributes.has(name_2));
                if (selector.charAt(selectorIndex) !== "]") throw new Error("Attribute selector didn't terminate");
                selectorIndex += 1;
                var attributeSelector = {
                    type: "attribute",
                    name: name_2,
                    action: action,
                    value: value,
                    namespace: namespace,
                    ignoreCase: ignoreCase
                };
                tokens.push(attributeSelector);
            } else if (firstChar === ":") {
                if (selector.charAt(selectorIndex + 1) === ":") {
                    tokens.push({
                        type: "pseudo-element",
                        name: getName(2).toLowerCase()
                    });
                    continue;
                }
                var name_3 = getName(1).toLowerCase();
                var data = null;
                if (selector.charAt(selectorIndex) === "(") {
                    if ($a8848f9916d99690$var$unpackPseudos.has(name_3)) {
                        if ($a8848f9916d99690$var$quotes.has(selector.charAt(selectorIndex + 1))) throw new Error("Pseudo-selector " + name_3 + " cannot be quoted");
                        data = [];
                        selectorIndex = $a8848f9916d99690$var$parseSelector(data, selector, options, selectorIndex + 1);
                        if (selector.charAt(selectorIndex) !== ")") throw new Error("Missing closing parenthesis in :" + name_3 + " (" + selector + ")");
                        selectorIndex += 1;
                    } else {
                        selectorIndex += 1;
                        var start = selectorIndex;
                        var counter = 1;
                        for(; counter > 0 && selectorIndex < selector.length; selectorIndex++){
                            if (selector.charAt(selectorIndex) === "(" && !isEscaped(selectorIndex)) counter++;
                            else if (selector.charAt(selectorIndex) === ")" && !isEscaped(selectorIndex)) counter--;
                        }
                        if (counter) throw new Error("Parenthesis not matched");
                        data = selector.slice(start, selectorIndex - 1);
                        if ($a8848f9916d99690$var$stripQuotesFromPseudos.has(name_3)) {
                            var quot = data.charAt(0);
                            if (quot === data.slice(-1) && $a8848f9916d99690$var$quotes.has(quot)) data = data.slice(1, -1);
                            data = $a8848f9916d99690$var$unescapeCSS(data);
                        }
                    }
                }
                tokens.push({
                    type: "pseudo",
                    name: name_3,
                    data: data
                });
            } else {
                var namespace = null;
                var name_4 = void 0;
                if (firstChar === "*") {
                    selectorIndex += 1;
                    name_4 = "*";
                } else if ($a8848f9916d99690$var$reName.test(selector.slice(selectorIndex))) {
                    if (selector.charAt(selectorIndex) === "|") {
                        namespace = "";
                        selectorIndex += 1;
                    }
                    name_4 = getName(0);
                } else {
                    if (tokens.length && tokens[tokens.length - 1].type === "descendant") tokens.pop();
                    $a8848f9916d99690$var$addToken(subselects, tokens);
                    return selectorIndex;
                }
                if (selector.charAt(selectorIndex) === "|") {
                    namespace = name_4;
                    if (selector.charAt(selectorIndex + 1) === "*") {
                        name_4 = "*";
                        selectorIndex += 2;
                    } else name_4 = getName(1);
                }
                if (name_4 === "*") tokens.push({
                    type: "universal",
                    namespace: namespace
                });
                else {
                    if ((_b = options.lowerCaseTags) !== null && _b !== void 0 ? _b : !options.xmlMode) name_4 = name_4.toLowerCase();
                    tokens.push({
                        type: "tag",
                        name: name_4,
                        namespace: namespace
                    });
                }
            }
        }
    }
    $a8848f9916d99690$var$addToken(subselects, tokens);
    return selectorIndex;
}
function $a8848f9916d99690$var$addToken(subselects, tokens) {
    if (subselects.length > 0 && tokens.length === 0) throw new Error("Empty sub-selector");
    subselects.push(tokens);
}
var $a8848f9916d99690$var$stringify$1 = {
};
var $a8848f9916d99690$var$__spreadArray = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__spreadArray || function(to, from) {
    for(var i = 0, il = from.length, j = to.length; i < il; i++, j++)to[j] = from[i];
    return to;
};
Object.defineProperty($a8848f9916d99690$var$stringify$1, "__esModule", {
    value: true
});
var $a8848f9916d99690$var$actionTypes = {
    equals: "",
    element: "~",
    start: "^",
    end: "$",
    any: "*",
    not: "!",
    hyphen: "|"
};
var $a8848f9916d99690$var$charsToEscape = new Set($a8848f9916d99690$var$__spreadArray($a8848f9916d99690$var$__spreadArray([], Object.keys($a8848f9916d99690$var$actionTypes).map(function(typeKey) {
    return $a8848f9916d99690$var$actionTypes[typeKey];
}).filter(Boolean)), [
    ":",
    "[",
    "]",
    " ",
    "\\",
    "(",
    ")",
    "'"
]));
function $a8848f9916d99690$var$stringify(selector) {
    return selector.map($a8848f9916d99690$var$stringifySubselector).join(", ");
}
$a8848f9916d99690$var$stringify$1.default = $a8848f9916d99690$var$stringify;
function $a8848f9916d99690$var$stringifySubselector(token) {
    return token.map($a8848f9916d99690$var$stringifyToken).join("");
}
function $a8848f9916d99690$var$stringifyToken(token) {
    switch(token.type){
        case "child":
            return " > ";
        case "parent":
            return " < ";
        case "sibling":
            return " ~ ";
        case "adjacent":
            return " + ";
        case "descendant":
            return " ";
        case "universal":
            return $a8848f9916d99690$var$getNamespace(token.namespace) + "*";
        case "tag":
            return $a8848f9916d99690$var$getNamespacedName(token);
        case "pseudo-element":
            return "::" + $a8848f9916d99690$var$escapeName(token.name);
        case "pseudo":
            if (token.data === null) return ":" + $a8848f9916d99690$var$escapeName(token.name);
            if (typeof token.data === "string") return ":" + $a8848f9916d99690$var$escapeName(token.name) + "(" + $a8848f9916d99690$var$escapeName(token.data) + ")";
            return ":" + $a8848f9916d99690$var$escapeName(token.name) + "(" + $a8848f9916d99690$var$stringify(token.data) + ")";
        case "attribute":
            if (token.name === "id" && token.action === "equals" && !token.ignoreCase && !token.namespace) return "#" + $a8848f9916d99690$var$escapeName(token.value);
            if (token.name === "class" && token.action === "element" && !token.ignoreCase && !token.namespace) return "." + $a8848f9916d99690$var$escapeName(token.value);
            var name_1 = $a8848f9916d99690$var$getNamespacedName(token);
            if (token.action === "exists") return "[" + name_1 + "]";
            return "[" + name_1 + $a8848f9916d99690$var$actionTypes[token.action] + "='" + $a8848f9916d99690$var$escapeName(token.value) + "'" + (token.ignoreCase ? "i" : token.ignoreCase === false ? "s" : "") + "]";
    }
}
function $a8848f9916d99690$var$getNamespacedName(token) {
    return "" + $a8848f9916d99690$var$getNamespace(token.namespace) + $a8848f9916d99690$var$escapeName(token.name);
}
function $a8848f9916d99690$var$getNamespace(namespace) {
    return namespace !== null ? (namespace === "*" ? "*" : $a8848f9916d99690$var$escapeName(namespace)) + "|" : "";
}
function $a8848f9916d99690$var$escapeName(str) {
    return str.split("").map(function(c) {
        return $a8848f9916d99690$var$charsToEscape.has(c) ? "\\" + c : c;
    }).join("");
}
(function(exports3) {
    var __createBinding = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
            enumerable: true,
            get: function() {
                return m[k];
            }
        });
    } : function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    });
    var __exportStar = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__exportStar || function(m, exports) {
        for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    var __importDefault = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : {
            default: mod
        };
    };
    Object.defineProperty(exports3, "__esModule", {
        value: true
    });
    exports3.stringify = exports3.parse = void 0;
    __exportStar($a8848f9916d99690$var$parse$4, exports3);
    var parse_1 = $a8848f9916d99690$var$parse$4;
    Object.defineProperty(exports3, "parse", {
        enumerable: true,
        get: function() {
            return __importDefault(parse_1).default;
        }
    });
    var stringify_1 = $a8848f9916d99690$var$stringify$1;
    Object.defineProperty(exports3, "stringify", {
        enumerable: true,
        get: function() {
            return __importDefault(stringify_1).default;
        }
    });
})($a8848f9916d99690$var$lib$2);
var $a8848f9916d99690$var$sort = {
};
var $a8848f9916d99690$var$procedure = {
};
(function(exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.isTraversal = exports.procedure = void 0;
    exports.procedure = {
        universal: 50,
        tag: 30,
        attribute: 1,
        pseudo: 0,
        "pseudo-element": 0,
        descendant: -1,
        child: -1,
        parent: -1,
        sibling: -1,
        adjacent: -1,
        _flexibleDescendant: -1
    };
    function isTraversal(t) {
        return exports.procedure[t.type] < 0;
    }
    exports.isTraversal = isTraversal;
})($a8848f9916d99690$var$procedure);
Object.defineProperty($a8848f9916d99690$var$sort, "__esModule", {
    value: true
});
var $a8848f9916d99690$var$procedure_1$1 = $a8848f9916d99690$var$procedure;
var $a8848f9916d99690$var$attributes$1 = {
    exists: 10,
    equals: 8,
    not: 7,
    start: 6,
    end: 6,
    any: 5,
    hyphen: 4,
    element: 4
};
function $a8848f9916d99690$var$sortByProcedure(arr) {
    var procs = arr.map($a8848f9916d99690$var$getProcedure);
    for(var i = 1; i < arr.length; i++){
        var procNew = procs[i];
        if (procNew < 0) continue;
        for(var j = i - 1; j >= 0 && procNew < procs[j]; j--){
            var token = arr[j + 1];
            arr[j + 1] = arr[j];
            arr[j] = token;
            procs[j + 1] = procs[j];
            procs[j] = procNew;
        }
    }
}
$a8848f9916d99690$var$sort.default = $a8848f9916d99690$var$sortByProcedure;
function $a8848f9916d99690$var$getProcedure(token) {
    var proc = $a8848f9916d99690$var$procedure_1$1.procedure[token.type];
    if (token.type === "attribute") {
        proc = $a8848f9916d99690$var$attributes$1[token.action];
        if (proc === $a8848f9916d99690$var$attributes$1.equals && token.name === "id") proc = 9;
        if (token.ignoreCase) proc >>= 1;
    } else if (token.type === "pseudo") {
        if (!token.data) proc = 3;
        else if (token.name === "has" || token.name === "contains") proc = 0;
        else if (Array.isArray(token.data)) {
            proc = 0;
            for(var i = 0; i < token.data.length; i++){
                if (token.data[i].length !== 1) continue;
                var cur = $a8848f9916d99690$var$getProcedure(token.data[i][0]);
                if (cur === 0) {
                    proc = 0;
                    break;
                }
                if (cur > proc) proc = cur;
            }
            if (token.data.length > 1 && proc > 0) proc -= 1;
        } else proc = 1;
    }
    return proc;
}
var $a8848f9916d99690$var$general = {
};
var $a8848f9916d99690$var$attributes = {
};
Object.defineProperty($a8848f9916d99690$var$attributes, "__esModule", {
    value: true
});
$a8848f9916d99690$var$attributes.attributeRules = void 0;
var $a8848f9916d99690$var$boolbase_1$2 = $a8848f9916d99690$var$boolbase;
var $a8848f9916d99690$var$reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;
function $a8848f9916d99690$var$escapeRegex(value) {
    return value.replace($a8848f9916d99690$var$reChars, "\\$&");
}
$a8848f9916d99690$var$attributes.attributeRules = {
    equals: function(next, data, _a) {
        var adapter = _a.adapter;
        var name11 = data.name;
        var value = data.value;
        if (data.ignoreCase) {
            value = value.toLowerCase();
            return function(elem) {
                var attr = adapter.getAttributeValue(elem, name11);
                return attr != null && attr.length === value.length && attr.toLowerCase() === value && next(elem);
            };
        }
        return function(elem) {
            return adapter.getAttributeValue(elem, name11) === value && next(elem);
        };
    },
    hyphen: function(next, data, _a) {
        var adapter = _a.adapter;
        var name12 = data.name;
        var value = data.value;
        var len = value.length;
        if (data.ignoreCase) {
            value = value.toLowerCase();
            return function hyphenIC(elem) {
                var attr = adapter.getAttributeValue(elem, name12);
                return attr != null && (attr.length === len || attr.charAt(len) === "-") && attr.substr(0, len).toLowerCase() === value && next(elem);
            };
        }
        return function hyphen(elem) {
            var attr = adapter.getAttributeValue(elem, name12);
            return attr != null && (attr.length === len || attr.charAt(len) === "-") && attr.substr(0, len) === value && next(elem);
        };
    },
    element: function(next, _a, _b) {
        var name13 = _a.name, value = _a.value, ignoreCase = _a.ignoreCase;
        var adapter = _b.adapter;
        if (/\s/.test(value)) return $a8848f9916d99690$var$boolbase_1$2.falseFunc;
        var regex = new RegExp("(?:^|\\s)" + $a8848f9916d99690$var$escapeRegex(value) + "(?:$|\\s)", ignoreCase ? "i" : "");
        return function element(elem) {
            var attr = adapter.getAttributeValue(elem, name13);
            return attr != null && attr.length >= value.length && regex.test(attr) && next(elem);
        };
    },
    exists: function(next, _a, _b) {
        var name14 = _a.name;
        var adapter = _b.adapter;
        return function(elem) {
            return adapter.hasAttrib(elem, name14) && next(elem);
        };
    },
    start: function(next, data, _a2) {
        var adapter = _a2.adapter;
        var name15 = data.name;
        var value = data.value;
        var len = value.length;
        if (len === 0) return $a8848f9916d99690$var$boolbase_1$2.falseFunc;
        if (data.ignoreCase) {
            value = value.toLowerCase();
            return function(elem) {
                var attr = adapter.getAttributeValue(elem, name15);
                return attr != null && attr.length >= len && attr.substr(0, len).toLowerCase() === value && next(elem);
            };
        }
        return function(elem) {
            var _a;
            return !!((_a = adapter.getAttributeValue(elem, name15)) === null || _a === void 0 ? void 0 : _a.startsWith(value)) && next(elem);
        };
    },
    end: function(next, data, _a3) {
        var adapter = _a3.adapter;
        var name16 = data.name;
        var value = data.value;
        var len = -value.length;
        if (len === 0) return $a8848f9916d99690$var$boolbase_1$2.falseFunc;
        if (data.ignoreCase) {
            value = value.toLowerCase();
            return function(elem) {
                var _a;
                return ((_a = adapter.getAttributeValue(elem, name16)) === null || _a === void 0 ? void 0 : _a.substr(len).toLowerCase()) === value && next(elem);
            };
        }
        return function(elem) {
            var _a;
            return !!((_a = adapter.getAttributeValue(elem, name16)) === null || _a === void 0 ? void 0 : _a.endsWith(value)) && next(elem);
        };
    },
    any: function(next, data, _a4) {
        var adapter = _a4.adapter;
        var name17 = data.name, value = data.value;
        if (value === "") return $a8848f9916d99690$var$boolbase_1$2.falseFunc;
        if (data.ignoreCase) {
            var regex_1 = new RegExp($a8848f9916d99690$var$escapeRegex(value), "i");
            return function anyIC(elem) {
                var attr = adapter.getAttributeValue(elem, name17);
                return attr != null && attr.length >= value.length && regex_1.test(attr) && next(elem);
            };
        }
        return function(elem) {
            var _a;
            return !!((_a = adapter.getAttributeValue(elem, name17)) === null || _a === void 0 ? void 0 : _a.includes(value)) && next(elem);
        };
    },
    not: function(next, data, _a) {
        var adapter = _a.adapter;
        var name18 = data.name;
        var value = data.value;
        if (value === "") return function(elem) {
            return !!adapter.getAttributeValue(elem, name18) && next(elem);
        };
        else if (data.ignoreCase) {
            value = value.toLowerCase();
            return function(elem) {
                var attr = adapter.getAttributeValue(elem, name18);
                return (attr == null || attr.length !== value.length || attr.toLowerCase() !== value) && next(elem);
            };
        }
        return function(elem) {
            return adapter.getAttributeValue(elem, name18) !== value && next(elem);
        };
    }
};
var $a8848f9916d99690$var$pseudoSelectors = {
};
var $a8848f9916d99690$var$filters$1 = {
};
var $a8848f9916d99690$var$lib$1 = {
};
var $a8848f9916d99690$var$parse$2 = {
};
Object.defineProperty($a8848f9916d99690$var$parse$2, "__esModule", {
    value: true
});
$a8848f9916d99690$var$parse$2.parse = void 0;
var $a8848f9916d99690$var$RE_NTH_ELEMENT = /^([+-]?\d*n)?\s*(?:([+-]?)\s*(\d+))?$/;
function $a8848f9916d99690$var$parse$1(formula) {
    formula = formula.trim().toLowerCase();
    if (formula === "even") return [
        2,
        0
    ];
    else if (formula === "odd") return [
        2,
        1
    ];
    var parsed = formula.match($a8848f9916d99690$var$RE_NTH_ELEMENT);
    if (!parsed) throw new Error("n-th rule couldn't be parsed ('" + formula + "')");
    var a;
    if (parsed[1]) {
        a = parseInt(parsed[1], 10);
        if (isNaN(a)) a = parsed[1].startsWith("-") ? -1 : 1;
    } else a = 0;
    var b = (parsed[2] === "-" ? -1 : 1) * (parsed[3] ? parseInt(parsed[3], 10) : 0);
    return [
        a,
        b
    ];
}
$a8848f9916d99690$var$parse$2.parse = $a8848f9916d99690$var$parse$1;
var $a8848f9916d99690$var$compile$2 = {
};
Object.defineProperty($a8848f9916d99690$var$compile$2, "__esModule", {
    value: true
});
$a8848f9916d99690$var$compile$2.compile = void 0;
var $a8848f9916d99690$var$boolbase_1$1 = $a8848f9916d99690$var$boolbase;
function $a8848f9916d99690$var$compile$1(parsed) {
    var a = parsed[0];
    var b = parsed[1] - 1;
    if (b < 0 && a <= 0) return $a8848f9916d99690$var$boolbase_1$1.falseFunc;
    if (a === -1) return function(index) {
        return index <= b;
    };
    if (a === 0) return function(index) {
        return index === b;
    };
    if (a === 1) return b < 0 ? $a8848f9916d99690$var$boolbase_1$1.trueFunc : function(index) {
        return index >= b;
    };
    var absA = Math.abs(a);
    var bMod = (b % absA + absA) % absA;
    return a > 1 ? function(index) {
        return index >= b && index % absA === bMod;
    } : function(index) {
        return index <= b && index % absA === bMod;
    };
}
$a8848f9916d99690$var$compile$2.compile = $a8848f9916d99690$var$compile$1;
(function(exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.compile = exports.parse = void 0;
    var parse_1 = $a8848f9916d99690$var$parse$2;
    Object.defineProperty(exports, "parse", {
        enumerable: true,
        get: function() {
            return parse_1.parse;
        }
    });
    var compile_1 = $a8848f9916d99690$var$compile$2;
    Object.defineProperty(exports, "compile", {
        enumerable: true,
        get: function() {
            return compile_1.compile;
        }
    });
    function nthCheck(formula) {
        return compile_1.compile(parse_1.parse(formula));
    }
    exports.default = nthCheck;
})($a8848f9916d99690$var$lib$1);
(function(exports) {
    var __importDefault = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : {
            default: mod
        };
    };
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.filters = void 0;
    var nth_check_1 = __importDefault($a8848f9916d99690$var$lib$1);
    var boolbase_1 = $a8848f9916d99690$var$boolbase;
    function getChildFunc(next, adapter) {
        return function(elem) {
            var parent = adapter.getParent(elem);
            return parent != null && adapter.isTag(parent) && next(elem);
        };
    }
    exports.filters = {
        contains: function(next, text, _a) {
            var adapter = _a.adapter;
            return function contains(elem) {
                return next(elem) && adapter.getText(elem).includes(text);
            };
        },
        icontains: function(next, text, _a) {
            var adapter = _a.adapter;
            var itext = text.toLowerCase();
            return function icontains(elem) {
                return next(elem) && adapter.getText(elem).toLowerCase().includes(itext);
            };
        },
        "nth-child": function(next, rule, _a) {
            var adapter = _a.adapter, equals = _a.equals;
            var func = nth_check_1.default(rule);
            if (func === boolbase_1.falseFunc) return boolbase_1.falseFunc;
            if (func === boolbase_1.trueFunc) return getChildFunc(next, adapter);
            return function nthChild(elem) {
                var siblings = adapter.getSiblings(elem);
                var pos = 0;
                for(var i = 0; i < siblings.length; i++){
                    if (equals(elem, siblings[i])) break;
                    if (adapter.isTag(siblings[i])) pos++;
                }
                return func(pos) && next(elem);
            };
        },
        "nth-last-child": function(next, rule, _a) {
            var adapter = _a.adapter, equals = _a.equals;
            var func = nth_check_1.default(rule);
            if (func === boolbase_1.falseFunc) return boolbase_1.falseFunc;
            if (func === boolbase_1.trueFunc) return getChildFunc(next, adapter);
            return function nthLastChild(elem) {
                var siblings = adapter.getSiblings(elem);
                var pos = 0;
                for(var i = siblings.length - 1; i >= 0; i--){
                    if (equals(elem, siblings[i])) break;
                    if (adapter.isTag(siblings[i])) pos++;
                }
                return func(pos) && next(elem);
            };
        },
        "nth-of-type": function(next, rule, _a) {
            var adapter = _a.adapter, equals = _a.equals;
            var func = nth_check_1.default(rule);
            if (func === boolbase_1.falseFunc) return boolbase_1.falseFunc;
            if (func === boolbase_1.trueFunc) return getChildFunc(next, adapter);
            return function nthOfType(elem) {
                var siblings = adapter.getSiblings(elem);
                var pos = 0;
                for(var i = 0; i < siblings.length; i++){
                    var currentSibling = siblings[i];
                    if (equals(elem, currentSibling)) break;
                    if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === adapter.getName(elem)) pos++;
                }
                return func(pos) && next(elem);
            };
        },
        "nth-last-of-type": function(next, rule, _a) {
            var adapter = _a.adapter, equals = _a.equals;
            var func = nth_check_1.default(rule);
            if (func === boolbase_1.falseFunc) return boolbase_1.falseFunc;
            if (func === boolbase_1.trueFunc) return getChildFunc(next, adapter);
            return function nthLastOfType(elem) {
                var siblings = adapter.getSiblings(elem);
                var pos = 0;
                for(var i = siblings.length - 1; i >= 0; i--){
                    var currentSibling = siblings[i];
                    if (equals(elem, currentSibling)) break;
                    if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === adapter.getName(elem)) pos++;
                }
                return func(pos) && next(elem);
            };
        },
        root: function(next, _rule, _a) {
            var adapter = _a.adapter;
            return function(elem) {
                var parent = adapter.getParent(elem);
                return (parent == null || !adapter.isTag(parent)) && next(elem);
            };
        },
        scope: function(next, rule, options, context) {
            var equals = options.equals;
            if (!context || context.length === 0) return exports.filters.root(next, rule, options);
            if (context.length === 1) return function(elem) {
                return equals(context[0], elem) && next(elem);
            };
            return function(elem) {
                return context.includes(elem) && next(elem);
            };
        },
        hover: dynamicStatePseudo("isHovered"),
        visited: dynamicStatePseudo("isVisited"),
        active: dynamicStatePseudo("isActive")
    };
    function dynamicStatePseudo(name) {
        return function dynamicPseudo(next, _rule, _a) {
            var adapter = _a.adapter;
            var func = adapter[name];
            if (typeof func !== "function") return boolbase_1.falseFunc;
            return function active(elem) {
                return func(elem) && next(elem);
            };
        };
    }
})($a8848f9916d99690$var$filters$1);
var $a8848f9916d99690$var$pseudos = {
};
Object.defineProperty($a8848f9916d99690$var$pseudos, "__esModule", {
    value: true
});
$a8848f9916d99690$var$pseudos.verifyPseudoArgs = $a8848f9916d99690$var$pseudos.pseudos = void 0;
$a8848f9916d99690$var$pseudos.pseudos = {
    empty: function(elem1, _a) {
        var adapter = _a.adapter;
        return !adapter.getChildren(elem1).some(function(elem) {
            return adapter.isTag(elem) || adapter.getText(elem) !== "";
        });
    },
    "first-child": function(elem2, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var firstChild = adapter.getSiblings(elem2).find(function(elem) {
            return adapter.isTag(elem);
        });
        return firstChild != null && equals(elem2, firstChild);
    },
    "last-child": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var siblings = adapter.getSiblings(elem);
        for(var i = siblings.length - 1; i >= 0; i--){
            if (equals(elem, siblings[i])) return true;
            if (adapter.isTag(siblings[i])) break;
        }
        return false;
    },
    "first-of-type": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var siblings = adapter.getSiblings(elem);
        var elemName = adapter.getName(elem);
        for(var i = 0; i < siblings.length; i++){
            var currentSibling = siblings[i];
            if (equals(elem, currentSibling)) return true;
            if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === elemName) break;
        }
        return false;
    },
    "last-of-type": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var siblings = adapter.getSiblings(elem);
        var elemName = adapter.getName(elem);
        for(var i = siblings.length - 1; i >= 0; i--){
            var currentSibling = siblings[i];
            if (equals(elem, currentSibling)) return true;
            if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === elemName) break;
        }
        return false;
    },
    "only-of-type": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var elemName = adapter.getName(elem);
        return adapter.getSiblings(elem).every(function(sibling) {
            return equals(elem, sibling) || !adapter.isTag(sibling) || adapter.getName(sibling) !== elemName;
        });
    },
    "only-child": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        return adapter.getSiblings(elem).every(function(sibling) {
            return equals(elem, sibling) || !adapter.isTag(sibling);
        });
    }
};
function $a8848f9916d99690$var$verifyPseudoArgs(func, name19, subselect) {
    if (subselect === null) {
        if (func.length > 2) throw new Error("pseudo-selector :" + name19 + " requires an argument");
    } else if (func.length === 2) throw new Error("pseudo-selector :" + name19 + " doesn't have any arguments");
}
$a8848f9916d99690$var$pseudos.verifyPseudoArgs = $a8848f9916d99690$var$verifyPseudoArgs;
var $a8848f9916d99690$var$aliases = {
};
Object.defineProperty($a8848f9916d99690$var$aliases, "__esModule", {
    value: true
});
$a8848f9916d99690$var$aliases.aliases = void 0;
$a8848f9916d99690$var$aliases.aliases = {
    "any-link": ":is(a, area, link)[href]",
    link: ":any-link:not(:visited)",
    disabled: ":is(\n        :is(button, input, select, textarea, optgroup, option)[disabled],\n        optgroup[disabled] > option,\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\n    )",
    enabled: ":not(:disabled)",
    checked: ":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",
    required: ":is(input, select, textarea)[required]",
    optional: ":is(input, select, textarea):not([required])",
    selected: "option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",
    checkbox: "[type=checkbox]",
    file: "[type=file]",
    password: "[type=password]",
    radio: "[type=radio]",
    reset: "[type=reset]",
    image: "[type=image]",
    submit: "[type=submit]",
    parent: ":not(:empty)",
    header: ":is(h1, h2, h3, h4, h5, h6)",
    button: ":is(button, input[type=button])",
    input: ":is(input, textarea, select, button)",
    text: "input:is(:not([type!='']), [type=text])"
};
var $a8848f9916d99690$var$subselects = {
};
(function(exports) {
    var __spreadArray = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__spreadArray || function(to, from) {
        for(var i = 0, il = from.length, j = to.length; i < il; i++, j++)to[j] = from[i];
        return to;
    };
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.subselects = exports.getNextSiblings = exports.ensureIsTag = exports.PLACEHOLDER_ELEMENT = void 0;
    var boolbase_1 = $a8848f9916d99690$var$boolbase;
    var procedure_1 = $a8848f9916d99690$var$procedure;
    exports.PLACEHOLDER_ELEMENT = {
    };
    function ensureIsTag(next, adapter) {
        if (next === boolbase_1.falseFunc) return boolbase_1.falseFunc;
        return function(elem) {
            return adapter.isTag(elem) && next(elem);
        };
    }
    exports.ensureIsTag = ensureIsTag;
    function getNextSiblings(elem, adapter) {
        var siblings = adapter.getSiblings(elem);
        if (siblings.length <= 1) return [];
        var elemIndex = siblings.indexOf(elem);
        if (elemIndex < 0 || elemIndex === siblings.length - 1) return [];
        return siblings.slice(elemIndex + 1).filter(adapter.isTag);
    }
    exports.getNextSiblings = getNextSiblings;
    var is = function(next, token, options, context, compileToken) {
        var opts = {
            xmlMode: !!options.xmlMode,
            adapter: options.adapter,
            equals: options.equals
        };
        var func = compileToken(token, opts, context);
        return function(elem) {
            return func(elem) && next(elem);
        };
    };
    exports.subselects = {
        is: is,
        matches: is,
        not: function(next, token, options, context, compileToken) {
            var opts = {
                xmlMode: !!options.xmlMode,
                adapter: options.adapter,
                equals: options.equals
            };
            var func = compileToken(token, opts, context);
            if (func === boolbase_1.falseFunc) return next;
            if (func === boolbase_1.trueFunc) return boolbase_1.falseFunc;
            return function not(elem) {
                return !func(elem) && next(elem);
            };
        },
        has: function(next, subselect, options, _context, compileToken) {
            var adapter = options.adapter;
            var opts = {
                xmlMode: !!options.xmlMode,
                adapter: adapter,
                equals: options.equals
            };
            var context = subselect.some(function(s) {
                return s.some(procedure_1.isTraversal);
            }) ? [
                exports.PLACEHOLDER_ELEMENT
            ] : undefined;
            var compiled = compileToken(subselect, opts, context);
            if (compiled === boolbase_1.falseFunc) return boolbase_1.falseFunc;
            if (compiled === boolbase_1.trueFunc) return function(elem) {
                return adapter.getChildren(elem).some(adapter.isTag) && next(elem);
            };
            var hasElement = ensureIsTag(compiled, adapter);
            var _a = compiled.shouldTestNextSiblings, shouldTestNextSiblings = _a === void 0 ? false : _a;
            if (context) return function(elem) {
                context[0] = elem;
                var childs = adapter.getChildren(elem);
                var nextElements = shouldTestNextSiblings ? __spreadArray(__spreadArray([], childs), getNextSiblings(elem, adapter)) : childs;
                return next(elem) && adapter.existsOne(hasElement, nextElements);
            };
            return function(elem) {
                return next(elem) && adapter.existsOne(hasElement, adapter.getChildren(elem));
            };
        }
    };
})($a8848f9916d99690$var$subselects);
(function(exports) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.compilePseudoSelector = exports.aliases = exports.pseudos = exports.filters = void 0;
    var boolbase_1 = $a8848f9916d99690$var$boolbase;
    var css_what_1 = $a8848f9916d99690$var$lib$2;
    var filters_1 = $a8848f9916d99690$var$filters$1;
    Object.defineProperty(exports, "filters", {
        enumerable: true,
        get: function() {
            return filters_1.filters;
        }
    });
    var pseudos_1 = $a8848f9916d99690$var$pseudos;
    Object.defineProperty(exports, "pseudos", {
        enumerable: true,
        get: function() {
            return pseudos_1.pseudos;
        }
    });
    var aliases_1 = $a8848f9916d99690$var$aliases;
    Object.defineProperty(exports, "aliases", {
        enumerable: true,
        get: function() {
            return aliases_1.aliases;
        }
    });
    var subselects_1 = $a8848f9916d99690$var$subselects;
    function compilePseudoSelector(next, selector, options, context, compileToken) {
        var name20 = selector.name, data = selector.data;
        if (Array.isArray(data)) return subselects_1.subselects[name20](next, data, options, context, compileToken);
        if (name20 in aliases_1.aliases) {
            if (data != null) throw new Error("Pseudo " + name20 + " doesn't have any arguments");
            var alias = css_what_1.parse(aliases_1.aliases[name20], options);
            return subselects_1.subselects.is(next, alias, options, context, compileToken);
        }
        if (name20 in filters_1.filters) return filters_1.filters[name20](next, data, options, context);
        if (name20 in pseudos_1.pseudos) {
            var pseudo_1 = pseudos_1.pseudos[name20];
            pseudos_1.verifyPseudoArgs(pseudo_1, name20, data);
            return pseudo_1 === boolbase_1.falseFunc ? boolbase_1.falseFunc : next === boolbase_1.trueFunc ? function(elem) {
                return pseudo_1(elem, options, data);
            } : function(elem) {
                return pseudo_1(elem, options, data) && next(elem);
            };
        }
        throw new Error("unmatched pseudo-class :" + name20);
    }
    exports.compilePseudoSelector = compilePseudoSelector;
})($a8848f9916d99690$var$pseudoSelectors);
Object.defineProperty($a8848f9916d99690$var$general, "__esModule", {
    value: true
});
$a8848f9916d99690$var$general.compileGeneralSelector = void 0;
var $a8848f9916d99690$var$attributes_1 = $a8848f9916d99690$var$attributes;
var $a8848f9916d99690$var$pseudo_selectors_1 = $a8848f9916d99690$var$pseudoSelectors;
function $a8848f9916d99690$var$compileGeneralSelector(next, selector, options, context, compileToken) {
    var adapter = options.adapter, equals = options.equals;
    switch(selector.type){
        case "pseudo-element":
            throw new Error("Pseudo-elements are not supported by css-select");
        case "attribute":
            return $a8848f9916d99690$var$attributes_1.attributeRules[selector.action](next, selector, options);
        case "pseudo":
            return $a8848f9916d99690$var$pseudo_selectors_1.compilePseudoSelector(next, selector, options, context, compileToken);
        case "tag":
            return function tag(elem) {
                return adapter.getName(elem) === selector.name && next(elem);
            };
        case "descendant":
            if (options.cacheResults === false || typeof WeakSet === "undefined") return function descendant(elem) {
                var current = elem;
                while(current = adapter.getParent(current)){
                    if (adapter.isTag(current) && next(current)) return true;
                }
                return false;
            };
            var isFalseCache_1 = new WeakSet;
            return function cachedDescendant(elem) {
                var current = elem;
                while(current = adapter.getParent(current))if (!isFalseCache_1.has(current)) {
                    if (adapter.isTag(current) && next(current)) return true;
                    isFalseCache_1.add(current);
                }
                return false;
            };
        case "_flexibleDescendant":
            return function flexibleDescendant(elem) {
                var current = elem;
                do {
                    if (adapter.isTag(current) && next(current)) return true;
                }while (current = adapter.getParent(current))
                return false;
            };
        case "parent":
            return function parent(elem3) {
                return adapter.getChildren(elem3).some(function(elem) {
                    return adapter.isTag(elem) && next(elem);
                });
            };
        case "child":
            return function child(elem) {
                var parent = adapter.getParent(elem);
                return parent != null && adapter.isTag(parent) && next(parent);
            };
        case "sibling":
            return function sibling(elem) {
                var siblings = adapter.getSiblings(elem);
                for(var i = 0; i < siblings.length; i++){
                    var currentSibling = siblings[i];
                    if (equals(elem, currentSibling)) break;
                    if (adapter.isTag(currentSibling) && next(currentSibling)) return true;
                }
                return false;
            };
        case "adjacent":
            return function adjacent(elem) {
                var siblings = adapter.getSiblings(elem);
                var lastElement;
                for(var i = 0; i < siblings.length; i++){
                    var currentSibling = siblings[i];
                    if (equals(elem, currentSibling)) break;
                    if (adapter.isTag(currentSibling)) lastElement = currentSibling;
                }
                return !!lastElement && next(lastElement);
            };
        case "universal":
            return next;
    }
}
$a8848f9916d99690$var$general.compileGeneralSelector = $a8848f9916d99690$var$compileGeneralSelector;
var $a8848f9916d99690$var$__importDefault = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
};
Object.defineProperty($a8848f9916d99690$var$compile$3, "__esModule", {
    value: true
});
$a8848f9916d99690$var$compile$3.compileToken = $a8848f9916d99690$var$compile$3.compileUnsafe = $a8848f9916d99690$var$compile$3.compile = void 0;
var $a8848f9916d99690$var$css_what_1 = $a8848f9916d99690$var$lib$2;
var $a8848f9916d99690$var$boolbase_1 = $a8848f9916d99690$var$boolbase;
var $a8848f9916d99690$var$sort_1 = $a8848f9916d99690$var$__importDefault($a8848f9916d99690$var$sort);
var $a8848f9916d99690$var$procedure_1 = $a8848f9916d99690$var$procedure;
var $a8848f9916d99690$var$general_1 = $a8848f9916d99690$var$general;
var $a8848f9916d99690$var$subselects_1 = $a8848f9916d99690$var$subselects;
function $a8848f9916d99690$var$compile(selector, options, context) {
    var next = $a8848f9916d99690$var$compileUnsafe(selector, options, context);
    return $a8848f9916d99690$var$subselects_1.ensureIsTag(next, options.adapter);
}
$a8848f9916d99690$var$compile$3.compile = $a8848f9916d99690$var$compile;
function $a8848f9916d99690$var$compileUnsafe(selector, options, context) {
    var token = typeof selector === "string" ? $a8848f9916d99690$var$css_what_1.parse(selector, options) : selector;
    return $a8848f9916d99690$var$compileToken(token, options, context);
}
$a8848f9916d99690$var$compile$3.compileUnsafe = $a8848f9916d99690$var$compileUnsafe;
function $a8848f9916d99690$var$includesScopePseudo(t) {
    return t.type === "pseudo" && (t.name === "scope" || Array.isArray(t.data) && t.data.some(function(data) {
        return data.some($a8848f9916d99690$var$includesScopePseudo);
    }));
}
var $a8848f9916d99690$var$DESCENDANT_TOKEN = {
    type: "descendant"
};
var $a8848f9916d99690$var$FLEXIBLE_DESCENDANT_TOKEN = {
    type: "_flexibleDescendant"
};
var $a8848f9916d99690$var$SCOPE_TOKEN = {
    type: "pseudo",
    name: "scope",
    data: null
};
function $a8848f9916d99690$var$absolutize(token, _a, context) {
    var adapter = _a.adapter;
    var hasContext = !!(context === null || context === void 0 ? void 0 : context.every(function(e) {
        var parent = adapter.isTag(e) && adapter.getParent(e);
        return e === $a8848f9916d99690$var$subselects_1.PLACEHOLDER_ELEMENT || parent && adapter.isTag(parent);
    }));
    for(var _i = 0, token_1 = token; _i < token_1.length; _i++){
        var t = token_1[_i];
        if (t.length > 0 && $a8848f9916d99690$var$procedure_1.isTraversal(t[0]) && t[0].type !== "descendant") ;
        else if (hasContext && !t.some($a8848f9916d99690$var$includesScopePseudo)) t.unshift($a8848f9916d99690$var$DESCENDANT_TOKEN);
        else continue;
        t.unshift($a8848f9916d99690$var$SCOPE_TOKEN);
    }
}
function $a8848f9916d99690$var$compileToken(token, options, context) {
    var _a;
    token = token.filter(function(t) {
        return t.length > 0;
    });
    token.forEach($a8848f9916d99690$var$sort_1.default);
    context = (_a = options.context) !== null && _a !== void 0 ? _a : context;
    var isArrayContext = Array.isArray(context);
    var finalContext = context && (Array.isArray(context) ? context : [
        context
    ]);
    $a8848f9916d99690$var$absolutize(token, options, finalContext);
    var shouldTestNextSiblings = false;
    var query = token.map(function(rules) {
        if (rules.length >= 2) {
            var first = rules[0], second = rules[1];
            if (first.type !== "pseudo" || first.name !== "scope") ;
            else if (isArrayContext && second.type === "descendant") rules[1] = $a8848f9916d99690$var$FLEXIBLE_DESCENDANT_TOKEN;
            else if (second.type === "adjacent" || second.type === "sibling") shouldTestNextSiblings = true;
        }
        return $a8848f9916d99690$var$compileRules(rules, options, finalContext);
    }).reduce($a8848f9916d99690$var$reduceRules, $a8848f9916d99690$var$boolbase_1.falseFunc);
    query.shouldTestNextSiblings = shouldTestNextSiblings;
    return query;
}
$a8848f9916d99690$var$compile$3.compileToken = $a8848f9916d99690$var$compileToken;
function $a8848f9916d99690$var$compileRules(rules, options, context) {
    var _a;
    return rules.reduce(function(previous, rule) {
        return previous === $a8848f9916d99690$var$boolbase_1.falseFunc ? $a8848f9916d99690$var$boolbase_1.falseFunc : $a8848f9916d99690$var$general_1.compileGeneralSelector(previous, rule, options, context, $a8848f9916d99690$var$compileToken);
    }, (_a = options.rootFunc) !== null && _a !== void 0 ? _a : $a8848f9916d99690$var$boolbase_1.trueFunc);
}
function $a8848f9916d99690$var$reduceRules(a, b) {
    if (b === $a8848f9916d99690$var$boolbase_1.falseFunc || a === $a8848f9916d99690$var$boolbase_1.trueFunc) return a;
    if (a === $a8848f9916d99690$var$boolbase_1.falseFunc || b === $a8848f9916d99690$var$boolbase_1.trueFunc) return b;
    return function combine(elem) {
        return a(elem) || b(elem);
    };
}
(function(exports) {
    var __createBinding = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
            enumerable: true,
            get: function() {
                return m[k];
            }
        });
    } : function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    });
    var __setModuleDefault = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", {
            enumerable: true,
            value: v
        });
    } : function(o, v) {
        o["default"] = v;
    });
    var __importStar = $a8848f9916d99690$var$commonjsGlobal && $a8848f9916d99690$var$commonjsGlobal.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {
        };
        if (mod != null) {
            for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.aliases = exports.pseudos = exports.filters = exports.is = exports.selectOne = exports.selectAll = exports.prepareContext = exports._compileToken = exports._compileUnsafe = exports.compile = void 0;
    var DomUtils = __importStar($a8848f9916d99690$var$lib$7);
    var boolbase_1 = $a8848f9916d99690$var$boolbase;
    var compile_1 = $a8848f9916d99690$var$compile$3;
    var subselects_1 = $a8848f9916d99690$var$subselects;
    var defaultEquals = function(a, b) {
        return a === b;
    };
    var defaultOptions = {
        adapter: DomUtils,
        equals: defaultEquals
    };
    function convertOptionFormats(options) {
        var _a, _b, _c, _d;
        var opts = options !== null && options !== void 0 ? options : defaultOptions;
        (_a = opts.adapter) !== null && _a !== void 0 || (opts.adapter = DomUtils);
        (_b = opts.equals) !== null && _b !== void 0 || (opts.equals = (_d = (_c = opts.adapter) === null || _c === void 0 ? void 0 : _c.equals) !== null && _d !== void 0 ? _d : defaultEquals);
        return opts;
    }
    function wrapCompile(func) {
        return function addAdapter(selector, options, context) {
            var opts = convertOptionFormats(options);
            return func(selector, opts, context);
        };
    }
    exports.compile = wrapCompile(compile_1.compile);
    exports._compileUnsafe = wrapCompile(compile_1.compileUnsafe);
    exports._compileToken = wrapCompile(compile_1.compileToken);
    function getSelectorFunc(searchFunc) {
        return function select(query, elements, options) {
            var opts = convertOptionFormats(options);
            if (typeof query !== "function") query = compile_1.compileUnsafe(query, opts, elements);
            var filteredElements = prepareContext(elements, opts.adapter, query.shouldTestNextSiblings);
            return searchFunc(query, filteredElements, opts);
        };
    }
    function prepareContext(elems, adapter, shouldTestNextSiblings) {
        if (shouldTestNextSiblings === void 0) shouldTestNextSiblings = false;
        if (shouldTestNextSiblings) elems = appendNextSiblings(elems, adapter);
        return Array.isArray(elems) ? adapter.removeSubsets(elems) : adapter.getChildren(elems);
    }
    exports.prepareContext = prepareContext;
    function appendNextSiblings(elem, adapter) {
        var elems = Array.isArray(elem) ? elem.slice(0) : [
            elem
        ];
        for(var i = 0; i < elems.length; i++){
            var nextSiblings = subselects_1.getNextSiblings(elems[i], adapter);
            elems.push.apply(elems, nextSiblings);
        }
        return elems;
    }
    exports.selectAll = getSelectorFunc(function(query, elems, options) {
        return query === boolbase_1.falseFunc || !elems || elems.length === 0 ? [] : options.adapter.findAll(query, elems);
    });
    exports.selectOne = getSelectorFunc(function(query, elems, options) {
        return query === boolbase_1.falseFunc || !elems || elems.length === 0 ? null : options.adapter.findOne(query, elems);
    });
    function is(elem, query, options) {
        var opts = convertOptionFormats(options);
        return (typeof query === "function" ? query : compile_1.compile(query, opts))(elem);
    }
    exports.is = is;
    exports.default = exports.selectAll;
    var pseudo_selectors_1 = $a8848f9916d99690$var$pseudoSelectors;
    Object.defineProperty(exports, "filters", {
        enumerable: true,
        get: function() {
            return pseudo_selectors_1.filters;
        }
    });
    Object.defineProperty(exports, "pseudos", {
        enumerable: true,
        get: function() {
            return pseudo_selectors_1.pseudos;
        }
    });
    Object.defineProperty(exports, "aliases", {
        enumerable: true,
        get: function() {
            return pseudo_selectors_1.aliases;
        }
    });
})($a8848f9916d99690$var$lib$8);
const $a8848f9916d99690$var$isTag = (node)=>node.type === "element"
;
const $a8848f9916d99690$var$existsOne = (test, elems)=>elems.some((elem)=>{
        if ($a8848f9916d99690$var$isTag(elem)) return test(elem) || $a8848f9916d99690$var$existsOne(test, $a8848f9916d99690$var$getChildren(elem));
        else return false;
    })
;
const $a8848f9916d99690$var$getAttributeValue = (elem, name)=>elem.attributes[name]
;
const $a8848f9916d99690$var$getChildren = (node)=>node.children || []
;
const $a8848f9916d99690$var$getName = (elemAst)=>elemAst.name
;
const $a8848f9916d99690$var$getParent = (node)=>node.parentNode || null
;
const $a8848f9916d99690$var$getSiblings = (elem)=>{
    var parent = $a8848f9916d99690$var$getParent(elem);
    return parent ? $a8848f9916d99690$var$getChildren(parent) : [];
};
const $a8848f9916d99690$var$getText = (node)=>{
    if (node.children[0].type === "text" && node.children[0].type === "cdata") return node.children[0].value;
    return "";
};
const $a8848f9916d99690$var$hasAttrib = (elem, name)=>elem.attributes[name] !== undefined
;
const $a8848f9916d99690$var$removeSubsets = (nodes)=>{
    let idx = nodes.length;
    let node;
    let ancestor;
    let replace;
    while(--idx > -1){
        node = ancestor = nodes[idx];
        nodes[idx] = null;
        replace = true;
        while(ancestor){
            if (nodes.includes(ancestor)) {
                replace = false;
                nodes.splice(idx, 1);
                break;
            }
            ancestor = $a8848f9916d99690$var$getParent(ancestor);
        }
        if (replace) nodes[idx] = node;
    }
    return nodes;
};
const $a8848f9916d99690$var$findAll = (test, elems)=>{
    const result = [];
    for (const elem of elems)if ($a8848f9916d99690$var$isTag(elem)) {
        if (test(elem)) result.push(elem);
        result.push(...$a8848f9916d99690$var$findAll(test, $a8848f9916d99690$var$getChildren(elem)));
    }
    return result;
};
const $a8848f9916d99690$var$findOne = (test, elems)=>{
    for (const elem of elems)if ($a8848f9916d99690$var$isTag(elem)) {
        if (test(elem)) return elem;
        const result = $a8848f9916d99690$var$findOne(test, $a8848f9916d99690$var$getChildren(elem));
        if (result) return result;
    }
    return null;
};
const $a8848f9916d99690$var$svgoCssSelectAdapter$1 = {
    isTag: $a8848f9916d99690$var$isTag,
    existsOne: $a8848f9916d99690$var$existsOne,
    getAttributeValue: $a8848f9916d99690$var$getAttributeValue,
    getChildren: $a8848f9916d99690$var$getChildren,
    getName: $a8848f9916d99690$var$getName,
    getParent: $a8848f9916d99690$var$getParent,
    getSiblings: $a8848f9916d99690$var$getSiblings,
    getText: $a8848f9916d99690$var$getText,
    hasAttrib: $a8848f9916d99690$var$hasAttrib,
    removeSubsets: $a8848f9916d99690$var$removeSubsets,
    findAll: $a8848f9916d99690$var$findAll,
    findOne: $a8848f9916d99690$var$findOne
};
var $a8848f9916d99690$var$cssSelectAdapter = $a8848f9916d99690$var$svgoCssSelectAdapter$1;
const { selectAll: $a8848f9916d99690$var$selectAll$1 , selectOne: $a8848f9916d99690$var$selectOne$1 , is: $a8848f9916d99690$var$is$1  } = $a8848f9916d99690$var$lib$8;
const $a8848f9916d99690$var$xastAdaptor = $a8848f9916d99690$var$cssSelectAdapter;
const $a8848f9916d99690$var$cssSelectOptions = {
    xmlMode: true,
    adapter: $a8848f9916d99690$var$xastAdaptor
};
const $a8848f9916d99690$var$querySelectorAll$2 = (node, selector)=>$a8848f9916d99690$var$selectAll$1(selector, node, $a8848f9916d99690$var$cssSelectOptions)
;
$a8848f9916d99690$var$xast.querySelectorAll = $a8848f9916d99690$var$querySelectorAll$2;
const $a8848f9916d99690$var$querySelector$1 = (node, selector)=>$a8848f9916d99690$var$selectOne$1(selector, node, $a8848f9916d99690$var$cssSelectOptions)
;
$a8848f9916d99690$var$xast.querySelector = $a8848f9916d99690$var$querySelector$1;
const $a8848f9916d99690$var$matches$1 = (node, selector)=>$a8848f9916d99690$var$is$1(node, selector, $a8848f9916d99690$var$cssSelectOptions)
;
$a8848f9916d99690$var$xast.matches = $a8848f9916d99690$var$matches$1;
const $a8848f9916d99690$var$closestByName$1 = (node, name21)=>{
    let currentNode = node;
    while(currentNode){
        if (currentNode.type === "element" && currentNode.name === name21) return currentNode;
        currentNode = currentNode.parentNode;
    }
    return null;
};
$a8848f9916d99690$var$xast.closestByName = $a8848f9916d99690$var$closestByName$1;
const $a8848f9916d99690$var$visitSkip$6 = Symbol();
$a8848f9916d99690$var$xast.visitSkip = $a8848f9916d99690$var$visitSkip$6;
const $a8848f9916d99690$var$visit$5 = (node, visitor, parentNode)=>{
    const callbacks = visitor[node.type];
    if (callbacks && callbacks.enter) {
        const symbol = callbacks.enter(node, parentNode);
        if (symbol === $a8848f9916d99690$var$visitSkip$6) return;
    }
    if (node.type === "root") for (const child of node.children)$a8848f9916d99690$var$visit$5(child, visitor, node);
    if (node.type === "element") {
        if (parentNode.children.includes(node)) for (const child of node.children)$a8848f9916d99690$var$visit$5(child, visitor, node);
    }
    if (callbacks && callbacks.exit) callbacks.exit(node, parentNode);
};
$a8848f9916d99690$var$xast.visit = $a8848f9916d99690$var$visit$5;
const $a8848f9916d99690$var$detachNodeFromParent$m = (node, parentNode)=>{
    parentNode.children = parentNode.children.filter((child)=>child !== node
    );
};
$a8848f9916d99690$var$xast.detachNodeFromParent = $a8848f9916d99690$var$detachNodeFromParent$m;
const { visit: $a8848f9916d99690$var$visit$4  } = $a8848f9916d99690$var$xast;
const $a8848f9916d99690$var$invokePlugins$1 = (ast, info, plugins, overrides, globalOverrides)=>{
    for (const plugin of plugins){
        const override = overrides == null ? null : overrides[plugin.name];
        if (override === false) continue;
        const params = {
            ...plugin.params,
            ...globalOverrides,
            ...override
        };
        if (plugin.type === "perItem") ast = $a8848f9916d99690$var$perItem(ast, info, plugin, params);
        if (plugin.type === "perItemReverse") ast = $a8848f9916d99690$var$perItem(ast, info, plugin, params, true);
        if (plugin.type === "full") {
            if (plugin.active) ast = plugin.fn(ast, params, info);
        }
        if (plugin.type === "visitor") {
            if (plugin.active) {
                const visitor = plugin.fn(ast, params, info);
                if (visitor != null) $a8848f9916d99690$var$visit$4(ast, visitor);
            }
        }
    }
    return ast;
};
$a8848f9916d99690$var$plugins.invokePlugins = $a8848f9916d99690$var$invokePlugins$1;
function $a8848f9916d99690$var$perItem(data, info, plugin, params, reverse) {
    function monkeys(items) {
        items.children = items.children.filter(function(item) {
            if (reverse && item.children) monkeys(item);
            let kept = true;
            if (plugin.active) kept = plugin.fn(item, params, info) !== false;
            if (!reverse && item.children) monkeys(item);
            return kept;
        });
        return items;
    }
    return monkeys(data);
}
const $a8848f9916d99690$var$createPreset$1 = ({ name: name22 , plugins: plugins  })=>({
        name: name22,
        type: "full",
        fn: (ast, params, info)=>{
            const { floatPrecision: floatPrecision , overrides: overrides  } = params;
            const globalOverrides = {
            };
            if (floatPrecision != null) globalOverrides.floatPrecision = floatPrecision;
            if (overrides) {
                for (const [pluginName, override] of Object.entries(overrides))if (override === true) console.warn(`You are trying to enable ${pluginName} which is not part of preset.\n` + `Try to put it before or after preset, for example\n\n` + `plugins: [\n` + `  {\n` + `    name: 'preset-default',\n` + `  },\n` + `  'cleanupListOfValues'\n` + `]\n`);
            }
            return $a8848f9916d99690$var$invokePlugins$1(ast, info, plugins, overrides, globalOverrides);
        }
    })
;
$a8848f9916d99690$var$plugins.createPreset = $a8848f9916d99690$var$createPreset$1;
var $a8848f9916d99690$var$removeDoctype$1 = {
};
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$l  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$removeDoctype$1.name = "removeDoctype";
$a8848f9916d99690$var$removeDoctype$1.type = "visitor";
$a8848f9916d99690$var$removeDoctype$1.active = true;
$a8848f9916d99690$var$removeDoctype$1.description = "removes doctype declaration";
$a8848f9916d99690$var$removeDoctype$1.fn = ()=>({
        doctype: {
            enter: (node, parentNode)=>{
                $a8848f9916d99690$var$detachNodeFromParent$l(node, parentNode);
            }
        }
    })
;
var $a8848f9916d99690$var$removeXMLProcInst$1 = {
};
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$k  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$removeXMLProcInst$1.name = "removeXMLProcInst";
$a8848f9916d99690$var$removeXMLProcInst$1.type = "visitor";
$a8848f9916d99690$var$removeXMLProcInst$1.active = true;
$a8848f9916d99690$var$removeXMLProcInst$1.description = "removes XML processing instructions";
$a8848f9916d99690$var$removeXMLProcInst$1.fn = ()=>({
        instruction: {
            enter: (node, parentNode)=>{
                if (node.name === "xml") $a8848f9916d99690$var$detachNodeFromParent$k(node, parentNode);
            }
        }
    })
;
var $a8848f9916d99690$var$removeComments$1 = {
};
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$j  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$removeComments$1.name = "removeComments";
$a8848f9916d99690$var$removeComments$1.type = "visitor";
$a8848f9916d99690$var$removeComments$1.active = true;
$a8848f9916d99690$var$removeComments$1.description = "removes comments";
$a8848f9916d99690$var$removeComments$1.fn = ()=>({
        comment: {
            enter: (node, parentNode)=>{
                if (node.value.charAt(0) !== "!") $a8848f9916d99690$var$detachNodeFromParent$j(node, parentNode);
            }
        }
    })
;
var $a8848f9916d99690$var$removeMetadata$1 = {
};
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$i  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$removeMetadata$1.name = "removeMetadata";
$a8848f9916d99690$var$removeMetadata$1.type = "visitor";
$a8848f9916d99690$var$removeMetadata$1.active = true;
$a8848f9916d99690$var$removeMetadata$1.description = "removes <metadata>";
$a8848f9916d99690$var$removeMetadata$1.fn = ()=>({
        element: {
            enter: (node, parentNode)=>{
                if (node.name === "metadata") $a8848f9916d99690$var$detachNodeFromParent$i(node, parentNode);
            }
        }
    })
;
var $a8848f9916d99690$var$removeEditorsNSData$1 = {
};
var $a8848f9916d99690$var$_collections = {
};
(function(exports) {
    exports.elemsGroups = {
        animation: [
            "animate",
            "animateColor",
            "animateMotion",
            "animateTransform",
            "set"
        ],
        descriptive: [
            "desc",
            "metadata",
            "title"
        ],
        shape: [
            "circle",
            "ellipse",
            "line",
            "path",
            "polygon",
            "polyline",
            "rect"
        ],
        structural: [
            "defs",
            "g",
            "svg",
            "symbol",
            "use"
        ],
        paintServer: [
            "solidColor",
            "linearGradient",
            "radialGradient",
            "meshGradient",
            "pattern",
            "hatch"
        ],
        nonRendering: [
            "linearGradient",
            "radialGradient",
            "pattern",
            "clipPath",
            "mask",
            "marker",
            "symbol",
            "filter",
            "solidColor"
        ],
        container: [
            "a",
            "defs",
            "g",
            "marker",
            "mask",
            "missing-glyph",
            "pattern",
            "svg",
            "switch",
            "symbol",
            "foreignObject"
        ],
        textContent: [
            "altGlyph",
            "altGlyphDef",
            "altGlyphItem",
            "glyph",
            "glyphRef",
            "textPath",
            "text",
            "tref",
            "tspan"
        ],
        textContentChild: [
            "altGlyph",
            "textPath",
            "tref",
            "tspan"
        ],
        lightSource: [
            "feDiffuseLighting",
            "feSpecularLighting",
            "feDistantLight",
            "fePointLight",
            "feSpotLight"
        ],
        filterPrimitive: [
            "feBlend",
            "feColorMatrix",
            "feComponentTransfer",
            "feComposite",
            "feConvolveMatrix",
            "feDiffuseLighting",
            "feDisplacementMap",
            "feDropShadow",
            "feFlood",
            "feFuncA",
            "feFuncB",
            "feFuncG",
            "feFuncR",
            "feGaussianBlur",
            "feImage",
            "feMerge",
            "feMergeNode",
            "feMorphology",
            "feOffset",
            "feSpecularLighting",
            "feTile",
            "feTurbulence"
        ]
    };
    exports.textElems = exports.elemsGroups.textContent.concat("title");
    exports.pathElems = [
        "path",
        "glyph",
        "missing-glyph"
    ];
    exports.attrsGroups = {
        animationAddition: [
            "additive",
            "accumulate"
        ],
        animationAttributeTarget: [
            "attributeType",
            "attributeName"
        ],
        animationEvent: [
            "onbegin",
            "onend",
            "onrepeat",
            "onload"
        ],
        animationTiming: [
            "begin",
            "dur",
            "end",
            "min",
            "max",
            "restart",
            "repeatCount",
            "repeatDur",
            "fill"
        ],
        animationValue: [
            "calcMode",
            "values",
            "keyTimes",
            "keySplines",
            "from",
            "to",
            "by"
        ],
        conditionalProcessing: [
            "requiredFeatures",
            "requiredExtensions",
            "systemLanguage"
        ],
        core: [
            "id",
            "tabindex",
            "xml:base",
            "xml:lang",
            "xml:space"
        ],
        graphicalEvent: [
            "onfocusin",
            "onfocusout",
            "onactivate",
            "onclick",
            "onmousedown",
            "onmouseup",
            "onmouseover",
            "onmousemove",
            "onmouseout",
            "onload"
        ],
        presentation: [
            "alignment-baseline",
            "baseline-shift",
            "clip",
            "clip-path",
            "clip-rule",
            "color",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "cursor",
            "direction",
            "display",
            "dominant-baseline",
            "enable-background",
            "fill",
            "fill-opacity",
            "fill-rule",
            "filter",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "mask",
            "opacity",
            "overflow",
            "paint-order",
            "pointer-events",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "stroke",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-overflow",
            "text-rendering",
            "transform",
            "transform-origin",
            "unicode-bidi",
            "vector-effect",
            "visibility",
            "word-spacing",
            "writing-mode"
        ],
        xlink: [
            "xlink:href",
            "xlink:show",
            "xlink:actuate",
            "xlink:type",
            "xlink:role",
            "xlink:arcrole",
            "xlink:title"
        ],
        documentEvent: [
            "onunload",
            "onabort",
            "onerror",
            "onresize",
            "onscroll",
            "onzoom"
        ],
        filterPrimitive: [
            "x",
            "y",
            "width",
            "height",
            "result"
        ],
        transferFunction: [
            "type",
            "tableValues",
            "slope",
            "intercept",
            "amplitude",
            "exponent",
            "offset"
        ]
    };
    exports.attrsGroupsDefaults = {
        core: {
            "xml:space": "default"
        },
        presentation: {
            clip: "auto",
            "clip-path": "none",
            "clip-rule": "nonzero",
            mask: "none",
            opacity: "1",
            "stop-color": "#000",
            "stop-opacity": "1",
            "fill-opacity": "1",
            "fill-rule": "nonzero",
            fill: "#000",
            stroke: "none",
            "stroke-width": "1",
            "stroke-linecap": "butt",
            "stroke-linejoin": "miter",
            "stroke-miterlimit": "4",
            "stroke-dasharray": "none",
            "stroke-dashoffset": "0",
            "stroke-opacity": "1",
            "paint-order": "normal",
            "vector-effect": "none",
            display: "inline",
            visibility: "visible",
            "marker-start": "none",
            "marker-mid": "none",
            "marker-end": "none",
            "color-interpolation": "sRGB",
            "color-interpolation-filters": "linearRGB",
            "color-rendering": "auto",
            "shape-rendering": "auto",
            "text-rendering": "auto",
            "image-rendering": "auto",
            "font-style": "normal",
            "font-variant": "normal",
            "font-weight": "normal",
            "font-stretch": "normal",
            "font-size": "medium",
            "font-size-adjust": "none",
            kerning: "auto",
            "letter-spacing": "normal",
            "word-spacing": "normal",
            "text-decoration": "none",
            "text-anchor": "start",
            "text-overflow": "clip",
            "writing-mode": "lr-tb",
            "glyph-orientation-vertical": "auto",
            "glyph-orientation-horizontal": "0deg",
            direction: "ltr",
            "unicode-bidi": "normal",
            "dominant-baseline": "auto",
            "alignment-baseline": "baseline",
            "baseline-shift": "baseline"
        },
        transferFunction: {
            slope: "1",
            intercept: "0",
            amplitude: "1",
            exponent: "1",
            offset: "0"
        }
    };
    exports.elems = {
        a: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation",
                "xlink"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform",
                "target"
            ],
            defaults: {
                target: "_self"
            },
            contentGroups: [
                "animation",
                "descriptive",
                "shape",
                "structural",
                "paintServer"
            ],
            content: [
                "a",
                "altGlyphDef",
                "clipPath",
                "color-profile",
                "cursor",
                "filter",
                "font",
                "font-face",
                "foreignObject",
                "image",
                "marker",
                "mask",
                "pattern",
                "script",
                "style",
                "switch",
                "text",
                "view",
                "tspan"
            ]
        },
        altGlyph: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation",
                "xlink"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "x",
                "y",
                "dx",
                "dy",
                "glyphRef",
                "format",
                "rotate"
            ]
        },
        altGlyphDef: {
            attrsGroups: [
                "core"
            ],
            content: [
                "glyphRef"
            ]
        },
        altGlyphItem: {
            attrsGroups: [
                "core"
            ],
            content: [
                "glyphRef",
                "altGlyphItem"
            ]
        },
        animate: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "animationAddition",
                "animationAttributeTarget",
                "animationEvent",
                "animationTiming",
                "animationValue",
                "presentation",
                "xlink"
            ],
            attrs: [
                "externalResourcesRequired"
            ],
            contentGroups: [
                "descriptive"
            ]
        },
        animateColor: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "animationEvent",
                "xlink",
                "animationAttributeTarget",
                "animationTiming",
                "animationValue",
                "animationAddition",
                "presentation"
            ],
            attrs: [
                "externalResourcesRequired"
            ],
            contentGroups: [
                "descriptive"
            ]
        },
        animateMotion: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "animationEvent",
                "xlink",
                "animationTiming",
                "animationValue",
                "animationAddition"
            ],
            attrs: [
                "externalResourcesRequired",
                "path",
                "keyPoints",
                "rotate",
                "origin"
            ],
            defaults: {
                rotate: "0"
            },
            contentGroups: [
                "descriptive"
            ],
            content: [
                "mpath"
            ]
        },
        animateTransform: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "animationEvent",
                "xlink",
                "animationAttributeTarget",
                "animationTiming",
                "animationValue",
                "animationAddition"
            ],
            attrs: [
                "externalResourcesRequired",
                "type"
            ],
            contentGroups: [
                "descriptive"
            ]
        },
        circle: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform",
                "cx",
                "cy",
                "r"
            ],
            defaults: {
                cx: "0",
                cy: "0"
            },
            contentGroups: [
                "animation",
                "descriptive"
            ]
        },
        clipPath: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform",
                "clipPathUnits"
            ],
            defaults: {
                clipPathUnits: "userSpaceOnUse"
            },
            contentGroups: [
                "animation",
                "descriptive",
                "shape"
            ],
            content: [
                "text",
                "use"
            ]
        },
        "color-profile": {
            attrsGroups: [
                "core",
                "xlink"
            ],
            attrs: [
                "local",
                "name",
                "rendering-intent"
            ],
            defaults: {
                name: "sRGB",
                "rendering-intent": "auto"
            },
            contentGroups: [
                "descriptive"
            ]
        },
        cursor: {
            attrsGroups: [
                "core",
                "conditionalProcessing",
                "xlink"
            ],
            attrs: [
                "externalResourcesRequired",
                "x",
                "y"
            ],
            defaults: {
                x: "0",
                y: "0"
            },
            contentGroups: [
                "descriptive"
            ]
        },
        defs: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform"
            ],
            contentGroups: [
                "animation",
                "descriptive",
                "shape",
                "structural",
                "paintServer"
            ],
            content: [
                "a",
                "altGlyphDef",
                "clipPath",
                "color-profile",
                "cursor",
                "filter",
                "font",
                "font-face",
                "foreignObject",
                "image",
                "marker",
                "mask",
                "pattern",
                "script",
                "style",
                "switch",
                "text",
                "view"
            ]
        },
        desc: {
            attrsGroups: [
                "core"
            ],
            attrs: [
                "class",
                "style"
            ]
        },
        ellipse: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform",
                "cx",
                "cy",
                "rx",
                "ry"
            ],
            defaults: {
                cx: "0",
                cy: "0"
            },
            contentGroups: [
                "animation",
                "descriptive"
            ]
        },
        feBlend: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style",
                "in",
                "in2",
                "mode"
            ],
            defaults: {
                mode: "normal"
            },
            content: [
                "animate",
                "set"
            ]
        },
        feColorMatrix: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style",
                "in",
                "type",
                "values"
            ],
            defaults: {
                type: "matrix"
            },
            content: [
                "animate",
                "set"
            ]
        },
        feComponentTransfer: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style",
                "in"
            ],
            content: [
                "feFuncA",
                "feFuncB",
                "feFuncG",
                "feFuncR"
            ]
        },
        feComposite: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style",
                "in",
                "in2",
                "operator",
                "k1",
                "k2",
                "k3",
                "k4"
            ],
            defaults: {
                operator: "over",
                k1: "0",
                k2: "0",
                k3: "0",
                k4: "0"
            },
            content: [
                "animate",
                "set"
            ]
        },
        feConvolveMatrix: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style",
                "in",
                "order",
                "kernelMatrix",
                "divisor",
                "bias",
                "targetX",
                "targetY",
                "edgeMode",
                "kernelUnitLength",
                "preserveAlpha"
            ],
            defaults: {
                order: "3",
                bias: "0",
                edgeMode: "duplicate",
                preserveAlpha: "false"
            },
            content: [
                "animate",
                "set"
            ]
        },
        feDiffuseLighting: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style",
                "in",
                "surfaceScale",
                "diffuseConstant",
                "kernelUnitLength"
            ],
            defaults: {
                surfaceScale: "1",
                diffuseConstant: "1"
            },
            contentGroups: [
                "descriptive"
            ],
            content: [
                "feDistantLight",
                "fePointLight",
                "feSpotLight"
            ]
        },
        feDisplacementMap: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style",
                "in",
                "in2",
                "scale",
                "xChannelSelector",
                "yChannelSelector"
            ],
            defaults: {
                scale: "0",
                xChannelSelector: "A",
                yChannelSelector: "A"
            },
            content: [
                "animate",
                "set"
            ]
        },
        feDistantLight: {
            attrsGroups: [
                "core"
            ],
            attrs: [
                "azimuth",
                "elevation"
            ],
            defaults: {
                azimuth: "0",
                elevation: "0"
            },
            content: [
                "animate",
                "set"
            ]
        },
        feFlood: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style"
            ],
            content: [
                "animate",
                "animateColor",
                "set"
            ]
        },
        feFuncA: {
            attrsGroups: [
                "core",
                "transferFunction"
            ],
            content: [
                "set",
                "animate"
            ]
        },
        feFuncB: {
            attrsGroups: [
                "core",
                "transferFunction"
            ],
            content: [
                "set",
                "animate"
            ]
        },
        feFuncG: {
            attrsGroups: [
                "core",
                "transferFunction"
            ],
            content: [
                "set",
                "animate"
            ]
        },
        feFuncR: {
            attrsGroups: [
                "core",
                "transferFunction"
            ],
            content: [
                "set",
                "animate"
            ]
        },
        feGaussianBlur: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style",
                "in",
                "stdDeviation"
            ],
            defaults: {
                stdDeviation: "0"
            },
            content: [
                "set",
                "animate"
            ]
        },
        feImage: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive",
                "xlink"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "preserveAspectRatio",
                "href",
                "xlink:href"
            ],
            defaults: {
                preserveAspectRatio: "xMidYMid meet"
            },
            content: [
                "animate",
                "animateTransform",
                "set"
            ]
        },
        feMerge: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style"
            ],
            content: [
                "feMergeNode"
            ]
        },
        feMergeNode: {
            attrsGroups: [
                "core"
            ],
            attrs: [
                "in"
            ],
            content: [
                "animate",
                "set"
            ]
        },
        feMorphology: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style",
                "in",
                "operator",
                "radius"
            ],
            defaults: {
                operator: "erode",
                radius: "0"
            },
            content: [
                "animate",
                "set"
            ]
        },
        feOffset: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style",
                "in",
                "dx",
                "dy"
            ],
            defaults: {
                dx: "0",
                dy: "0"
            },
            content: [
                "animate",
                "set"
            ]
        },
        fePointLight: {
            attrsGroups: [
                "core"
            ],
            attrs: [
                "x",
                "y",
                "z"
            ],
            defaults: {
                x: "0",
                y: "0",
                z: "0"
            },
            content: [
                "animate",
                "set"
            ]
        },
        feSpecularLighting: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style",
                "in",
                "surfaceScale",
                "specularConstant",
                "specularExponent",
                "kernelUnitLength"
            ],
            defaults: {
                surfaceScale: "1",
                specularConstant: "1",
                specularExponent: "1"
            },
            contentGroups: [
                "descriptive",
                "lightSource"
            ]
        },
        feSpotLight: {
            attrsGroups: [
                "core"
            ],
            attrs: [
                "x",
                "y",
                "z",
                "pointsAtX",
                "pointsAtY",
                "pointsAtZ",
                "specularExponent",
                "limitingConeAngle"
            ],
            defaults: {
                x: "0",
                y: "0",
                z: "0",
                pointsAtX: "0",
                pointsAtY: "0",
                pointsAtZ: "0",
                specularExponent: "1"
            },
            content: [
                "animate",
                "set"
            ]
        },
        feTile: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style",
                "in"
            ],
            content: [
                "animate",
                "set"
            ]
        },
        feTurbulence: {
            attrsGroups: [
                "core",
                "presentation",
                "filterPrimitive"
            ],
            attrs: [
                "class",
                "style",
                "baseFrequency",
                "numOctaves",
                "seed",
                "stitchTiles",
                "type"
            ],
            defaults: {
                baseFrequency: "0",
                numOctaves: "1",
                seed: "0",
                stitchTiles: "noStitch",
                type: "turbulence"
            },
            content: [
                "animate",
                "set"
            ]
        },
        filter: {
            attrsGroups: [
                "core",
                "presentation",
                "xlink"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "x",
                "y",
                "width",
                "height",
                "filterRes",
                "filterUnits",
                "primitiveUnits",
                "href",
                "xlink:href"
            ],
            defaults: {
                primitiveUnits: "userSpaceOnUse",
                x: "-10%",
                y: "-10%",
                width: "120%",
                height: "120%"
            },
            contentGroups: [
                "descriptive",
                "filterPrimitive"
            ],
            content: [
                "animate",
                "set"
            ]
        },
        font: {
            attrsGroups: [
                "core",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "horiz-origin-x",
                "horiz-origin-y",
                "horiz-adv-x",
                "vert-origin-x",
                "vert-origin-y",
                "vert-adv-y"
            ],
            defaults: {
                "horiz-origin-x": "0",
                "horiz-origin-y": "0"
            },
            contentGroups: [
                "descriptive"
            ],
            content: [
                "font-face",
                "glyph",
                "hkern",
                "missing-glyph",
                "vkern"
            ]
        },
        "font-face": {
            attrsGroups: [
                "core"
            ],
            attrs: [
                "font-family",
                "font-style",
                "font-variant",
                "font-weight",
                "font-stretch",
                "font-size",
                "unicode-range",
                "units-per-em",
                "panose-1",
                "stemv",
                "stemh",
                "slope",
                "cap-height",
                "x-height",
                "accent-height",
                "ascent",
                "descent",
                "widths",
                "bbox",
                "ideographic",
                "alphabetic",
                "mathematical",
                "hanging",
                "v-ideographic",
                "v-alphabetic",
                "v-mathematical",
                "v-hanging",
                "underline-position",
                "underline-thickness",
                "strikethrough-position",
                "strikethrough-thickness",
                "overline-position",
                "overline-thickness"
            ],
            defaults: {
                "font-style": "all",
                "font-variant": "normal",
                "font-weight": "all",
                "font-stretch": "normal",
                "unicode-range": "U+0-10FFFF",
                "units-per-em": "1000",
                "panose-1": "0 0 0 0 0 0 0 0 0 0",
                slope: "0"
            },
            contentGroups: [
                "descriptive"
            ],
            content: [
                "font-face-src"
            ]
        },
        "font-face-format": {
            attrsGroups: [
                "core"
            ],
            attrs: [
                "string"
            ]
        },
        "font-face-name": {
            attrsGroups: [
                "core"
            ],
            attrs: [
                "name"
            ]
        },
        "font-face-src": {
            attrsGroups: [
                "core"
            ],
            content: [
                "font-face-name",
                "font-face-uri"
            ]
        },
        "font-face-uri": {
            attrsGroups: [
                "core",
                "xlink"
            ],
            attrs: [
                "href",
                "xlink:href"
            ],
            content: [
                "font-face-format"
            ]
        },
        foreignObject: {
            attrsGroups: [
                "core",
                "conditionalProcessing",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform",
                "x",
                "y",
                "width",
                "height"
            ],
            defaults: {
                x: "0",
                y: "0"
            }
        },
        g: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform"
            ],
            contentGroups: [
                "animation",
                "descriptive",
                "shape",
                "structural",
                "paintServer"
            ],
            content: [
                "a",
                "altGlyphDef",
                "clipPath",
                "color-profile",
                "cursor",
                "filter",
                "font",
                "font-face",
                "foreignObject",
                "image",
                "marker",
                "mask",
                "pattern",
                "script",
                "style",
                "switch",
                "text",
                "view"
            ]
        },
        glyph: {
            attrsGroups: [
                "core",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "d",
                "horiz-adv-x",
                "vert-origin-x",
                "vert-origin-y",
                "vert-adv-y",
                "unicode",
                "glyph-name",
                "orientation",
                "arabic-form",
                "lang"
            ],
            defaults: {
                "arabic-form": "initial"
            },
            contentGroups: [
                "animation",
                "descriptive",
                "shape",
                "structural",
                "paintServer"
            ],
            content: [
                "a",
                "altGlyphDef",
                "clipPath",
                "color-profile",
                "cursor",
                "filter",
                "font",
                "font-face",
                "foreignObject",
                "image",
                "marker",
                "mask",
                "pattern",
                "script",
                "style",
                "switch",
                "text",
                "view"
            ]
        },
        glyphRef: {
            attrsGroups: [
                "core",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "d",
                "horiz-adv-x",
                "vert-origin-x",
                "vert-origin-y",
                "vert-adv-y"
            ],
            contentGroups: [
                "animation",
                "descriptive",
                "shape",
                "structural",
                "paintServer"
            ],
            content: [
                "a",
                "altGlyphDef",
                "clipPath",
                "color-profile",
                "cursor",
                "filter",
                "font",
                "font-face",
                "foreignObject",
                "image",
                "marker",
                "mask",
                "pattern",
                "script",
                "style",
                "switch",
                "text",
                "view"
            ]
        },
        hatch: {
            attrsGroups: [
                "core",
                "presentation",
                "xlink"
            ],
            attrs: [
                "class",
                "style",
                "x",
                "y",
                "pitch",
                "rotate",
                "hatchUnits",
                "hatchContentUnits",
                "transform"
            ],
            defaults: {
                hatchUnits: "objectBoundingBox",
                hatchContentUnits: "userSpaceOnUse",
                x: "0",
                y: "0",
                pitch: "0",
                rotate: "0"
            },
            contentGroups: [
                "animation",
                "descriptive"
            ],
            content: [
                "hatchPath"
            ]
        },
        hatchPath: {
            attrsGroups: [
                "core",
                "presentation",
                "xlink"
            ],
            attrs: [
                "class",
                "style",
                "d",
                "offset"
            ],
            defaults: {
                offset: "0"
            },
            contentGroups: [
                "animation",
                "descriptive"
            ]
        },
        hkern: {
            attrsGroups: [
                "core"
            ],
            attrs: [
                "u1",
                "g1",
                "u2",
                "g2",
                "k"
            ]
        },
        image: {
            attrsGroups: [
                "core",
                "conditionalProcessing",
                "graphicalEvent",
                "xlink",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "preserveAspectRatio",
                "transform",
                "x",
                "y",
                "width",
                "height",
                "href",
                "xlink:href"
            ],
            defaults: {
                x: "0",
                y: "0",
                preserveAspectRatio: "xMidYMid meet"
            },
            contentGroups: [
                "animation",
                "descriptive"
            ]
        },
        line: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform",
                "x1",
                "y1",
                "x2",
                "y2"
            ],
            defaults: {
                x1: "0",
                y1: "0",
                x2: "0",
                y2: "0"
            },
            contentGroups: [
                "animation",
                "descriptive"
            ]
        },
        linearGradient: {
            attrsGroups: [
                "core",
                "presentation",
                "xlink"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "x1",
                "y1",
                "x2",
                "y2",
                "gradientUnits",
                "gradientTransform",
                "spreadMethod",
                "href",
                "xlink:href"
            ],
            defaults: {
                x1: "0",
                y1: "0",
                x2: "100%",
                y2: "0",
                spreadMethod: "pad"
            },
            contentGroups: [
                "descriptive"
            ],
            content: [
                "animate",
                "animateTransform",
                "set",
                "stop"
            ]
        },
        marker: {
            attrsGroups: [
                "core",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "viewBox",
                "preserveAspectRatio",
                "refX",
                "refY",
                "markerUnits",
                "markerWidth",
                "markerHeight",
                "orient"
            ],
            defaults: {
                markerUnits: "strokeWidth",
                refX: "0",
                refY: "0",
                markerWidth: "3",
                markerHeight: "3"
            },
            contentGroups: [
                "animation",
                "descriptive",
                "shape",
                "structural",
                "paintServer"
            ],
            content: [
                "a",
                "altGlyphDef",
                "clipPath",
                "color-profile",
                "cursor",
                "filter",
                "font",
                "font-face",
                "foreignObject",
                "image",
                "marker",
                "mask",
                "pattern",
                "script",
                "style",
                "switch",
                "text",
                "view"
            ]
        },
        mask: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "x",
                "y",
                "width",
                "height",
                "mask-type",
                "maskUnits",
                "maskContentUnits"
            ],
            defaults: {
                maskUnits: "objectBoundingBox",
                maskContentUnits: "userSpaceOnUse",
                x: "-10%",
                y: "-10%",
                width: "120%",
                height: "120%"
            },
            contentGroups: [
                "animation",
                "descriptive",
                "shape",
                "structural",
                "paintServer"
            ],
            content: [
                "a",
                "altGlyphDef",
                "clipPath",
                "color-profile",
                "cursor",
                "filter",
                "font",
                "font-face",
                "foreignObject",
                "image",
                "marker",
                "mask",
                "pattern",
                "script",
                "style",
                "switch",
                "text",
                "view"
            ]
        },
        metadata: {
            attrsGroups: [
                "core"
            ]
        },
        "missing-glyph": {
            attrsGroups: [
                "core",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "d",
                "horiz-adv-x",
                "vert-origin-x",
                "vert-origin-y",
                "vert-adv-y"
            ],
            contentGroups: [
                "animation",
                "descriptive",
                "shape",
                "structural",
                "paintServer"
            ],
            content: [
                "a",
                "altGlyphDef",
                "clipPath",
                "color-profile",
                "cursor",
                "filter",
                "font",
                "font-face",
                "foreignObject",
                "image",
                "marker",
                "mask",
                "pattern",
                "script",
                "style",
                "switch",
                "text",
                "view"
            ]
        },
        mpath: {
            attrsGroups: [
                "core",
                "xlink"
            ],
            attrs: [
                "externalResourcesRequired",
                "href",
                "xlink:href"
            ],
            contentGroups: [
                "descriptive"
            ]
        },
        path: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform",
                "d",
                "pathLength"
            ],
            contentGroups: [
                "animation",
                "descriptive"
            ]
        },
        pattern: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "presentation",
                "xlink"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "viewBox",
                "preserveAspectRatio",
                "x",
                "y",
                "width",
                "height",
                "patternUnits",
                "patternContentUnits",
                "patternTransform",
                "href",
                "xlink:href"
            ],
            defaults: {
                patternUnits: "objectBoundingBox",
                patternContentUnits: "userSpaceOnUse",
                x: "0",
                y: "0",
                width: "0",
                height: "0",
                preserveAspectRatio: "xMidYMid meet"
            },
            contentGroups: [
                "animation",
                "descriptive",
                "paintServer",
                "shape",
                "structural"
            ],
            content: [
                "a",
                "altGlyphDef",
                "clipPath",
                "color-profile",
                "cursor",
                "filter",
                "font",
                "font-face",
                "foreignObject",
                "image",
                "marker",
                "mask",
                "pattern",
                "script",
                "style",
                "switch",
                "text",
                "view"
            ]
        },
        polygon: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform",
                "points"
            ],
            contentGroups: [
                "animation",
                "descriptive"
            ]
        },
        polyline: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform",
                "points"
            ],
            contentGroups: [
                "animation",
                "descriptive"
            ]
        },
        radialGradient: {
            attrsGroups: [
                "core",
                "presentation",
                "xlink"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "cx",
                "cy",
                "r",
                "fx",
                "fy",
                "fr",
                "gradientUnits",
                "gradientTransform",
                "spreadMethod",
                "href",
                "xlink:href"
            ],
            defaults: {
                gradientUnits: "objectBoundingBox",
                cx: "50%",
                cy: "50%",
                r: "50%"
            },
            contentGroups: [
                "descriptive"
            ],
            content: [
                "animate",
                "animateTransform",
                "set",
                "stop"
            ]
        },
        meshGradient: {
            attrsGroups: [
                "core",
                "presentation",
                "xlink"
            ],
            attrs: [
                "class",
                "style",
                "x",
                "y",
                "gradientUnits",
                "transform"
            ],
            contentGroups: [
                "descriptive",
                "paintServer",
                "animation"
            ],
            content: [
                "meshRow"
            ]
        },
        meshRow: {
            attrsGroups: [
                "core",
                "presentation"
            ],
            attrs: [
                "class",
                "style"
            ],
            contentGroups: [
                "descriptive"
            ],
            content: [
                "meshPatch"
            ]
        },
        meshPatch: {
            attrsGroups: [
                "core",
                "presentation"
            ],
            attrs: [
                "class",
                "style"
            ],
            contentGroups: [
                "descriptive"
            ],
            content: [
                "stop"
            ]
        },
        rect: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform",
                "x",
                "y",
                "width",
                "height",
                "rx",
                "ry"
            ],
            defaults: {
                x: "0",
                y: "0"
            },
            contentGroups: [
                "animation",
                "descriptive"
            ]
        },
        script: {
            attrsGroups: [
                "core",
                "xlink"
            ],
            attrs: [
                "externalResourcesRequired",
                "type",
                "href",
                "xlink:href"
            ]
        },
        set: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "animation",
                "xlink",
                "animationAttributeTarget",
                "animationTiming"
            ],
            attrs: [
                "externalResourcesRequired",
                "to"
            ],
            contentGroups: [
                "descriptive"
            ]
        },
        solidColor: {
            attrsGroups: [
                "core",
                "presentation"
            ],
            attrs: [
                "class",
                "style"
            ],
            contentGroups: [
                "paintServer"
            ]
        },
        stop: {
            attrsGroups: [
                "core",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "offset",
                "path"
            ],
            content: [
                "animate",
                "animateColor",
                "set"
            ]
        },
        style: {
            attrsGroups: [
                "core"
            ],
            attrs: [
                "type",
                "media",
                "title"
            ],
            defaults: {
                type: "text/css"
            }
        },
        svg: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "documentEvent",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "x",
                "y",
                "width",
                "height",
                "viewBox",
                "preserveAspectRatio",
                "zoomAndPan",
                "version",
                "baseProfile",
                "contentScriptType",
                "contentStyleType"
            ],
            defaults: {
                x: "0",
                y: "0",
                width: "100%",
                height: "100%",
                preserveAspectRatio: "xMidYMid meet",
                zoomAndPan: "magnify",
                version: "1.1",
                baseProfile: "none",
                contentScriptType: "application/ecmascript",
                contentStyleType: "text/css"
            },
            contentGroups: [
                "animation",
                "descriptive",
                "shape",
                "structural",
                "paintServer"
            ],
            content: [
                "a",
                "altGlyphDef",
                "clipPath",
                "color-profile",
                "cursor",
                "filter",
                "font",
                "font-face",
                "foreignObject",
                "image",
                "marker",
                "mask",
                "pattern",
                "script",
                "style",
                "switch",
                "text",
                "view"
            ]
        },
        switch: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform"
            ],
            contentGroups: [
                "animation",
                "descriptive",
                "shape"
            ],
            content: [
                "a",
                "foreignObject",
                "g",
                "image",
                "svg",
                "switch",
                "text",
                "use"
            ]
        },
        symbol: {
            attrsGroups: [
                "core",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "preserveAspectRatio",
                "viewBox",
                "refX",
                "refY"
            ],
            defaults: {
                refX: "0",
                refY: "0"
            },
            contentGroups: [
                "animation",
                "descriptive",
                "shape",
                "structural",
                "paintServer"
            ],
            content: [
                "a",
                "altGlyphDef",
                "clipPath",
                "color-profile",
                "cursor",
                "filter",
                "font",
                "font-face",
                "foreignObject",
                "image",
                "marker",
                "mask",
                "pattern",
                "script",
                "style",
                "switch",
                "text",
                "view"
            ]
        },
        text: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform",
                "lengthAdjust",
                "x",
                "y",
                "dx",
                "dy",
                "rotate",
                "textLength"
            ],
            defaults: {
                x: "0",
                y: "0",
                lengthAdjust: "spacing"
            },
            contentGroups: [
                "animation",
                "descriptive",
                "textContentChild"
            ],
            content: [
                "a"
            ]
        },
        textPath: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation",
                "xlink"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "href",
                "xlink:href",
                "startOffset",
                "method",
                "spacing",
                "d"
            ],
            defaults: {
                startOffset: "0",
                method: "align",
                spacing: "exact"
            },
            contentGroups: [
                "descriptive"
            ],
            content: [
                "a",
                "altGlyph",
                "animate",
                "animateColor",
                "set",
                "tref",
                "tspan"
            ]
        },
        title: {
            attrsGroups: [
                "core"
            ],
            attrs: [
                "class",
                "style"
            ]
        },
        tref: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation",
                "xlink"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "href",
                "xlink:href"
            ],
            contentGroups: [
                "descriptive"
            ],
            content: [
                "animate",
                "animateColor",
                "set"
            ]
        },
        tspan: {
            attrsGroups: [
                "conditionalProcessing",
                "core",
                "graphicalEvent",
                "presentation"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "x",
                "y",
                "dx",
                "dy",
                "rotate",
                "textLength",
                "lengthAdjust"
            ],
            contentGroups: [
                "descriptive"
            ],
            content: [
                "a",
                "altGlyph",
                "animate",
                "animateColor",
                "set",
                "tref",
                "tspan"
            ]
        },
        use: {
            attrsGroups: [
                "core",
                "conditionalProcessing",
                "graphicalEvent",
                "presentation",
                "xlink"
            ],
            attrs: [
                "class",
                "style",
                "externalResourcesRequired",
                "transform",
                "x",
                "y",
                "width",
                "height",
                "href",
                "xlink:href"
            ],
            defaults: {
                x: "0",
                y: "0"
            },
            contentGroups: [
                "animation",
                "descriptive"
            ]
        },
        view: {
            attrsGroups: [
                "core"
            ],
            attrs: [
                "externalResourcesRequired",
                "viewBox",
                "preserveAspectRatio",
                "zoomAndPan",
                "viewTarget"
            ],
            contentGroups: [
                "descriptive"
            ]
        },
        vkern: {
            attrsGroups: [
                "core"
            ],
            attrs: [
                "u1",
                "g1",
                "u2",
                "g2",
                "k"
            ]
        }
    };
    exports.editorNamespaces = [
        "http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd",
        "http://inkscape.sourceforge.net/DTD/sodipodi-0.dtd",
        "http://www.inkscape.org/namespaces/inkscape",
        "http://www.bohemiancoding.com/sketch/ns",
        "http://ns.adobe.com/AdobeIllustrator/10.0/",
        "http://ns.adobe.com/Graphs/1.0/",
        "http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/",
        "http://ns.adobe.com/Variables/1.0/",
        "http://ns.adobe.com/SaveForWeb/1.0/",
        "http://ns.adobe.com/Extensibility/1.0/",
        "http://ns.adobe.com/Flows/1.0/",
        "http://ns.adobe.com/ImageReplacement/1.0/",
        "http://ns.adobe.com/GenericCustomNamespace/1.0/",
        "http://ns.adobe.com/XPath/1.0/",
        "http://schemas.microsoft.com/visio/2003/SVGExtensions/",
        "http://taptrix.com/vectorillustrator/svg_extensions",
        "http://www.figma.com/figma/ns",
        "http://purl.org/dc/elements/1.1/",
        "http://creativecommons.org/ns#",
        "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
        "http://www.serif.com/",
        "http://www.vector.evaxdesign.sk"
    ];
    exports.referencesProps = [
        "clip-path",
        "color-profile",
        "fill",
        "filter",
        "marker-start",
        "marker-mid",
        "marker-end",
        "mask",
        "stroke",
        "style"
    ];
    exports.inheritableAttrs = [
        "clip-rule",
        "color",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "cursor",
        "direction",
        "dominant-baseline",
        "fill",
        "fill-opacity",
        "fill-rule",
        "font",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "image-rendering",
        "letter-spacing",
        "marker",
        "marker-end",
        "marker-mid",
        "marker-start",
        "paint-order",
        "pointer-events",
        "shape-rendering",
        "stroke",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-rendering",
        "transform",
        "visibility",
        "word-spacing",
        "writing-mode"
    ];
    exports.presentationNonInheritableGroupAttrs = [
        "display",
        "clip-path",
        "filter",
        "mask",
        "opacity",
        "text-decoration",
        "transform",
        "unicode-bidi"
    ];
    exports.colorsNames = {
        aliceblue: "#f0f8ff",
        antiquewhite: "#faebd7",
        aqua: "#0ff",
        aquamarine: "#7fffd4",
        azure: "#f0ffff",
        beige: "#f5f5dc",
        bisque: "#ffe4c4",
        black: "#000",
        blanchedalmond: "#ffebcd",
        blue: "#00f",
        blueviolet: "#8a2be2",
        brown: "#a52a2a",
        burlywood: "#deb887",
        cadetblue: "#5f9ea0",
        chartreuse: "#7fff00",
        chocolate: "#d2691e",
        coral: "#ff7f50",
        cornflowerblue: "#6495ed",
        cornsilk: "#fff8dc",
        crimson: "#dc143c",
        cyan: "#0ff",
        darkblue: "#00008b",
        darkcyan: "#008b8b",
        darkgoldenrod: "#b8860b",
        darkgray: "#a9a9a9",
        darkgreen: "#006400",
        darkgrey: "#a9a9a9",
        darkkhaki: "#bdb76b",
        darkmagenta: "#8b008b",
        darkolivegreen: "#556b2f",
        darkorange: "#ff8c00",
        darkorchid: "#9932cc",
        darkred: "#8b0000",
        darksalmon: "#e9967a",
        darkseagreen: "#8fbc8f",
        darkslateblue: "#483d8b",
        darkslategray: "#2f4f4f",
        darkslategrey: "#2f4f4f",
        darkturquoise: "#00ced1",
        darkviolet: "#9400d3",
        deeppink: "#ff1493",
        deepskyblue: "#00bfff",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1e90ff",
        firebrick: "#b22222",
        floralwhite: "#fffaf0",
        forestgreen: "#228b22",
        fuchsia: "#f0f",
        gainsboro: "#dcdcdc",
        ghostwhite: "#f8f8ff",
        gold: "#ffd700",
        goldenrod: "#daa520",
        gray: "#808080",
        green: "#008000",
        greenyellow: "#adff2f",
        grey: "#808080",
        honeydew: "#f0fff0",
        hotpink: "#ff69b4",
        indianred: "#cd5c5c",
        indigo: "#4b0082",
        ivory: "#fffff0",
        khaki: "#f0e68c",
        lavender: "#e6e6fa",
        lavenderblush: "#fff0f5",
        lawngreen: "#7cfc00",
        lemonchiffon: "#fffacd",
        lightblue: "#add8e6",
        lightcoral: "#f08080",
        lightcyan: "#e0ffff",
        lightgoldenrodyellow: "#fafad2",
        lightgray: "#d3d3d3",
        lightgreen: "#90ee90",
        lightgrey: "#d3d3d3",
        lightpink: "#ffb6c1",
        lightsalmon: "#ffa07a",
        lightseagreen: "#20b2aa",
        lightskyblue: "#87cefa",
        lightslategray: "#789",
        lightslategrey: "#789",
        lightsteelblue: "#b0c4de",
        lightyellow: "#ffffe0",
        lime: "#0f0",
        limegreen: "#32cd32",
        linen: "#faf0e6",
        magenta: "#f0f",
        maroon: "#800000",
        mediumaquamarine: "#66cdaa",
        mediumblue: "#0000cd",
        mediumorchid: "#ba55d3",
        mediumpurple: "#9370db",
        mediumseagreen: "#3cb371",
        mediumslateblue: "#7b68ee",
        mediumspringgreen: "#00fa9a",
        mediumturquoise: "#48d1cc",
        mediumvioletred: "#c71585",
        midnightblue: "#191970",
        mintcream: "#f5fffa",
        mistyrose: "#ffe4e1",
        moccasin: "#ffe4b5",
        navajowhite: "#ffdead",
        navy: "#000080",
        oldlace: "#fdf5e6",
        olive: "#808000",
        olivedrab: "#6b8e23",
        orange: "#ffa500",
        orangered: "#ff4500",
        orchid: "#da70d6",
        palegoldenrod: "#eee8aa",
        palegreen: "#98fb98",
        paleturquoise: "#afeeee",
        palevioletred: "#db7093",
        papayawhip: "#ffefd5",
        peachpuff: "#ffdab9",
        peru: "#cd853f",
        pink: "#ffc0cb",
        plum: "#dda0dd",
        powderblue: "#b0e0e6",
        purple: "#800080",
        rebeccapurple: "#639",
        red: "#f00",
        rosybrown: "#bc8f8f",
        royalblue: "#4169e1",
        saddlebrown: "#8b4513",
        salmon: "#fa8072",
        sandybrown: "#f4a460",
        seagreen: "#2e8b57",
        seashell: "#fff5ee",
        sienna: "#a0522d",
        silver: "#c0c0c0",
        skyblue: "#87ceeb",
        slateblue: "#6a5acd",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#fffafa",
        springgreen: "#00ff7f",
        steelblue: "#4682b4",
        tan: "#d2b48c",
        teal: "#008080",
        thistle: "#d8bfd8",
        tomato: "#ff6347",
        turquoise: "#40e0d0",
        violet: "#ee82ee",
        wheat: "#f5deb3",
        white: "#fff",
        whitesmoke: "#f5f5f5",
        yellow: "#ff0",
        yellowgreen: "#9acd32"
    };
    exports.colorsShortNames = {
        "#f0ffff": "azure",
        "#f5f5dc": "beige",
        "#ffe4c4": "bisque",
        "#a52a2a": "brown",
        "#ff7f50": "coral",
        "#ffd700": "gold",
        "#808080": "gray",
        "#008000": "green",
        "#4b0082": "indigo",
        "#fffff0": "ivory",
        "#f0e68c": "khaki",
        "#faf0e6": "linen",
        "#800000": "maroon",
        "#000080": "navy",
        "#808000": "olive",
        "#ffa500": "orange",
        "#da70d6": "orchid",
        "#cd853f": "peru",
        "#ffc0cb": "pink",
        "#dda0dd": "plum",
        "#800080": "purple",
        "#f00": "red",
        "#ff0000": "red",
        "#fa8072": "salmon",
        "#a0522d": "sienna",
        "#c0c0c0": "silver",
        "#fffafa": "snow",
        "#d2b48c": "tan",
        "#008080": "teal",
        "#ff6347": "tomato",
        "#ee82ee": "violet",
        "#f5deb3": "wheat"
    };
    exports.colorsProps = [
        "color",
        "fill",
        "stroke",
        "stop-color",
        "flood-color",
        "lighting-color"
    ];
})($a8848f9916d99690$var$_collections);
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$h  } = $a8848f9916d99690$var$xast;
const { editorNamespaces: $a8848f9916d99690$var$editorNamespaces  } = $a8848f9916d99690$var$_collections;
$a8848f9916d99690$var$removeEditorsNSData$1.type = "visitor";
$a8848f9916d99690$var$removeEditorsNSData$1.name = "removeEditorsNSData";
$a8848f9916d99690$var$removeEditorsNSData$1.active = true;
$a8848f9916d99690$var$removeEditorsNSData$1.description = "removes editors namespaces, elements and attributes";
$a8848f9916d99690$var$removeEditorsNSData$1.fn = (_root, params)=>{
    let namespaces = $a8848f9916d99690$var$editorNamespaces;
    if (Array.isArray(params.additionalNamespaces)) namespaces = [
        ...$a8848f9916d99690$var$editorNamespaces,
        ...params.additionalNamespaces
    ];
    const prefixes = [];
    return {
        element: {
            enter: (node, parentNode)=>{
                if (node.name === "svg") {
                    for (const [name23, value] of Object.entries(node.attributes))if (name23.startsWith("xmlns:") && namespaces.includes(value)) {
                        prefixes.push(name23.slice(6));
                        delete node.attributes[name23];
                    }
                }
                for (const name24 of Object.keys(node.attributes))if (name24.includes(":")) {
                    const [prefix] = name24.split(":");
                    if (prefixes.includes(prefix)) delete node.attributes[name24];
                }
                if (node.name.includes(":")) {
                    const [prefix] = node.name.split(":");
                    if (prefixes.includes(prefix)) $a8848f9916d99690$var$detachNodeFromParent$h(node, parentNode);
                }
            }
        }
    };
};
var $a8848f9916d99690$var$cleanupAttrs$1 = {
};
$a8848f9916d99690$var$cleanupAttrs$1.name = "cleanupAttrs";
$a8848f9916d99690$var$cleanupAttrs$1.type = "visitor";
$a8848f9916d99690$var$cleanupAttrs$1.active = true;
$a8848f9916d99690$var$cleanupAttrs$1.description = "cleanups attributes from newlines, trailing and repeating spaces";
const $a8848f9916d99690$var$regNewlinesNeedSpace = /(\S)\r?\n(\S)/g;
const $a8848f9916d99690$var$regNewlines = /\r?\n/g;
const $a8848f9916d99690$var$regSpaces = /\s{2,}/g;
$a8848f9916d99690$var$cleanupAttrs$1.fn = (root, params)=>{
    const { newlines: newlines = true , trim: trim = true , spaces: spaces = true  } = params;
    return {
        element: {
            enter: (node)=>{
                for (const name of Object.keys(node.attributes)){
                    if (newlines) {
                        node.attributes[name] = node.attributes[name].replace($a8848f9916d99690$var$regNewlinesNeedSpace, (match, p1, p2)=>p1 + " " + p2
                        );
                        node.attributes[name] = node.attributes[name].replace($a8848f9916d99690$var$regNewlines, "");
                    }
                    if (trim) node.attributes[name] = node.attributes[name].trim();
                    if (spaces) node.attributes[name] = node.attributes[name].replace($a8848f9916d99690$var$regSpaces, " ");
                }
            }
        }
    };
};
var $a8848f9916d99690$var$mergeStyles$1 = {
};
var $a8848f9916d99690$var$CSSClassList$1 = function(node) {
    this.parentNode = node;
    this.classNames = new Set;
    const value = node.attributes.class;
    if (value != null) {
        this.addClassValueHandler();
        this.setClassValue(value);
    }
};
$a8848f9916d99690$var$CSSClassList$1.prototype.addClassValueHandler = function() {
    Object.defineProperty(this.parentNode.attributes, "class", {
        get: this.getClassValue.bind(this),
        set: this.setClassValue.bind(this),
        enumerable: true,
        configurable: true
    });
};
$a8848f9916d99690$var$CSSClassList$1.prototype.getClassValue = function() {
    var arrClassNames = Array.from(this.classNames);
    return arrClassNames.join(" ");
};
$a8848f9916d99690$var$CSSClassList$1.prototype.setClassValue = function(newValue) {
    if (typeof newValue === "undefined") {
        this.classNames.clear();
        return;
    }
    var arrClassNames = newValue.split(" ");
    this.classNames = new Set(arrClassNames);
};
$a8848f9916d99690$var$CSSClassList$1.prototype.add = function() {
    this.addClassValueHandler();
    Object.values(arguments).forEach(this._addSingle.bind(this));
};
$a8848f9916d99690$var$CSSClassList$1.prototype._addSingle = function(className) {
    this.classNames.add(className);
};
$a8848f9916d99690$var$CSSClassList$1.prototype.remove = function() {
    this.addClassValueHandler();
    Object.values(arguments).forEach(this._removeSingle.bind(this));
};
$a8848f9916d99690$var$CSSClassList$1.prototype._removeSingle = function(className) {
    this.classNames.delete(className);
};
$a8848f9916d99690$var$CSSClassList$1.prototype.item = function(index) {
    var arrClassNames = Array.from(this.classNames);
    return arrClassNames[index];
};
$a8848f9916d99690$var$CSSClassList$1.prototype.toggle = function(className, force) {
    if (this.contains(className) || force === false) this.classNames.delete(className);
    this.classNames.add(className);
};
$a8848f9916d99690$var$CSSClassList$1.prototype.contains = function(className) {
    return this.classNames.has(className);
};
var $a8848f9916d99690$var$cssClassList = $a8848f9916d99690$var$CSSClassList$1;
var $a8848f9916d99690$var$csstree_min = {
    exports: {
    }
};
(function(module, exports) {
    !function(e, t) {
        module.exports = t();
    }($a8848f9916d99690$var$commonjsGlobal, function() {
        function e1(e) {
            return {
                prev: null,
                next: null,
                data: e
            };
        }
        function t1(e, t, n) {
            var i;
            return null !== r1 ? (i = r1, r1 = r1.cursor, i.prev = t, i.next = n, i.cursor = e.cursor) : i = {
                prev: t,
                next: n,
                cursor: e.cursor
            }, e.cursor = i, i;
        }
        function n1(e) {
            var t = e.cursor;
            e.cursor = t.cursor, t.prev = null, t.next = null, t.cursor = r1, r1 = t;
        }
        var r1 = null, i1 = function() {
            this.cursor = null, this.head = null, this.tail = null;
        };
        i1.createItem = e1, i1.prototype.createItem = e1, i1.prototype.updateCursors = function(e, t, n, r) {
            for(var i = this.cursor; null !== i;)i.prev === e && (i.prev = t), i.next === n && (i.next = r), i = i.cursor;
        }, i1.prototype.getSize = function() {
            for(var e = 0, t = this.head; t;)e++, t = t.next;
            return e;
        }, i1.prototype.fromArray = function(t) {
            var n = null;
            this.head = null;
            for(var r = 0; r < t.length; r++){
                var i = e1(t[r]);
                null !== n ? n.next = i : this.head = i, i.prev = n, n = i;
            }
            return this.tail = n, this;
        }, i1.prototype.toArray = function() {
            for(var e = this.head, t = []; e;)t.push(e.data), e = e.next;
            return t;
        }, i1.prototype.toJSON = i1.prototype.toArray, i1.prototype.isEmpty = function() {
            return null === this.head;
        }, i1.prototype.first = function() {
            return this.head && this.head.data;
        }, i1.prototype.last = function() {
            return this.tail && this.tail.data;
        }, i1.prototype.each = function(e, r) {
            var i;
            void 0 === r && (r = this);
            for(var a = t1(this, null, this.head); null !== a.next;)i = a.next, a.next = i.next, e.call(r, i.data, i, this);
            n1(this);
        }, i1.prototype.forEach = i1.prototype.each, i1.prototype.eachRight = function(e, r) {
            var i;
            void 0 === r && (r = this);
            for(var a = t1(this, this.tail, null); null !== a.prev;)i = a.prev, a.prev = i.prev, e.call(r, i.data, i, this);
            n1(this);
        }, i1.prototype.forEachRight = i1.prototype.eachRight, i1.prototype.reduce = function(e, r, i) {
            var a;
            void 0 === i && (i = this);
            for(var o = t1(this, null, this.head), s = r; null !== o.next;)a = o.next, o.next = a.next, s = e.call(i, s, a.data, a, this);
            return n1(this), s;
        }, i1.prototype.reduceRight = function(e, r, i) {
            var a;
            void 0 === i && (i = this);
            for(var o = t1(this, this.tail, null), s = r; null !== o.prev;)a = o.prev, o.prev = a.prev, s = e.call(i, s, a.data, a, this);
            return n1(this), s;
        }, i1.prototype.nextUntil = function(e, r, i) {
            if (null !== e) {
                var a;
                void 0 === i && (i = this);
                for(var o = t1(this, null, e); null !== o.next && (a = o.next, o.next = a.next, !r.call(i, a.data, a, this)););
                n1(this);
            }
        }, i1.prototype.prevUntil = function(e, r, i) {
            if (null !== e) {
                var a;
                void 0 === i && (i = this);
                for(var o = t1(this, e, null); null !== o.prev && (a = o.prev, o.prev = a.prev, !r.call(i, a.data, a, this)););
                n1(this);
            }
        }, i1.prototype.some = function(e, t) {
            var n = this.head;
            for(void 0 === t && (t = this); null !== n;){
                if (e.call(t, n.data, n, this)) return !0;
                n = n.next;
            }
            return !1;
        }, i1.prototype.map = function(e, t) {
            var n = new i1, r = this.head;
            for(void 0 === t && (t = this); null !== r;)n.appendData(e.call(t, r.data, r, this)), r = r.next;
            return n;
        }, i1.prototype.filter = function(e, t) {
            var n = new i1, r = this.head;
            for(void 0 === t && (t = this); null !== r;)e.call(t, r.data, r, this) && n.appendData(r.data), r = r.next;
            return n;
        }, i1.prototype.clear = function() {
            this.head = null, this.tail = null;
        }, i1.prototype.copy = function() {
            for(var t = new i1, n = this.head; null !== n;)t.insert(e1(n.data)), n = n.next;
            return t;
        }, i1.prototype.prepend = function(e) {
            return this.updateCursors(null, e, this.head, e), null !== this.head ? (this.head.prev = e, e.next = this.head) : this.tail = e, this.head = e, this;
        }, i1.prototype.prependData = function(t) {
            return this.prepend(e1(t));
        }, i1.prototype.append = function(e) {
            return this.insert(e);
        }, i1.prototype.appendData = function(t) {
            return this.insert(e1(t));
        }, i1.prototype.insert = function(e, t) {
            if (null != t) {
                if (this.updateCursors(t.prev, e, t, e), null === t.prev) {
                    if (this.head !== t) throw new Error("before doesn't belong to list");
                    this.head = e, t.prev = e, e.next = t, this.updateCursors(null, e);
                } else t.prev.next = e, e.prev = t.prev, t.prev = e, e.next = t;
            } else this.updateCursors(this.tail, e, null, e), null !== this.tail ? (this.tail.next = e, e.prev = this.tail) : this.head = e, this.tail = e;
            return this;
        }, i1.prototype.insertData = function(t, n) {
            return this.insert(e1(t), n);
        }, i1.prototype.remove = function(e) {
            if (this.updateCursors(e, e.prev, e, e.next), null !== e.prev) e.prev.next = e.next;
            else {
                if (this.head !== e) throw new Error("item doesn't belong to list");
                this.head = e.next;
            }
            if (null !== e.next) e.next.prev = e.prev;
            else {
                if (this.tail !== e) throw new Error("item doesn't belong to list");
                this.tail = e.prev;
            }
            return e.prev = null, e.next = null, e;
        }, i1.prototype.push = function(t) {
            this.insert(e1(t));
        }, i1.prototype.pop = function() {
            if (null !== this.tail) return this.remove(this.tail);
        }, i1.prototype.unshift = function(t) {
            this.prepend(e1(t));
        }, i1.prototype.shift = function() {
            if (null !== this.head) return this.remove(this.head);
        }, i1.prototype.prependList = function(e) {
            return this.insertList(e, this.head);
        }, i1.prototype.appendList = function(e) {
            return this.insertList(e);
        }, i1.prototype.insertList = function(e, t) {
            return null === e.head || (null != t ? (this.updateCursors(t.prev, e.tail, t, e.head), null !== t.prev ? (t.prev.next = e.head, e.head.prev = t.prev) : this.head = e.head, t.prev = e.tail, e.tail.next = t) : (this.updateCursors(this.tail, e.tail, null, e.head), null !== this.tail ? (this.tail.next = e.head, e.head.prev = this.tail) : this.head = e.head, this.tail = e.tail), e.head = null, e.tail = null), this;
        }, i1.prototype.replace = function(e, t) {
            "head" in t ? this.insertList(t, e) : this.insert(t, e), this.remove(e);
        };
        var a1 = i1, o1 = function(e, t) {
            var n = Object.create(SyntaxError.prototype), r = new Error;
            return n.name = e, n.message = t, Object.defineProperty(n, "stack", {
                get: function() {
                    return (r.stack || "").replace(/^(.+\n){1,3}/, e + ": " + t + "\n");
                }
            }), n;
        };
        function s1(e2, t2) {
            function n2(e, t3) {
                return r2.slice(e, t3).map(function(t, n) {
                    for(var r = String(e + n + 1); r.length < l;)r = " " + r;
                    return r + " |" + t;
                }).join("\n");
            }
            var r2 = e2.source.split(/\r\n?|\n|\f/), i = e2.line, a = e2.column, o = Math.max(1, i - t2) - 1, s = Math.min(i + t2, r2.length + 1), l = Math.max(4, String(s).length) + 1, c = 0;
            (a += 3 * (r2[i - 1].substr(0, a - 1).match(/\t/g) || []).length) > 100 && (c = a - 60 + 3, a = 58);
            for(var u = o; u <= s; u++)u >= 0 && u < r2.length && (r2[u] = r2[u].replace(/\t/g, "    "), r2[u] = (c > 0 && r2[u].length > c ? "…" : "") + r2[u].substr(c, 98) + (r2[u].length > c + 100 - 1 ? "…" : ""));
            return [
                n2(o, i),
                new Array(a + l + 2).join("-") + "^",
                n2(i, s)
            ].filter(Boolean).join("\n");
        }
        var l1 = function(e3, t, n, r, i) {
            var a = o1("SyntaxError", e3);
            return a.source = t, a.offset = n, a.line = r, a.column = i, a.sourceFragment = function(e) {
                return s1(a, isNaN(e) ? 0 : e);
            }, Object.defineProperty(a, "formattedMessage", {
                get: function() {
                    return "Parse error: " + a.message + "\n" + s1(a, 2);
                }
            }), a.parseError = {
                offset: n,
                line: r,
                column: i
            }, a;
        }, c1 = {
            EOF: 0,
            Ident: 1,
            Function: 2,
            AtKeyword: 3,
            Hash: 4,
            String: 5,
            BadString: 6,
            Url: 7,
            BadUrl: 8,
            Delim: 9,
            Number: 10,
            Percentage: 11,
            Dimension: 12,
            WhiteSpace: 13,
            CDO: 14,
            CDC: 15,
            Colon: 16,
            Semicolon: 17,
            Comma: 18,
            LeftSquareBracket: 19,
            RightSquareBracket: 20,
            LeftParenthesis: 21,
            RightParenthesis: 22,
            LeftCurlyBracket: 23,
            RightCurlyBracket: 24,
            Comment: 25
        }, u1 = Object.keys(c1).reduce(function(e, t) {
            return e[c1[t]] = t, e;
        }, {
        }), h1 = {
            TYPE: c1,
            NAME: u1
        };
        function p1(e) {
            return e >= 48 && e <= 57;
        }
        function d2(e) {
            return e >= 65 && e <= 90;
        }
        function m1(e) {
            return e >= 97 && e <= 122;
        }
        function g1(e) {
            return d2(e) || m1(e);
        }
        function f1(e) {
            return e >= 128;
        }
        function b2(e) {
            return g1(e) || f1(e) || 95 === e;
        }
        function y1(e) {
            return e >= 0 && e <= 8 || 11 === e || e >= 14 && e <= 31 || 127 === e;
        }
        function k1(e) {
            return 10 === e || 13 === e || 12 === e;
        }
        function v1(e) {
            return k1(e) || 32 === e || 9 === e;
        }
        function x1(e, t) {
            return 92 === e && !k1(t) && 0 !== t;
        }
        var w1 = new Array(128);
        C1.Eof = 128, C1.WhiteSpace = 130, C1.Digit = 131, C1.NameStart = 132, C1.NonPrintable = 133;
        for(var S1 = 0; S1 < w1.length; S1++)switch(!0){
            case v1(S1):
                w1[S1] = C1.WhiteSpace;
                break;
            case p1(S1):
                w1[S1] = C1.Digit;
                break;
            case b2(S1):
                w1[S1] = C1.NameStart;
                break;
            case y1(S1):
                w1[S1] = C1.NonPrintable;
                break;
            default:
                w1[S1] = S1 || C1.Eof;
        }
        function C1(e) {
            return e < 128 ? w1[e] : C1.NameStart;
        }
        var z1 = {
            isDigit: p1,
            isHexDigit: function(e) {
                return p1(e) || e >= 65 && e <= 70 || e >= 97 && e <= 102;
            },
            isUppercaseLetter: d2,
            isLowercaseLetter: m1,
            isLetter: g1,
            isNonAscii: f1,
            isNameStart: b2,
            isName: function(e) {
                return b2(e) || p1(e) || 45 === e;
            },
            isNonPrintable: y1,
            isNewline: k1,
            isWhiteSpace: v1,
            isValidEscape: x1,
            isIdentifierStart: function(e, t, n) {
                return 45 === e ? b2(t) || 45 === t || x1(t, n) : !!b2(e) || 92 === e && x1(e, t);
            },
            isNumberStart: function(e, t, n) {
                return 43 === e || 45 === e ? p1(t) ? 2 : 46 === t && p1(n) ? 3 : 0 : 46 === e ? p1(t) ? 2 : 0 : p1(e) ? 1 : 0;
            },
            isBOM: function(e) {
                return 65279 === e || 65534 === e ? 1 : 0;
            },
            charCodeCategory: C1
        }, A1 = z1.isDigit, P1 = z1.isHexDigit, T1 = z1.isUppercaseLetter, L = z1.isName, E = z1.isWhiteSpace, D = z1.isValidEscape;
        function O(e, t) {
            return t < e.length ? e.charCodeAt(t) : 0;
        }
        function B(e, t, n) {
            return 13 === n && 10 === O(e, t + 1) ? 2 : 1;
        }
        function I(e, t, n) {
            var r = e.charCodeAt(t);
            return T1(r) && (r |= 32), r === n;
        }
        function N(e, t) {
            for(; t < e.length && A1(e.charCodeAt(t)); t++);
            return t;
        }
        function R(e, t) {
            if (P1(O(e, (t += 2) - 1))) {
                for(var n = Math.min(e.length, t + 5); t < n && P1(O(e, t)); t++);
                var r = O(e, t);
                E(r) && (t += B(e, t, r));
            }
            return t;
        }
        var M = {
            consumeEscaped: R,
            consumeName: function(e, t) {
                for(; t < e.length; t++){
                    var n = e.charCodeAt(t);
                    if (!L(n)) {
                        if (!D(n, O(e, t + 1))) break;
                        t = R(e, t) - 1;
                    }
                }
                return t;
            },
            consumeNumber: function(e, t) {
                var n = e.charCodeAt(t);
                if (43 !== n && 45 !== n || (n = e.charCodeAt(t += 1)), A1(n) && (t = N(e, t + 1), n = e.charCodeAt(t)), 46 === n && A1(e.charCodeAt(t + 1)) && (n = e.charCodeAt(t += 2), t = N(e, t)), I(e, t, 101)) {
                    var r = 0;
                    45 !== (n = e.charCodeAt(t + 1)) && 43 !== n || (r = 1, n = e.charCodeAt(t + 2)), A1(n) && (t = N(e, t + 1 + r + 1));
                }
                return t;
            },
            consumeBadUrlRemnants: function(e, t) {
                for(; t < e.length; t++){
                    var n = e.charCodeAt(t);
                    if (41 === n) {
                        t++;
                        break;
                    }
                    D(n, O(e, t + 1)) && (t = R(e, t));
                }
                return t;
            },
            cmpChar: I,
            cmpStr: function(e, t, n, r) {
                if (n - t !== r.length) return !1;
                if (t < 0 || n > e.length) return !1;
                for(var i = t; i < n; i++){
                    var a = e.charCodeAt(i), o = r.charCodeAt(i - t);
                    if (T1(a) && (a |= 32), a !== o) return !1;
                }
                return !0;
            },
            getNewlineLength: B,
            findWhiteSpaceStart: function(e, t) {
                for(; t >= 0 && E(e.charCodeAt(t)); t--);
                return t + 1;
            },
            findWhiteSpaceEnd: function(e, t) {
                for(; t < e.length && E(e.charCodeAt(t)); t++);
                return t;
            }
        }, j = h1.TYPE, _ = h1.NAME, F = M.cmpStr, W = j.EOF, q = j.WhiteSpace, Y = j.Comment, U = function() {
            this.offsetAndType = null, this.balance = null, this.reset();
        };
        U.prototype = {
            reset: function() {
                this.eof = !1, this.tokenIndex = -1, this.tokenType = 0, this.tokenStart = this.firstCharOffset, this.tokenEnd = this.firstCharOffset;
            },
            lookupType: function(e) {
                return (e += this.tokenIndex) < this.tokenCount ? this.offsetAndType[e] >> 24 : W;
            },
            lookupOffset: function(e) {
                return (e += this.tokenIndex) < this.tokenCount ? 16777215 & this.offsetAndType[e - 1] : this.source.length;
            },
            lookupValue: function(e, t) {
                return (e += this.tokenIndex) < this.tokenCount && F(this.source, 16777215 & this.offsetAndType[e - 1], 16777215 & this.offsetAndType[e], t);
            },
            getTokenStart: function(e) {
                return e === this.tokenIndex ? this.tokenStart : e > 0 ? e < this.tokenCount ? 16777215 & this.offsetAndType[e - 1] : 16777215 & this.offsetAndType[this.tokenCount] : this.firstCharOffset;
            },
            getRawLength: function(e, t) {
                var n, r = e, i = 16777215 & this.offsetAndType[Math.max(r - 1, 0)];
                e: for(; r < this.tokenCount && !((n = this.balance[r]) < e); r++)switch(t(this.offsetAndType[r] >> 24, this.source, i)){
                    case 1:
                        break e;
                    case 2:
                        r++;
                        break e;
                    default:
                        this.balance[n] === r && (r = n), i = 16777215 & this.offsetAndType[r];
                }
                return r - this.tokenIndex;
            },
            isBalanceEdge: function(e) {
                return this.balance[this.tokenIndex] < e;
            },
            isDelim: function(e, t) {
                return t ? this.lookupType(t) === j.Delim && this.source.charCodeAt(this.lookupOffset(t)) === e : this.tokenType === j.Delim && this.source.charCodeAt(this.tokenStart) === e;
            },
            getTokenValue: function() {
                return this.source.substring(this.tokenStart, this.tokenEnd);
            },
            getTokenLength: function() {
                return this.tokenEnd - this.tokenStart;
            },
            substrToCursor: function(e) {
                return this.source.substring(e, this.tokenStart);
            },
            skipWS: function() {
                for(var e = this.tokenIndex, t = 0; e < this.tokenCount && this.offsetAndType[e] >> 24 === q; e++, t++);
                t > 0 && this.skip(t);
            },
            skipSC: function() {
                for(; this.tokenType === q || this.tokenType === Y;)this.next();
            },
            skip: function(e) {
                var t = this.tokenIndex + e;
                t < this.tokenCount ? (this.tokenIndex = t, this.tokenStart = 16777215 & this.offsetAndType[t - 1], t = this.offsetAndType[t], this.tokenType = t >> 24, this.tokenEnd = 16777215 & t) : (this.tokenIndex = this.tokenCount, this.next());
            },
            next: function() {
                var e = this.tokenIndex + 1;
                e < this.tokenCount ? (this.tokenIndex = e, this.tokenStart = this.tokenEnd, e = this.offsetAndType[e], this.tokenType = e >> 24, this.tokenEnd = 16777215 & e) : (this.tokenIndex = this.tokenCount, this.eof = !0, this.tokenType = W, this.tokenStart = this.tokenEnd = this.source.length);
            },
            forEachToken (e) {
                for(var t = 0, n = this.firstCharOffset; t < this.tokenCount; t++){
                    var r = n, i = this.offsetAndType[t], a = 16777215 & i;
                    n = a, e(i >> 24, r, a, t);
                }
            },
            dump () {
                var e = new Array(this.tokenCount);
                return this.forEachToken((t, n, r, i)=>{
                    e[i] = {
                        idx: i,
                        type: _[t],
                        chunk: this.source.substring(n, r),
                        balance: this.balance[i]
                    };
                }), e;
            }
        };
        var H = U;
        function V(e) {
            return e;
        }
        function K(e4, t4, n3, r3) {
            var i2, a2;
            switch(e4.type){
                case "Group":
                    i2 = (function(e5, t, n, r) {
                        var i = " " === e5.combinator || r ? e5.combinator : " " + e5.combinator + " ", a = e5.terms.map(function(e) {
                            return K(e, t, n, r);
                        }).join(i);
                        return (e5.explicit || n) && (a = (r || "," === a[0] ? "[" : "[ ") + a + (r ? "]" : " ]")), a;
                    })(e4, t4, n3, r3) + (e4.disallowEmpty ? "!" : "");
                    break;
                case "Multiplier":
                    return K(e4.term, t4, n3, r3) + t4(0 === (a2 = e4).min && 0 === a2.max ? "*" : 0 === a2.min && 1 === a2.max ? "?" : 1 === a2.min && 0 === a2.max ? a2.comma ? "#" : "+" : 1 === a2.min && 1 === a2.max ? "" : (a2.comma ? "#" : "") + (a2.min === a2.max ? "{" + a2.min + "}" : "{" + a2.min + "," + (0 !== a2.max ? a2.max : "") + "}"), e4);
                case "Type":
                    i2 = "<" + e4.name + (e4.opts ? t4(function(e) {
                        switch(e.type){
                            case "Range":
                                return " [" + (null === e.min ? "-∞" : e.min) + "," + (null === e.max ? "∞" : e.max) + "]";
                            default:
                                throw new Error("Unknown node type `" + e.type + "`");
                        }
                    }(e4.opts), e4.opts) : "") + ">";
                    break;
                case "Property":
                    i2 = "<'" + e4.name + "'>";
                    break;
                case "Keyword":
                    i2 = e4.name;
                    break;
                case "AtKeyword":
                    i2 = "@" + e4.name;
                    break;
                case "Function":
                    i2 = e4.name + "(";
                    break;
                case "String":
                case "Token":
                    i2 = e4.value;
                    break;
                case "Comma":
                    i2 = ",";
                    break;
                default:
                    throw new Error("Unknown node type `" + e4.type + "`");
            }
            return t4(i2, e4);
        }
        var G = function(e, t) {
            var n = V, r = !1, i = !1;
            return "function" == typeof t ? n = t : t && (r = Boolean(t.forceBraces), i = Boolean(t.compact), "function" == typeof t.decorate && (n = t.decorate)), K(e, n, r, i);
        };
        const Q = {
            offset: 0,
            line: 1,
            column: 1
        };
        function X(e, t) {
            const n = e && e.loc && e.loc[t];
            return n ? "line" in n ? Z(n) : n : null;
        }
        function Z({ offset: e , line: t , column: n  }, r) {
            const i = {
                offset: e,
                line: t,
                column: n
            };
            if (r) {
                const e = r.split(/\n|\r\n?|\f/);
                i.offset += r.length, i.line += e.length - 1, i.column = 1 === e.length ? i.column + r.length : e.pop().length + 1;
            }
            return i;
        }
        var $ = function(e, t) {
            const n = o1("SyntaxReferenceError", e + (t ? " `" + t + "`" : ""));
            return n.reference = t, n;
        }, J = function(e7, t5, n4, r4) {
            const i3 = o1("SyntaxMatchError", e7), { css: a3 , mismatchOffset: s2 , mismatchLength: l2 , start: c2 , end: u2  } = function(e, t) {
                const n = e.tokens, r = e.longestMatch, i = r < n.length && n[r].node || null, a = i !== t ? i : null;
                let o, s, l = 0, c = 0, u = 0, h = "";
                for(let e6 = 0; e6 < n.length; e6++){
                    const t = n[e6].value;
                    e6 === r && (c = t.length, l = h.length), null !== a && n[e6].node === a && (e6 <= r ? u++ : u = 0), h += t;
                }
                return r === n.length || u > 1 ? (o = X(a || t, "end") || Z(Q, h), s = Z(o)) : (o = X(a, "start") || Z(X(t, "start") || Q, h.slice(0, l)), s = X(a, "end") || Z(o, h.substr(l, c))), {
                    css: h,
                    mismatchOffset: l,
                    mismatchLength: c,
                    start: o,
                    end: s
                };
            }(r4, n4);
            return i3.rawMessage = e7, i3.syntax = t5 ? G(t5) : "<generic>", i3.css = a3, i3.mismatchOffset = s2, i3.mismatchLength = l2, i3.message = e7 + "\n  syntax: " + i3.syntax + "\n   value: " + (a3 || "<empty string>") + "\n  --------" + new Array(i3.mismatchOffset + 1).join("-") + "^", Object.assign(i3, c2), i3.loc = {
                source: n4 && n4.loc && n4.loc.source || "<unknown>",
                start: c2,
                end: u2
            }, i3;
        }, ee = Object.prototype.hasOwnProperty, te = Object.create(null), ne = Object.create(null);
        function re(e, t) {
            return t = t || 0, e.length - t >= 2 && 45 === e.charCodeAt(t) && 45 === e.charCodeAt(t + 1);
        }
        function ie(e, t) {
            if (t = t || 0, e.length - t >= 3 && 45 === e.charCodeAt(t) && 45 !== e.charCodeAt(t + 1)) {
                var n = e.indexOf("-", t + 2);
                if (-1 !== n) return e.substring(t, n + 1);
            }
            return "";
        }
        var ae = {
            keyword: function(e) {
                if (ee.call(te, e)) return te[e];
                var t = e.toLowerCase();
                if (ee.call(te, t)) return te[e] = te[t];
                var n = re(t, 0), r = n ? "" : ie(t, 0);
                return te[e] = Object.freeze({
                    basename: t.substr(r.length),
                    name: t,
                    vendor: r,
                    prefix: r,
                    custom: n
                });
            },
            property: function(e) {
                if (ee.call(ne, e)) return ne[e];
                var t = e, n = e[0];
                "/" === n ? n = "/" === e[1] ? "//" : "/" : "_" !== n && "*" !== n && "$" !== n && "#" !== n && "+" !== n && "&" !== n && (n = "");
                var r = re(t, n.length);
                if (!r && (t = t.toLowerCase(), ee.call(ne, t))) return ne[e] = ne[t];
                var i = r ? "" : ie(t, n.length), a = t.substr(0, n.length + i.length);
                return ne[e] = Object.freeze({
                    basename: t.substr(a.length),
                    name: t.substr(n.length),
                    hack: n,
                    vendor: i,
                    prefix: a,
                    custom: r
                });
            },
            isCustomProperty: re,
            vendorPrefix: ie
        }, oe = "undefined" != typeof Uint32Array ? Uint32Array : Array, se = function(e, t) {
            return null === e || e.length < t ? new oe(Math.max(t + 1024, 16384)) : e;
        }, le = h1.TYPE, ce = z1.isNewline, ue = z1.isName, he = z1.isValidEscape, pe = z1.isNumberStart, de = z1.isIdentifierStart, me = z1.charCodeCategory, ge = z1.isBOM, fe = M.cmpStr, be = M.getNewlineLength, ye = M.findWhiteSpaceEnd, ke = M.consumeEscaped, ve = M.consumeName, xe = M.consumeNumber, we = M.consumeBadUrlRemnants;
        function Se(e, t6) {
            function n(t) {
                return t < o ? e.charCodeAt(t) : 0;
            }
            function r5() {
                return h = xe(e, h), de(n(h), n(h + 1), n(h + 2)) ? (f = le.Dimension, void (h = ve(e, h))) : 37 === n(h) ? (f = le.Percentage, void h++) : void (f = le.Number);
            }
            function i4() {
                const t7 = h;
                return h = ve(e, h), fe(e, t7, h, "url") && 40 === n(h) ? 34 === n(h = ye(e, h + 1)) || 39 === n(h) ? (f = le.Function, void (h = t7 + 4)) : void function() {
                    for(f = le.Url, h = ye(e, h); h < e.length; h++){
                        var t = e.charCodeAt(h);
                        switch(me(t)){
                            case 41:
                                return void h++;
                            case me.Eof:
                                return;
                            case me.WhiteSpace:
                                return 41 === n(h = ye(e, h)) || h >= e.length ? void (h < e.length && h++) : (h = we(e, h), void (f = le.BadUrl));
                            case 34:
                            case 39:
                            case 40:
                            case me.NonPrintable:
                                return h = we(e, h), void (f = le.BadUrl);
                            case 92:
                                if (he(t, n(h + 1))) {
                                    h = ke(e, h) - 1;
                                    break;
                                }
                                return h = we(e, h), void (f = le.BadUrl);
                        }
                    }
                }() : 40 === n(h) ? (f = le.Function, void h++) : void (f = le.Ident);
            }
            function a(t) {
                for(t || (t = n(h++)), f = le.String; h < e.length; h++){
                    var r = e.charCodeAt(h);
                    switch(me(r)){
                        case t:
                            return void h++;
                        case me.Eof:
                            return;
                        case me.WhiteSpace:
                            if (ce(r)) return h += be(e, h, r), void (f = le.BadString);
                            break;
                        case 92:
                            if (h === e.length - 1) break;
                            var i = n(h + 1);
                            ce(i) ? h += be(e, h + 1, i) : he(r, i) && (h = ke(e, h) - 1);
                    }
                }
            }
            t6 || (t6 = new H);
            for(var o = (e = String(e || "")).length, s = se(t6.offsetAndType, o + 1), l = se(t6.balance, o + 1), c = 0, u = ge(n(0)), h = u, p = 0, d = 0, m = 0; h < o;){
                var g = e.charCodeAt(h), f = 0;
                switch(l[c] = o, me(g)){
                    case me.WhiteSpace:
                        f = le.WhiteSpace, h = ye(e, h + 1);
                        break;
                    case 34:
                        a();
                        break;
                    case 35:
                        ue(n(h + 1)) || he(n(h + 1), n(h + 2)) ? (f = le.Hash, h = ve(e, h + 1)) : (f = le.Delim, h++);
                        break;
                    case 39:
                        a();
                        break;
                    case 40:
                        f = le.LeftParenthesis, h++;
                        break;
                    case 41:
                        f = le.RightParenthesis, h++;
                        break;
                    case 43:
                        pe(g, n(h + 1), n(h + 2)) ? r5() : (f = le.Delim, h++);
                        break;
                    case 44:
                        f = le.Comma, h++;
                        break;
                    case 45:
                        pe(g, n(h + 1), n(h + 2)) ? r5() : 45 === n(h + 1) && 62 === n(h + 2) ? (f = le.CDC, h += 3) : de(g, n(h + 1), n(h + 2)) ? i4() : (f = le.Delim, h++);
                        break;
                    case 46:
                        pe(g, n(h + 1), n(h + 2)) ? r5() : (f = le.Delim, h++);
                        break;
                    case 47:
                        42 === n(h + 1) ? (f = le.Comment, 1 === (h = e.indexOf("*/", h + 2) + 2) && (h = e.length)) : (f = le.Delim, h++);
                        break;
                    case 58:
                        f = le.Colon, h++;
                        break;
                    case 59:
                        f = le.Semicolon, h++;
                        break;
                    case 60:
                        33 === n(h + 1) && 45 === n(h + 2) && 45 === n(h + 3) ? (f = le.CDO, h += 4) : (f = le.Delim, h++);
                        break;
                    case 64:
                        de(n(h + 1), n(h + 2), n(h + 3)) ? (f = le.AtKeyword, h = ve(e, h + 1)) : (f = le.Delim, h++);
                        break;
                    case 91:
                        f = le.LeftSquareBracket, h++;
                        break;
                    case 92:
                        he(g, n(h + 1)) ? i4() : (f = le.Delim, h++);
                        break;
                    case 93:
                        f = le.RightSquareBracket, h++;
                        break;
                    case 123:
                        f = le.LeftCurlyBracket, h++;
                        break;
                    case 125:
                        f = le.RightCurlyBracket, h++;
                        break;
                    case me.Digit:
                        r5();
                        break;
                    case me.NameStart:
                        i4();
                        break;
                    case me.Eof:
                        break;
                    default:
                        f = le.Delim, h++;
                }
                switch(f){
                    case p:
                        for(p = (d = l[m = 16777215 & d]) >> 24, l[c] = m, l[m++] = c; m < c; m++)l[m] === o && (l[m] = c);
                        break;
                    case le.LeftParenthesis:
                    case le.Function:
                        l[c] = d, d = (p = le.RightParenthesis) << 24 | c;
                        break;
                    case le.LeftSquareBracket:
                        l[c] = d, d = (p = le.RightSquareBracket) << 24 | c;
                        break;
                    case le.LeftCurlyBracket:
                        l[c] = d, d = (p = le.RightCurlyBracket) << 24 | c;
                }
                s[c++] = f << 24 | h;
            }
            for(s[c] = le.EOF << 24 | h, l[c] = o, l[o] = o; 0 !== d;)d = l[m = 16777215 & d], l[m] = o;
            return t6.source = e, t6.firstCharOffset = u, t6.offsetAndType = s, t6.tokenCount = c, t6.balance = l, t6.reset(), t6.next(), t6;
        }
        Object.keys(h1).forEach(function(e) {
            Se[e] = h1[e];
        }), Object.keys(z1).forEach(function(e) {
            Se[e] = z1[e];
        }), Object.keys(M).forEach(function(e) {
            Se[e] = M[e];
        });
        var Ce = Se, ze = Ce.isDigit, Ae = Ce.cmpChar, Pe = Ce.TYPE, Te = Pe.Delim, Le = Pe.WhiteSpace, Ee = Pe.Comment, De = Pe.Ident, Oe = Pe.Number, Be = Pe.Dimension;
        function Ie(e, t) {
            return null !== e && e.type === Te && e.value.charCodeAt(0) === t;
        }
        function Ne(e, t, n) {
            for(; null !== e && (e.type === Le || e.type === Ee);)e = n(++t);
            return t;
        }
        function Re(e, t, n, r) {
            if (!e) return 0;
            var i = e.value.charCodeAt(t);
            if (43 === i || 45 === i) {
                if (n) return 0;
                t++;
            }
            for(; t < e.value.length; t++)if (!ze(e.value.charCodeAt(t))) return 0;
            return r + 1;
        }
        function Me(e, t, n) {
            var r = !1, i = Ne(e, t, n);
            if (null === (e = n(i))) return t;
            if (e.type !== Oe) {
                if (!Ie(e, 43) && !Ie(e, 45)) return t;
                if (r = !0, i = Ne(n(++i), i, n), null === (e = n(i)) && e.type !== Oe) return 0;
            }
            if (!r) {
                var a = e.value.charCodeAt(0);
                if (43 !== a && 45 !== a) return 0;
            }
            return Re(e, r ? 0 : 1, r, i);
        }
        var je = Ce.isHexDigit, _e = Ce.cmpChar, Fe = Ce.TYPE, We = Fe.Ident, qe = Fe.Delim, Ye = Fe.Number, Ue = Fe.Dimension;
        function He(e, t) {
            return null !== e && e.type === qe && e.value.charCodeAt(0) === t;
        }
        function Ve(e, t) {
            return e.value.charCodeAt(0) === t;
        }
        function Ke(e, t, n) {
            for(var r = t, i = 0; r < e.value.length; r++){
                var a = e.value.charCodeAt(r);
                if (45 === a && n && 0 !== i) return Ke(e, t + i + 1, !1) > 0 ? 6 : 0;
                if (!je(a)) return 0;
                if (++i > 6) return 0;
            }
            return i;
        }
        function Ge(e, t, n) {
            if (!e) return 0;
            for(; He(n(t), 63);){
                if (++e > 6) return 0;
                t++;
            }
            return t;
        }
        var Qe = Ce.isIdentifierStart, Xe = Ce.isHexDigit, Ze = Ce.isDigit, $e = Ce.cmpStr, Je = Ce.consumeNumber, et = Ce.TYPE, tt = [
            "unset",
            "initial",
            "inherit"
        ], nt = [
            "calc(",
            "-moz-calc(",
            "-webkit-calc("
        ];
        function rt(e, t) {
            return t < e.length ? e.charCodeAt(t) : 0;
        }
        function it(e, t) {
            return $e(e, 0, e.length, t);
        }
        function at(e, t) {
            for(var n = 0; n < t.length; n++)if (it(e, t[n])) return !0;
            return !1;
        }
        function ot(e, t) {
            return t === e.length - 2 && 92 === e.charCodeAt(t) && Ze(e.charCodeAt(t + 1));
        }
        function st(e, t, n) {
            if (e && "Range" === e.type) {
                var r = Number(void 0 !== n && n !== t.length ? t.substr(0, n) : t);
                if (isNaN(r)) return !0;
                if (null !== e.min && r < e.min) return !0;
                if (null !== e.max && r > e.max) return !0;
            }
            return !1;
        }
        function lt(e, t) {
            var n = e.index, r = 0;
            do {
                if (r++, e.balance <= n) break;
            }while (e = t(r))
            return r;
        }
        function ct(e) {
            return function(t, n, r) {
                return null === t ? 0 : t.type === et.Function && at(t.value, nt) ? lt(t, n) : e(t, n, r);
            };
        }
        function ut(e) {
            return function(t) {
                return null === t || t.type !== e ? 0 : 1;
            };
        }
        function ht(e) {
            return function(t, n, r) {
                if (null === t || t.type !== et.Dimension) return 0;
                var i = Je(t.value, 0);
                if (null !== e) {
                    var a = t.value.indexOf("\\", i), o = -1 !== a && ot(t.value, a) ? t.value.substring(i, a) : t.value.substr(i);
                    if (!1 === e.hasOwnProperty(o.toLowerCase())) return 0;
                }
                return st(r, t.value, i) ? 0 : 1;
            };
        }
        function pt(e) {
            return "function" != typeof e && (e = function() {
                return 0;
            }), function(t, n, r) {
                return null !== t && t.type === et.Number && 0 === Number(t.value) ? 1 : e(t, n, r);
            };
        }
        var dt, mt = {
            "ident-token": ut(et.Ident),
            "function-token": ut(et.Function),
            "at-keyword-token": ut(et.AtKeyword),
            "hash-token": ut(et.Hash),
            "string-token": ut(et.String),
            "bad-string-token": ut(et.BadString),
            "url-token": ut(et.Url),
            "bad-url-token": ut(et.BadUrl),
            "delim-token": ut(et.Delim),
            "number-token": ut(et.Number),
            "percentage-token": ut(et.Percentage),
            "dimension-token": ut(et.Dimension),
            "whitespace-token": ut(et.WhiteSpace),
            "CDO-token": ut(et.CDO),
            "CDC-token": ut(et.CDC),
            "colon-token": ut(et.Colon),
            "semicolon-token": ut(et.Semicolon),
            "comma-token": ut(et.Comma),
            "[-token": ut(et.LeftSquareBracket),
            "]-token": ut(et.RightSquareBracket),
            "(-token": ut(et.LeftParenthesis),
            ")-token": ut(et.RightParenthesis),
            "{-token": ut(et.LeftCurlyBracket),
            "}-token": ut(et.RightCurlyBracket),
            string: ut(et.String),
            ident: ut(et.Ident),
            "custom-ident": function(e) {
                if (null === e || e.type !== et.Ident) return 0;
                var t = e.value.toLowerCase();
                return at(t, tt) || it(t, "default") ? 0 : 1;
            },
            "custom-property-name": function(e) {
                return null === e || e.type !== et.Ident || 45 !== rt(e.value, 0) || 45 !== rt(e.value, 1) ? 0 : 1;
            },
            "hex-color": function(e) {
                if (null === e || e.type !== et.Hash) return 0;
                var t = e.value.length;
                if (4 !== t && 5 !== t && 7 !== t && 9 !== t) return 0;
                for(var n = 1; n < t; n++)if (!Xe(e.value.charCodeAt(n))) return 0;
                return 1;
            },
            "id-selector": function(e) {
                return null === e || e.type !== et.Hash ? 0 : Qe(rt(e.value, 1), rt(e.value, 2), rt(e.value, 3)) ? 1 : 0;
            },
            "an-plus-b": function(e, t) {
                var n = 0;
                if (!e) return 0;
                if (e.type === Oe) return Re(e, 0, !1, n);
                if (e.type === De && 45 === e.value.charCodeAt(0)) {
                    if (!Ae(e.value, 1, 110)) return 0;
                    switch(e.value.length){
                        case 2:
                            return Me(t(++n), n, t);
                        case 3:
                            return 45 !== e.value.charCodeAt(2) ? 0 : (n = Ne(t(++n), n, t), Re(e = t(n), 0, !0, n));
                        default:
                            return 45 !== e.value.charCodeAt(2) ? 0 : Re(e, 3, !0, n);
                    }
                } else if (e.type === De || Ie(e, 43) && t(n + 1).type === De) {
                    if (e.type !== De && (e = t(++n)), null === e || !Ae(e.value, 0, 110)) return 0;
                    switch(e.value.length){
                        case 1:
                            return Me(t(++n), n, t);
                        case 2:
                            return 45 !== e.value.charCodeAt(1) ? 0 : (n = Ne(t(++n), n, t), Re(e = t(n), 0, !0, n));
                        default:
                            return 45 !== e.value.charCodeAt(1) ? 0 : Re(e, 2, !0, n);
                    }
                } else if (e.type === Be) {
                    for(var r = e.value.charCodeAt(0), i = 43 === r || 45 === r ? 1 : 0, a = i; a < e.value.length && ze(e.value.charCodeAt(a)); a++);
                    return a === i ? 0 : Ae(e.value, a, 110) ? a + 1 === e.value.length ? Me(t(++n), n, t) : 45 !== e.value.charCodeAt(a + 1) ? 0 : a + 2 === e.value.length ? (n = Ne(t(++n), n, t), Re(e = t(n), 0, !0, n)) : Re(e, a + 2, !0, n) : 0;
                }
                return 0;
            },
            urange: function(e, t) {
                var n = 0;
                if (null === e || e.type !== We || !_e(e.value, 0, 117)) return 0;
                if (null === (e = t(++n))) return 0;
                if (He(e, 43)) return null === (e = t(++n)) ? 0 : e.type === We ? Ge(Ke(e, 0, !0), ++n, t) : He(e, 63) ? Ge(1, ++n, t) : 0;
                if (e.type === Ye) {
                    if (!Ve(e, 43)) return 0;
                    var r = Ke(e, 1, !0);
                    return 0 === r ? 0 : null === (e = t(++n)) ? n : e.type === Ue || e.type === Ye ? Ve(e, 45) && Ke(e, 1, !1) ? n + 1 : 0 : Ge(r, n, t);
                }
                return e.type === Ue && Ve(e, 43) ? Ge(Ke(e, 1, !0), ++n, t) : 0;
            },
            "declaration-value": function(e, t) {
                if (!e) return 0;
                var n = 0, r = 0, i = e.index;
                e: do {
                    switch(e.type){
                        case et.BadString:
                        case et.BadUrl:
                            break e;
                        case et.RightCurlyBracket:
                        case et.RightParenthesis:
                        case et.RightSquareBracket:
                            if (e.balance > e.index || e.balance < i) break e;
                            r--;
                            break;
                        case et.Semicolon:
                            if (0 === r) break e;
                            break;
                        case et.Delim:
                            if ("!" === e.value && 0 === r) break e;
                            break;
                        case et.Function:
                        case et.LeftParenthesis:
                        case et.LeftSquareBracket:
                        case et.LeftCurlyBracket:
                            r++;
                    }
                    if (n++, e.balance <= i) break;
                }while (e = t(n))
                return n;
            },
            "any-value": function(e, t) {
                if (!e) return 0;
                var n = e.index, r = 0;
                e: do {
                    switch(e.type){
                        case et.BadString:
                        case et.BadUrl:
                            break e;
                        case et.RightCurlyBracket:
                        case et.RightParenthesis:
                        case et.RightSquareBracket:
                            if (e.balance > e.index || e.balance < n) break e;
                    }
                    if (r++, e.balance <= n) break;
                }while (e = t(r))
                return r;
            },
            dimension: ct(ht(null)),
            angle: ct(ht({
                deg: !0,
                grad: !0,
                rad: !0,
                turn: !0
            })),
            decibel: ct(ht({
                db: !0
            })),
            frequency: ct(ht({
                hz: !0,
                khz: !0
            })),
            flex: ct(ht({
                fr: !0
            })),
            length: ct(pt(ht({
                px: !0,
                mm: !0,
                cm: !0,
                in: !0,
                pt: !0,
                pc: !0,
                q: !0,
                em: !0,
                ex: !0,
                ch: !0,
                rem: !0,
                vh: !0,
                vw: !0,
                vmin: !0,
                vmax: !0,
                vm: !0
            }))),
            resolution: ct(ht({
                dpi: !0,
                dpcm: !0,
                dppx: !0,
                x: !0
            })),
            semitones: ct(ht({
                st: !0
            })),
            time: ct(ht({
                s: !0,
                ms: !0
            })),
            percentage: ct(function(e, t, n) {
                return null === e || e.type !== et.Percentage || st(n, e.value, e.value.length - 1) ? 0 : 1;
            }),
            zero: pt(),
            number: ct(function(e, t, n) {
                if (null === e) return 0;
                var r = Je(e.value, 0);
                return r === e.value.length || ot(e.value, r) ? st(n, e.value, r) ? 0 : 1 : 0;
            }),
            integer: ct(function(e, t, n) {
                if (null === e || e.type !== et.Number) return 0;
                for(var r = 43 === e.value.charCodeAt(0) || 45 === e.value.charCodeAt(0) ? 1 : 0; r < e.value.length; r++)if (!Ze(e.value.charCodeAt(r))) return 0;
                return st(n, e.value, r) ? 0 : 1;
            }),
            "-ms-legacy-expression": (dt = "expression", dt += "(", function(e, t) {
                return null !== e && it(e.value, dt) ? lt(e, t) : 0;
            })
        }, gt = function(e, t, n) {
            var r = o1("SyntaxError", e);
            return r.input = t, r.offset = n, r.rawMessage = e, r.message = r.rawMessage + "\n  " + r.input + "\n--" + new Array((r.offset || r.input.length) + 1).join("-") + "^", r;
        }, ft = function(e) {
            this.str = e, this.pos = 0;
        };
        ft.prototype = {
            charCodeAt: function(e) {
                return e < this.str.length ? this.str.charCodeAt(e) : 0;
            },
            charCode: function() {
                return this.charCodeAt(this.pos);
            },
            nextCharCode: function() {
                return this.charCodeAt(this.pos + 1);
            },
            nextNonWsCode: function(e) {
                return this.charCodeAt(this.findWsEnd(e));
            },
            findWsEnd: function(e) {
                for(; e < this.str.length; e++){
                    var t = this.str.charCodeAt(e);
                    if (13 !== t && 10 !== t && 12 !== t && 32 !== t && 9 !== t) break;
                }
                return e;
            },
            substringToPos: function(e) {
                return this.str.substring(this.pos, this.pos = e);
            },
            eat: function(e) {
                this.charCode() !== e && this.error("Expect `" + String.fromCharCode(e) + "`"), this.pos++;
            },
            peek: function() {
                return this.pos < this.str.length ? this.str.charAt(this.pos++) : "";
            },
            error: function(e) {
                throw new gt(e, this.str, this.pos);
            }
        };
        var bt = ft, yt = function(e) {
            for(var t = "function" == typeof Uint32Array ? new Uint32Array(128) : new Array(128), n = 0; n < 128; n++)t[n] = e(String.fromCharCode(n)) ? 1 : 0;
            return t;
        }(function(e) {
            return /[a-zA-Z0-9\-]/.test(e);
        }), kt = {
            " ": 1,
            "&&": 2,
            "||": 3,
            "|": 4
        };
        function vt(e) {
            return e.substringToPos(e.findWsEnd(e.pos));
        }
        function xt(e) {
            for(var t = e.pos; t < e.str.length; t++){
                var n = e.str.charCodeAt(t);
                if (n >= 128 || 0 === yt[n]) break;
            }
            return e.pos === t && e.error("Expect a keyword"), e.substringToPos(t);
        }
        function wt(e) {
            for(var t = e.pos; t < e.str.length; t++){
                var n = e.str.charCodeAt(t);
                if (n < 48 || n > 57) break;
            }
            return e.pos === t && e.error("Expect a number"), e.substringToPos(t);
        }
        function St(e) {
            var t = e.str.indexOf("'", e.pos + 1);
            return -1 === t && (e.pos = e.str.length, e.error("Expect an apostrophe")), e.substringToPos(t + 1);
        }
        function Ct(e) {
            var t, n = null;
            return e.eat(123), t = wt(e), 44 === e.charCode() ? (e.pos++, 125 !== e.charCode() && (n = wt(e))) : n = t, e.eat(125), {
                min: Number(t),
                max: n ? Number(n) : 0
            };
        }
        function zt(e8, t8) {
            var n5 = function(e) {
                var t = null, n = !1;
                switch(e.charCode()){
                    case 42:
                        e.pos++, t = {
                            min: 0,
                            max: 0
                        };
                        break;
                    case 43:
                        e.pos++, t = {
                            min: 1,
                            max: 0
                        };
                        break;
                    case 63:
                        e.pos++, t = {
                            min: 0,
                            max: 1
                        };
                        break;
                    case 35:
                        e.pos++, n = !0, t = 123 === e.charCode() ? Ct(e) : {
                            min: 1,
                            max: 0
                        };
                        break;
                    case 123:
                        t = Ct(e);
                        break;
                    default:
                        return null;
                }
                return {
                    type: "Multiplier",
                    comma: n,
                    min: t.min,
                    max: t.max,
                    term: null
                };
            }(e8);
            return null !== n5 ? (n5.term = t8, n5) : t8;
        }
        function At(e) {
            var t = e.peek();
            return "" === t ? null : {
                type: "Token",
                value: t
            };
        }
        function Pt(e9) {
            var t9, n6 = null;
            return e9.eat(60), t9 = xt(e9), 40 === e9.charCode() && 41 === e9.nextCharCode() && (e9.pos += 2, t9 += "()"), 91 === e9.charCodeAt(e9.findWsEnd(e9.pos)) && (vt(e9), n6 = (function(e) {
                var t = null, n = null, r = 1;
                return e.eat(91), 45 === e.charCode() && (e.peek(), r = -1), -1 == r && 8734 === e.charCode() ? e.peek() : t = r * Number(wt(e)), vt(e), e.eat(44), vt(e), 8734 === e.charCode() ? e.peek() : (r = 1, 45 === e.charCode() && (e.peek(), r = -1), n = r * Number(wt(e))), e.eat(93), null === t && null === n ? null : {
                    type: "Range",
                    min: t,
                    max: n
                };
            })(e9)), e9.eat(62), zt(e9, {
                type: "Type",
                name: t9,
                opts: n6
            });
        }
        function Tt(e10, t10) {
            function n(e, t) {
                return {
                    type: "Group",
                    terms: e,
                    combinator: t,
                    disallowEmpty: !1,
                    explicit: !1
                };
            }
            for(t10 = Object.keys(t10).sort(function(e, t) {
                return kt[e] - kt[t];
            }); t10.length > 0;){
                for(var r = t10.shift(), i = 0, a = 0; i < e10.length; i++){
                    var o = e10[i];
                    "Combinator" === o.type && (o.value === r ? (-1 === a && (a = i - 1), e10.splice(i, 1), i--) : (-1 !== a && i - a > 1 && (e10.splice(a, i - a, n(e10.slice(a, i), r)), i = a + 1), a = -1));
                }
                -1 !== a && t10.length && e10.splice(a, i - a, n(e10.slice(a, i), r));
            }
            return r;
        }
        function Lt(e) {
            for(var t, n = [], r = {
            }, i = null, a = e.pos; t = Et(e);)"Spaces" !== t.type && ("Combinator" === t.type ? (null !== i && "Combinator" !== i.type || (e.pos = a, e.error("Unexpected combinator")), r[t.value] = !0) : null !== i && "Combinator" !== i.type && (r[" "] = !0, n.push({
                type: "Combinator",
                value: " "
            })), n.push(t), i = t, a = e.pos);
            return null !== i && "Combinator" === i.type && (e.pos -= a, e.error("Unexpected combinator")), {
                type: "Group",
                terms: n,
                combinator: Tt(n, r) || " ",
                disallowEmpty: !1,
                explicit: !1
            };
        }
        function Et(e11) {
            var t11 = e11.charCode();
            if (t11 < 128 && 1 === yt[t11]) return (function(e) {
                var t;
                return t = xt(e), 40 === e.charCode() ? (e.pos++, {
                    type: "Function",
                    name: t
                }) : zt(e, {
                    type: "Keyword",
                    name: t
                });
            })(e11);
            switch(t11){
                case 93:
                    break;
                case 91:
                    return zt(e11, function(e) {
                        var t;
                        return e.eat(91), t = Lt(e), e.eat(93), t.explicit = !0, 33 === e.charCode() && (e.pos++, t.disallowEmpty = !0), t;
                    }(e11));
                case 60:
                    return 39 === e11.nextCharCode() ? (function(e) {
                        var t;
                        return e.eat(60), e.eat(39), t = xt(e), e.eat(39), e.eat(62), zt(e, {
                            type: "Property",
                            name: t
                        });
                    })(e11) : Pt(e11);
                case 124:
                    return {
                        type: "Combinator",
                        value: e11.substringToPos(124 === e11.nextCharCode() ? e11.pos + 2 : e11.pos + 1)
                    };
                case 38:
                    return e11.pos++, e11.eat(38), {
                        type: "Combinator",
                        value: "&&"
                    };
                case 44:
                    return e11.pos++, {
                        type: "Comma"
                    };
                case 39:
                    return zt(e11, {
                        type: "String",
                        value: St(e11)
                    });
                case 32:
                case 9:
                case 10:
                case 13:
                case 12:
                    return {
                        type: "Spaces",
                        value: vt(e11)
                    };
                case 64:
                    return (t11 = e11.nextCharCode()) < 128 && 1 === yt[t11] ? (e11.pos++, {
                        type: "AtKeyword",
                        name: xt(e11)
                    }) : At(e11);
                case 42:
                case 43:
                case 63:
                case 35:
                case 33:
                    break;
                case 123:
                    if ((t11 = e11.nextCharCode()) < 48 || t11 > 57) return At(e11);
                    break;
                default:
                    return At(e11);
            }
        }
        function Dt(e) {
            var t = new bt(e), n = Lt(t);
            return t.pos !== e.length && t.error("Unexpected input"), 1 === n.terms.length && "Group" === n.terms[0].type && (n = n.terms[0]), n;
        }
        Dt("[a&&<b>#|<'c'>*||e() f{2} /,(% g#{1,2} h{2,})]!");
        var Ot = Dt, Bt = function() {
        };
        function It(e) {
            return "function" == typeof e ? e : Bt;
        }
        var Nt = function(e12, t12, n) {
            var r = Bt, i = Bt;
            if ("function" == typeof t12 ? r = t12 : t12 && (r = It(t12.enter), i = It(t12.leave)), r === Bt && i === Bt) throw new Error("Neither `enter` nor `leave` walker handler is set or both aren't a function");
            !function e(t) {
                switch(r.call(n, t), t.type){
                    case "Group":
                        t.terms.forEach(e);
                        break;
                    case "Multiplier":
                        e(t.term);
                        break;
                    case "Type":
                    case "Property":
                    case "Keyword":
                    case "AtKeyword":
                    case "Function":
                    case "String":
                    case "Token":
                    case "Comma":
                        break;
                    default:
                        throw new Error("Unknown type: " + t.type);
                }
                i.call(n, t);
            }(e12);
        }, Rt = new H, Mt = {
            decorator: function(e13) {
                var t = null, n7 = {
                    len: 0,
                    node: null
                }, r6 = [
                    n7
                ], i = "";
                return {
                    children: e13.children,
                    node: function(n) {
                        var r = t;
                        t = n, e13.node.call(this, n), t = r;
                    },
                    chunk: function(e) {
                        i += e, n7.node !== t ? r6.push({
                            len: e.length,
                            node: t
                        }) : n7.len += e.length;
                    },
                    result: function() {
                        return jt(i, r6);
                    }
                };
            }
        };
        function jt(e, t) {
            var n = [], r = 0, i = 0, a = t ? t[i].node : null;
            for(Ce(e, Rt); !Rt.eof;){
                if (t) for(; i < t.length && r + t[i].len <= Rt.tokenStart;)r += t[i++].len, a = t[i].node;
                n.push({
                    type: Rt.tokenType,
                    value: Rt.getTokenValue(),
                    index: Rt.tokenIndex,
                    balance: Rt.balance[Rt.tokenIndex],
                    node: a
                }), Rt.next();
            }
            return n;
        }
        var _t = {
            type: "Match"
        }, Ft = {
            type: "Mismatch"
        }, Wt = {
            type: "DisallowEmpty"
        };
        function qt(e, t, n) {
            return t === _t && n === Ft || e === _t && t === _t && n === _t ? e : ("If" === e.type && e.else === Ft && t === _t && (t = e.then, e = e.match), {
                type: "If",
                match: e,
                then: t,
                else: n
            });
        }
        function Yt(e) {
            return e.length > 2 && 40 === e.charCodeAt(e.length - 2) && 41 === e.charCodeAt(e.length - 1);
        }
        function Ut(e) {
            return "Keyword" === e.type || "AtKeyword" === e.type || "Function" === e.type || "Type" === e.type && Yt(e.name);
        }
        function Ht(e14) {
            if ("function" == typeof e14) return {
                type: "Generic",
                fn: e14
            };
            switch(e14.type){
                case "Group":
                    var t13 = function e15(t, n, r) {
                        switch(t){
                            case " ":
                                for(var i = _t, a = n.length - 1; a >= 0; a--)i = qt(l = n[a], i, Ft);
                                return i;
                            case "|":
                                i = Ft;
                                var o = null;
                                for(a = n.length - 1; a >= 0; a--){
                                    if (Ut(l = n[a]) && (null === o && a > 0 && Ut(n[a - 1]) && (i = qt({
                                        type: "Enum",
                                        map: o = Object.create(null)
                                    }, _t, i)), null !== o)) {
                                        var s = (Yt(l.name) ? l.name.slice(0, -1) : l.name).toLowerCase();
                                        if (s in o == !1) {
                                            o[s] = l;
                                            continue;
                                        }
                                    }
                                    o = null, i = qt(l, _t, i);
                                }
                                return i;
                            case "&&":
                                if (n.length > 5) return {
                                    type: "MatchOnce",
                                    terms: n,
                                    all: !0
                                };
                                for(i = Ft, a = n.length - 1; a >= 0; a--){
                                    var l = n[a];
                                    c = n.length > 1 ? e15(t, n.filter(function(e) {
                                        return e !== l;
                                    }), !1) : _t, i = qt(l, c, i);
                                }
                                return i;
                            case "||":
                                if (n.length > 5) return {
                                    type: "MatchOnce",
                                    terms: n,
                                    all: !1
                                };
                                for(i = r ? _t : Ft, a = n.length - 1; a >= 0; a--){
                                    var c;
                                    l = n[a];
                                    c = n.length > 1 ? e15(t, n.filter(function(e) {
                                        return e !== l;
                                    }), !0) : _t, i = qt(l, c, i);
                                }
                                return i;
                        }
                    }(e14.combinator, e14.terms.map(Ht), !1);
                    return e14.disallowEmpty && (t13 = qt(t13, Wt, Ft)), t13;
                case "Multiplier":
                    return (function(e) {
                        var t = _t, n = Ht(e.term);
                        if (0 === e.max) n = qt(n, Wt, Ft), (t = qt(n, null, Ft)).then = qt(_t, _t, t), e.comma && (t.then.else = qt({
                            type: "Comma",
                            syntax: e
                        }, t, Ft));
                        else for(var r = e.min || 1; r <= e.max; r++)e.comma && t !== _t && (t = qt({
                            type: "Comma",
                            syntax: e
                        }, t, Ft)), t = qt(n, qt(_t, _t, t), Ft);
                        if (0 === e.min) t = qt(_t, _t, t);
                        else for(r = 0; r < e.min - 1; r++)e.comma && t !== _t && (t = qt({
                            type: "Comma",
                            syntax: e
                        }, t, Ft)), t = qt(n, t, Ft);
                        return t;
                    })(e14);
                case "Type":
                case "Property":
                    return {
                        type: e14.type,
                        name: e14.name,
                        syntax: e14
                    };
                case "Keyword":
                    return {
                        type: e14.type,
                        name: e14.name.toLowerCase(),
                        syntax: e14
                    };
                case "AtKeyword":
                    return {
                        type: e14.type,
                        name: "@" + e14.name.toLowerCase(),
                        syntax: e14
                    };
                case "Function":
                    return {
                        type: e14.type,
                        name: e14.name.toLowerCase() + "(",
                        syntax: e14
                    };
                case "String":
                    return 3 === e14.value.length ? {
                        type: "Token",
                        value: e14.value.charAt(1),
                        syntax: e14
                    } : {
                        type: e14.type,
                        value: e14.value.substr(1, e14.value.length - 2).replace(/\\'/g, "'"),
                        syntax: e14
                    };
                case "Token":
                    return {
                        type: e14.type,
                        value: e14.value,
                        syntax: e14
                    };
                case "Comma":
                    return {
                        type: e14.type,
                        syntax: e14
                    };
                default:
                    throw new Error("Unknown node type:", e14.type);
            }
        }
        var Vt = _t, Kt = Ft, Gt = Wt, Qt = function(e, t) {
            return "string" == typeof e && (e = Ot(e)), {
                type: "MatchGraph",
                match: Ht(e),
                syntax: t || null,
                source: e
            };
        }, Xt = Object.prototype.hasOwnProperty, Zt = Vt, $t = Kt, Jt = Gt, en = h1.TYPE;
        function tn(e) {
            for(var t = null, n = null, r = e; null !== r;)n = r.prev, r.prev = t, t = r, r = n;
            return t;
        }
        function nn(e, t) {
            if (e.length !== t.length) return !1;
            for(var n = 0; n < e.length; n++){
                var r = e.charCodeAt(n);
                if (r >= 65 && r <= 90 && (r |= 32), r !== t.charCodeAt(n)) return !1;
            }
            return !0;
        }
        function rn(e16) {
            return null === e16 || e16.type === en.Comma || e16.type === en.Function || e16.type === en.LeftParenthesis || e16.type === en.LeftSquareBracket || e16.type === en.LeftCurlyBracket || (function(e) {
                return e.type === en.Delim && "?" !== e.value;
            })(e16);
        }
        function an(e) {
            return null === e || e.type === en.RightParenthesis || e.type === en.RightSquareBracket || e.type === en.RightCurlyBracket || e.type === en.Delim;
        }
        function on(e17, t14, n8) {
            function r() {
                do b++, f = b < e17.length ? e17[b] : null;
                while (null !== f && (f.type === en.WhiteSpace || f.type === en.Comment))
            }
            function i(t) {
                var n = b + t;
                return n < e17.length ? e17[n] : null;
            }
            function a(e, t) {
                return {
                    nextState: e,
                    matchStack: k,
                    syntaxStack: u,
                    thenStack: h,
                    tokenIndex: b,
                    prev: t
                };
            }
            function o(e) {
                h = {
                    nextState: e,
                    matchStack: k,
                    syntaxStack: u,
                    prev: h
                };
            }
            function s(e) {
                p = a(e, p);
            }
            function l() {
                k = {
                    type: 1,
                    syntax: t14.syntax,
                    token: f,
                    prev: k
                }, r(), d = null, b > y && (y = b);
            }
            function c() {
                k = 2 === k.type ? k.prev : {
                    type: 3,
                    syntax: u.syntax,
                    token: k.token,
                    prev: k
                }, u = u.prev;
            }
            var u = null, h = null, p = null, d = null, m = 0, g = null, f = null, b = -1, y = 0, k = {
                type: 0,
                syntax: null,
                token: null,
                prev: null
            };
            for(r(); null === g && ++m < 15000;)switch(t14.type){
                case "Match":
                    if (null === h) {
                        if (null !== f && (b !== e17.length - 1 || "\\0" !== f.value && "\\9" !== f.value)) {
                            t14 = $t;
                            break;
                        }
                        g = "Match";
                        break;
                    }
                    if ((t14 = h.nextState) === Jt) {
                        if (h.matchStack === k) {
                            t14 = $t;
                            break;
                        }
                        t14 = Zt;
                    }
                    for(; h.syntaxStack !== u;)c();
                    h = h.prev;
                    break;
                case "Mismatch":
                    if (null !== d && !1 !== d) (null === p || b > p.tokenIndex) && (p = d, d = !1);
                    else if (null === p) {
                        g = "Mismatch";
                        break;
                    }
                    t14 = p.nextState, h = p.thenStack, u = p.syntaxStack, k = p.matchStack, b = p.tokenIndex, f = b < e17.length ? e17[b] : null, p = p.prev;
                    break;
                case "MatchGraph":
                    t14 = t14.match;
                    break;
                case "If":
                    t14.else !== $t && s(t14.else), t14.then !== Zt && o(t14.then), t14 = t14.match;
                    break;
                case "MatchOnce":
                    t14 = {
                        type: "MatchOnceBuffer",
                        syntax: t14,
                        index: 0,
                        mask: 0
                    };
                    break;
                case "MatchOnceBuffer":
                    var v = t14.syntax.terms;
                    if (t14.index === v.length) {
                        if (0 === t14.mask || t14.syntax.all) {
                            t14 = $t;
                            break;
                        }
                        t14 = Zt;
                        break;
                    }
                    if (t14.mask === (1 << v.length) - 1) {
                        t14 = Zt;
                        break;
                    }
                    for(; t14.index < v.length; t14.index++){
                        var x = 1 << t14.index;
                        if (0 == (t14.mask & x)) {
                            s(t14), o({
                                type: "AddMatchOnce",
                                syntax: t14.syntax,
                                mask: t14.mask | x
                            }), t14 = v[t14.index++];
                            break;
                        }
                    }
                    break;
                case "AddMatchOnce":
                    t14 = {
                        type: "MatchOnceBuffer",
                        syntax: t14.syntax,
                        index: 0,
                        mask: t14.mask
                    };
                    break;
                case "Enum":
                    if (null !== f) {
                        if (-1 !== (A = f.value.toLowerCase()).indexOf("\\") && (A = A.replace(/\\[09].*$/, "")), Xt.call(t14.map, A)) {
                            t14 = t14.map[A];
                            break;
                        }
                    }
                    t14 = $t;
                    break;
                case "Generic":
                    var w = null !== u ? u.opts : null, S = b + Math.floor(t14.fn(f, i, w));
                    if (!isNaN(S) && S > b) {
                        for(; b < S;)l();
                        t14 = Zt;
                    } else t14 = $t;
                    break;
                case "Type":
                case "Property":
                    var C = "Type" === t14.type ? "types" : "properties", z = Xt.call(n8, C) ? n8[C][t14.name] : null;
                    if (!z || !z.match) throw new Error("Bad syntax reference: " + ("Type" === t14.type ? "<" + t14.name + ">" : "<'" + t14.name + "'>"));
                    if (!1 !== d && null !== f && "Type" === t14.type) {
                        if ("custom-ident" === t14.name && f.type === en.Ident || "length" === t14.name && "0" === f.value) {
                            null === d && (d = a(t14, p)), t14 = $t;
                            break;
                        }
                    }
                    u = {
                        syntax: t14.syntax,
                        opts: t14.syntax.opts || null !== u && u.opts || null,
                        prev: u
                    }, k = {
                        type: 2,
                        syntax: t14.syntax,
                        token: k.token,
                        prev: k
                    }, t14 = z.match;
                    break;
                case "Keyword":
                    var A = t14.name;
                    if (null !== f) {
                        var P = f.value;
                        if (-1 !== P.indexOf("\\") && (P = P.replace(/\\[09].*$/, "")), nn(P, A)) {
                            l(), t14 = Zt;
                            break;
                        }
                    }
                    t14 = $t;
                    break;
                case "AtKeyword":
                case "Function":
                    if (null !== f && nn(f.value, t14.name)) {
                        l(), t14 = Zt;
                        break;
                    }
                    t14 = $t;
                    break;
                case "Token":
                    if (null !== f && f.value === t14.value) {
                        l(), t14 = Zt;
                        break;
                    }
                    t14 = $t;
                    break;
                case "Comma":
                    null !== f && f.type === en.Comma ? rn(k.token) ? t14 = $t : (l(), t14 = an(f) ? $t : Zt) : t14 = rn(k.token) || an(f) ? Zt : $t;
                    break;
                case "String":
                    var T = "";
                    for(S = b; S < e17.length && T.length < t14.value.length; S++)T += e17[S].value;
                    if (nn(T, t14.value)) {
                        for(; b < S;)l();
                        t14 = Zt;
                    } else t14 = $t;
                    break;
                default:
                    throw new Error("Unknown node type: " + t14.type);
            }
            switch(g){
                case null:
                    console.warn("[csstree-match] BREAK after 15000 iterations"), g = "Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)", k = null;
                    break;
                case "Match":
                    for(; null !== u;)c();
                    break;
                default:
                    k = null;
            }
            return {
                tokens: e17,
                reason: g,
                iterations: m,
                match: k,
                longestMatch: y
            };
        }
        var sn = function(e, t, n) {
            var r = on(e, t, n || {
            });
            if (null === r.match) return r;
            var i = r.match, a = r.match = {
                syntax: t.syntax || null,
                match: []
            }, o = [
                a
            ];
            for(i = tn(i).prev; null !== i;){
                switch(i.type){
                    case 2:
                        a.match.push(a = {
                            syntax: i.syntax,
                            match: []
                        }), o.push(a);
                        break;
                    case 3:
                        o.pop(), a = o[o.length - 1];
                        break;
                    default:
                        a.match.push({
                            syntax: i.syntax || null,
                            token: i.token.value,
                            node: i.token.node
                        });
                }
                i = i.prev;
            }
            return r;
        };
        function ln(e18) {
            function t(e) {
                return null !== e && ("Type" === e.type || "Property" === e.type || "Keyword" === e.type);
            }
            var n = null;
            return null !== this.matched && (function r(i) {
                if (Array.isArray(i.match)) {
                    for(var a = 0; a < i.match.length; a++)if (r(i.match[a])) return t(i.syntax) && n.unshift(i.syntax), !0;
                } else if (i.node === e18) return n = t(i.syntax) ? [
                    i.syntax
                ] : [], !0;
                return !1;
            })(this.matched), n;
        }
        function cn(e, t, n) {
            var r = ln.call(e, t);
            return null !== r && r.some(n);
        }
        var un = {
            getTrace: ln,
            isType: function(e19, t) {
                return cn(this, e19, function(e) {
                    return "Type" === e.type && e.name === t;
                });
            },
            isProperty: function(e20, t) {
                return cn(this, e20, function(e) {
                    return "Property" === e.type && e.name === t;
                });
            },
            isKeyword: function(e21) {
                return cn(this, e21, function(e) {
                    return "Keyword" === e.type;
                });
            }
        };
        var hn = {
            matchFragments: function(e22, t15, n9, r7, i) {
                var o = [];
                return null !== n9.matched && (function n10(s) {
                    if (null !== s.syntax && s.syntax.type === r7 && s.syntax.name === i) {
                        var l = function e(t) {
                            return "node" in t ? t.node : e(t.match[0]);
                        }(s), c = function e(t) {
                            return "node" in t ? t.node : e(t.match[t.match.length - 1]);
                        }(s);
                        e22.syntax.walk(t15, function(e, t, n) {
                            if (e === l) {
                                var r = new a1;
                                do {
                                    if (r.appendData(t.data), t.data === c) break;
                                    t = t.next;
                                }while (null !== t)
                                o.push({
                                    parent: n,
                                    nodes: r
                                });
                            }
                        });
                    }
                    Array.isArray(s.match) && s.match.forEach(n10);
                })(n9.matched), o;
            }
        }, pn = Object.prototype.hasOwnProperty;
        function dn(e) {
            return "number" == typeof e && isFinite(e) && Math.floor(e) === e && e >= 0;
        }
        function mn(e) {
            return Boolean(e) && dn(e.offset) && dn(e.line) && dn(e.column);
        }
        function gn(e, t) {
            return function(n, r) {
                if (!n || n.constructor !== Object) return r(n, "Type of node should be an Object");
                for(var i in n){
                    var o = !0;
                    if (!1 !== pn.call(n, i)) {
                        if ("type" === i) n.type !== e && r(n, "Wrong node type `" + n.type + "`, expected `" + e + "`");
                        else if ("loc" === i) {
                            if (null === n.loc) continue;
                            if (n.loc && n.loc.constructor === Object) {
                                if ("string" != typeof n.loc.source) i += ".source";
                                else if (mn(n.loc.start)) {
                                    if (mn(n.loc.end)) continue;
                                    i += ".end";
                                } else i += ".start";
                            }
                            o = !1;
                        } else if (t.hasOwnProperty(i)) {
                            var s = 0;
                            for(o = !1; !o && s < t[i].length; s++){
                                var l = t[i][s];
                                switch(l){
                                    case String:
                                        o = "string" == typeof n[i];
                                        break;
                                    case Boolean:
                                        o = "boolean" == typeof n[i];
                                        break;
                                    case null:
                                        o = null === n[i];
                                        break;
                                    default:
                                        "string" == typeof l ? o = n[i] && n[i].type === l : Array.isArray(l) && (o = n[i] instanceof a1);
                                }
                            }
                        } else r(n, "Unknown field `" + i + "` for " + e + " node type");
                        o || r(n, "Bad value for `" + e + "." + i + "`");
                    }
                }
                for(var i in t)pn.call(t, i) && !1 === pn.call(n, i) && r(n, "Field `" + e + "." + i + "` is missed");
            };
        }
        function fn(e, t) {
            var n = t.structure, r = {
                type: String,
                loc: !0
            }, i = {
                type: '"' + e + '"'
            };
            for(var a in n)if (!1 !== pn.call(n, a)) {
                for(var o = [], s = r[a] = Array.isArray(n[a]) ? n[a].slice() : [
                    n[a]
                ], l = 0; l < s.length; l++){
                    var c = s[l];
                    if (c === String || c === Boolean) o.push(c.name);
                    else if (null === c) o.push("null");
                    else if ("string" == typeof c) o.push("<" + c + ">");
                    else {
                        if (!Array.isArray(c)) throw new Error("Wrong value `" + c + "` in `" + e + "." + a + "` structure definition");
                        o.push("List");
                    }
                }
                i[a] = o.join(" | ");
            }
            return {
                docs: i,
                check: gn(e, r)
            };
        }
        var bn = $, yn = J, kn = Qt, vn = sn, xn = function(e) {
            var t = {
            };
            if (e.node) {
                for(var n in e.node)if (pn.call(e.node, n)) {
                    var r = e.node[n];
                    if (!r.structure) throw new Error("Missed `structure` field in `" + n + "` node type definition");
                    t[n] = fn(n, r);
                }
            }
            return t;
        }, wn = kn("inherit | initial | unset"), Sn = kn("inherit | initial | unset | <-ms-legacy-expression>");
        function Cn(e, t, n) {
            var r = {
            };
            for(var i in e)e[i].syntax && (r[i] = n ? e[i].syntax : G(e[i].syntax, {
                compact: t
            }));
            return r;
        }
        function zn(e, t, n) {
            const r = {
            };
            for (const [i, a] of Object.entries(e))r[i] = {
                prelude: a.prelude && (n ? a.prelude.syntax : G(a.prelude.syntax, {
                    compact: t
                })),
                descriptors: a.descriptors && Cn(a.descriptors, t, n)
            };
            return r;
        }
        function An(e, t, n) {
            return {
                matched: e,
                iterations: n,
                error: t,
                getTrace: un.getTrace,
                isType: un.isType,
                isProperty: un.isProperty,
                isKeyword: un.isKeyword
            };
        }
        function Pn(e23, t16, n, r) {
            var i, a = function(e, t) {
                return "string" == typeof e ? jt(e, null) : t.generate(e, Mt);
            }(n, e23.syntax);
            return (function(e) {
                for(var t = 0; t < e.length; t++)if ("var(" === e[t].value.toLowerCase()) return !0;
                return !1;
            })(a) ? An(null, new Error("Matching for a tree with var() is not supported")) : (r && (i = vn(a, e23.valueCommonSyntax, e23)), r && i.match || (i = vn(a, t16.match, e23)).match ? An(i.match, null, i.iterations) : An(null, new yn(i.reason, t16.syntax, n, i), i.iterations));
        }
        var Tn = function(e, t, n) {
            if (this.valueCommonSyntax = wn, this.syntax = t, this.generic = !1, this.atrules = {
            }, this.properties = {
            }, this.types = {
            }, this.structure = n || xn(e), e) {
                if (e.types) for(var r in e.types)this.addType_(r, e.types[r]);
                if (e.generic) for(var r in this.generic = !0, mt)this.addType_(r, mt[r]);
                if (e.atrules) for(var r in e.atrules)this.addAtrule_(r, e.atrules[r]);
                if (e.properties) for(var r in e.properties)this.addProperty_(r, e.properties[r]);
            }
        };
        Tn.prototype = {
            structure: {
            },
            checkStructure: function(e24) {
                function t17(e, t) {
                    r.push({
                        node: e,
                        message: t
                    });
                }
                var n = this.structure, r = [];
                return this.syntax.walk(e24, function(e) {
                    n.hasOwnProperty(e.type) ? n[e.type].check(e, t17) : t17(e, "Unknown node type `" + e.type + "`");
                }), !!r.length && r;
            },
            createDescriptor: function(e, t, n, r = null) {
                var i = {
                    type: t,
                    name: n
                }, a = {
                    type: t,
                    name: n,
                    parent: r,
                    syntax: null,
                    match: null
                };
                return "function" == typeof e ? a.match = kn(e, i) : ("string" == typeof e ? Object.defineProperty(a, "syntax", {
                    get: function() {
                        return Object.defineProperty(a, "syntax", {
                            value: Ot(e)
                        }), a.syntax;
                    }
                }) : a.syntax = e, Object.defineProperty(a, "match", {
                    get: function() {
                        return Object.defineProperty(a, "match", {
                            value: kn(a.syntax, i)
                        }), a.match;
                    }
                })), a;
            },
            addAtrule_: function(e, t) {
                t && (this.atrules[e] = {
                    type: "Atrule",
                    name: e,
                    prelude: t.prelude ? this.createDescriptor(t.prelude, "AtrulePrelude", e) : null,
                    descriptors: t.descriptors ? Object.keys(t.descriptors).reduce((n, r)=>(n[r] = this.createDescriptor(t.descriptors[r], "AtruleDescriptor", r, e), n)
                    , {
                    }) : null
                });
            },
            addProperty_: function(e, t) {
                t && (this.properties[e] = this.createDescriptor(t, "Property", e));
            },
            addType_: function(e, t) {
                t && (this.types[e] = this.createDescriptor(t, "Type", e), t === mt["-ms-legacy-expression"] && (this.valueCommonSyntax = Sn));
            },
            checkAtruleName: function(e) {
                if (!this.getAtrule(e)) return new bn("Unknown at-rule", "@" + e);
            },
            checkAtrulePrelude: function(e, t) {
                let n = this.checkAtruleName(e);
                if (n) return n;
                var r = this.getAtrule(e);
                return !r.prelude && t ? new SyntaxError("At-rule `@" + e + "` should not contain a prelude") : r.prelude && !t ? new SyntaxError("At-rule `@" + e + "` should contain a prelude") : void 0;
            },
            checkAtruleDescriptorName: function(e, t) {
                let n = this.checkAtruleName(e);
                if (n) return n;
                var r = this.getAtrule(e), i = ae.keyword(t);
                return r.descriptors ? r.descriptors[i.name] || r.descriptors[i.basename] ? void 0 : new bn("Unknown at-rule descriptor", t) : new SyntaxError("At-rule `@" + e + "` has no known descriptors");
            },
            checkPropertyName: function(e) {
                return ae.property(e).custom ? new Error("Lexer matching doesn't applicable for custom properties") : this.getProperty(e) ? void 0 : new bn("Unknown property", e);
            },
            matchAtrulePrelude: function(e, t) {
                var n = this.checkAtrulePrelude(e, t);
                return n ? An(null, n) : t ? Pn(this, this.getAtrule(e).prelude, t, !1) : An(null, null);
            },
            matchAtruleDescriptor: function(e, t, n) {
                var r = this.checkAtruleDescriptorName(e, t);
                if (r) return An(null, r);
                var i = this.getAtrule(e), a = ae.keyword(t);
                return Pn(this, i.descriptors[a.name] || i.descriptors[a.basename], n, !1);
            },
            matchDeclaration: function(e) {
                return "Declaration" !== e.type ? An(null, new Error("Not a Declaration node")) : this.matchProperty(e.property, e.value);
            },
            matchProperty: function(e, t) {
                var n = this.checkPropertyName(e);
                return n ? An(null, n) : Pn(this, this.getProperty(e), t, !0);
            },
            matchType: function(e, t) {
                var n = this.getType(e);
                return n ? Pn(this, n, t, !1) : An(null, new bn("Unknown type", e));
            },
            match: function(e, t) {
                return "string" == typeof e || e && e.type ? ("string" != typeof e && e.match || (e = this.createDescriptor(e, "Type", "anonymous")), Pn(this, e, t, !1)) : An(null, new bn("Bad syntax"));
            },
            findValueFragments: function(e, t, n, r) {
                return hn.matchFragments(this, t, this.matchProperty(e, t), n, r);
            },
            findDeclarationValueFragments: function(e, t, n) {
                return hn.matchFragments(this, e.value, this.matchDeclaration(e), t, n);
            },
            findAllFragments: function(e25, t, n) {
                var r = [];
                return this.syntax.walk(e25, {
                    visit: "Declaration",
                    enter: (function(e) {
                        r.push.apply(r, this.findDeclarationValueFragments(e, t, n));
                    }).bind(this)
                }), r;
            },
            getAtrule: function(e, t = !0) {
                var n = ae.keyword(e);
                return (n.vendor && t ? this.atrules[n.name] || this.atrules[n.basename] : this.atrules[n.name]) || null;
            },
            getAtrulePrelude: function(e, t = !0) {
                const n = this.getAtrule(e, t);
                return n && n.prelude || null;
            },
            getAtruleDescriptor: function(e, t) {
                return this.atrules.hasOwnProperty(e) && this.atrules.declarators && this.atrules[e].declarators[t] || null;
            },
            getProperty: function(e, t = !0) {
                var n = ae.property(e);
                return (n.vendor && t ? this.properties[n.name] || this.properties[n.basename] : this.properties[n.name]) || null;
            },
            getType: function(e) {
                return this.types.hasOwnProperty(e) ? this.types[e] : null;
            },
            validate: function() {
                function e(r, i, a, o2) {
                    if (a.hasOwnProperty(i)) return a[i];
                    a[i] = !1, null !== o2.syntax && Nt(o2.syntax, function(o) {
                        if ("Type" === o.type || "Property" === o.type) {
                            var s = "Type" === o.type ? r.types : r.properties, l = "Type" === o.type ? t : n;
                            s.hasOwnProperty(o.name) && !e(r, o.name, l, s[o.name]) || (a[i] = !0);
                        }
                    }, this);
                }
                var t = {
                }, n = {
                };
                for(var r8 in this.types)e(this, r8, t, this.types[r8]);
                for(var r8 in this.properties)e(this, r8, n, this.properties[r8]);
                return t = Object.keys(t).filter(function(e) {
                    return t[e];
                }), n = Object.keys(n).filter(function(e) {
                    return n[e];
                }), t.length || n.length ? {
                    types: t,
                    properties: n
                } : null;
            },
            dump: function(e, t) {
                return {
                    generic: this.generic,
                    types: Cn(this.types, !t, e),
                    properties: Cn(this.properties, !t, e),
                    atrules: zn(this.atrules, !t, e)
                };
            },
            toString: function() {
                return JSON.stringify(this.dump());
            }
        };
        var Ln = Tn, En = {
            SyntaxError: gt,
            parse: Ot,
            generate: G,
            walk: Nt
        }, Dn = Ce.isBOM;
        var On = function() {
            this.lines = null, this.columns = null, this.linesAndColumnsComputed = !1;
        };
        On.prototype = {
            setSource: function(e, t, n, r) {
                this.source = e, this.startOffset = void 0 === t ? 0 : t, this.startLine = void 0 === n ? 1 : n, this.startColumn = void 0 === r ? 1 : r, this.linesAndColumnsComputed = !1;
            },
            ensureLinesAndColumnsComputed: function() {
                this.linesAndColumnsComputed || (!function(e, t) {
                    for(var n = t.length, r = se(e.lines, n), i = e.startLine, a = se(e.columns, n), o = e.startColumn, s = t.length > 0 ? Dn(t.charCodeAt(0)) : 0; s < n; s++){
                        var l = t.charCodeAt(s);
                        r[s] = i, a[s] = o++, 10 !== l && 13 !== l && 12 !== l || (13 === l && s + 1 < n && 10 === t.charCodeAt(s + 1) && (r[++s] = i, a[s] = o), i++, o = 1);
                    }
                    r[s] = i, a[s] = o, e.lines = r, e.columns = a;
                }(this, this.source), this.linesAndColumnsComputed = !0);
            },
            getLocation: function(e, t) {
                return this.ensureLinesAndColumnsComputed(), {
                    source: t,
                    offset: this.startOffset + e,
                    line: this.lines[e],
                    column: this.columns[e]
                };
            },
            getLocationRange: function(e, t, n) {
                return this.ensureLinesAndColumnsComputed(), {
                    source: n,
                    start: {
                        offset: this.startOffset + e,
                        line: this.lines[e],
                        column: this.columns[e]
                    },
                    end: {
                        offset: this.startOffset + t,
                        line: this.lines[t],
                        column: this.columns[t]
                    }
                };
            }
        };
        var Bn = On, In = Ce.TYPE, Nn = In.WhiteSpace, Rn = In.Comment, Mn = function(e) {
            var t = this.createList(), n = null, r = {
                recognizer: e,
                space: null,
                ignoreWS: !1,
                ignoreWSAfter: !1
            };
            for(this.scanner.skipSC(); !this.scanner.eof;){
                switch(this.scanner.tokenType){
                    case Rn:
                        this.scanner.next();
                        continue;
                    case Nn:
                        r.ignoreWS ? this.scanner.next() : r.space = this.WhiteSpace();
                        continue;
                }
                if (void 0 === (n = e.getNode.call(this, r))) break;
                null !== r.space && (t.push(r.space), r.space = null), t.push(n), r.ignoreWSAfter ? (r.ignoreWSAfter = !1, r.ignoreWS = !0) : r.ignoreWS = !1;
            }
            return t;
        }, { findWhiteSpaceStart: jn , cmpStr: _n  } = M, Fn = function() {
        }, Wn = h1.TYPE, qn = h1.NAME, Yn = Wn.WhiteSpace, Un = Wn.Comment, Hn = Wn.Ident, Vn = Wn.Function, Kn = Wn.Url, Gn = Wn.Hash, Qn = Wn.Percentage, Xn = Wn.Number;
        function Zn(e) {
            return function() {
                return this[e]();
            };
        }
        var $n = function(e26) {
            var t18 = {
                scanner: new H,
                locationMap: new Bn,
                filename: "<unknown>",
                needPositions: !1,
                onParseError: Fn,
                onParseErrorThrow: !1,
                parseAtrulePrelude: !0,
                parseRulePrelude: !0,
                parseValue: !0,
                parseCustomProperty: !1,
                readSequence: Mn,
                createList: function() {
                    return new a1;
                },
                createSingleNodeList: function(e) {
                    return (new a1).appendData(e);
                },
                getFirstListNode: function(e) {
                    return e && e.first();
                },
                getLastListNode: function(e) {
                    return e.last();
                },
                parseWithFallback: function(e, t) {
                    var n = this.scanner.tokenIndex;
                    try {
                        return e.call(this);
                    } catch (e27) {
                        if (this.onParseErrorThrow) throw e27;
                        var r = t.call(this, n);
                        return this.onParseErrorThrow = !0, this.onParseError(e27, r), this.onParseErrorThrow = !1, r;
                    }
                },
                lookupNonWSType: function(e) {
                    do {
                        var t = this.scanner.lookupType(e++);
                        if (t !== Yn) return t;
                    }while (0 !== t)
                    return 0;
                },
                eat: function(e) {
                    if (this.scanner.tokenType !== e) {
                        var t = this.scanner.tokenStart, n = qn[e] + " is expected";
                        switch(e){
                            case Hn:
                                this.scanner.tokenType === Vn || this.scanner.tokenType === Kn ? (t = this.scanner.tokenEnd - 1, n = "Identifier is expected but function found") : n = "Identifier is expected";
                                break;
                            case Gn:
                                this.scanner.isDelim(35) && (this.scanner.next(), t++, n = "Name is expected");
                                break;
                            case Qn:
                                this.scanner.tokenType === Xn && (t = this.scanner.tokenEnd, n = "Percent sign is expected");
                                break;
                            default:
                                this.scanner.source.charCodeAt(this.scanner.tokenStart) === e && (t += 1);
                        }
                        this.error(n, t);
                    }
                    this.scanner.next();
                },
                consume: function(e) {
                    var t = this.scanner.getTokenValue();
                    return this.eat(e), t;
                },
                consumeFunctionName: function() {
                    var e = this.scanner.source.substring(this.scanner.tokenStart, this.scanner.tokenEnd - 1);
                    return this.eat(Vn), e;
                },
                getLocation: function(e, t) {
                    return this.needPositions ? this.locationMap.getLocationRange(e, t, this.filename) : null;
                },
                getLocationFromList: function(e) {
                    if (this.needPositions) {
                        var t = this.getFirstListNode(e), n = this.getLastListNode(e);
                        return this.locationMap.getLocationRange(null !== t ? t.loc.start.offset - this.locationMap.startOffset : this.scanner.tokenStart, null !== n ? n.loc.end.offset - this.locationMap.startOffset : this.scanner.tokenStart, this.filename);
                    }
                    return null;
                },
                error: function(e, t) {
                    var n = void 0 !== t && t < this.scanner.source.length ? this.locationMap.getLocation(t) : this.scanner.eof ? this.locationMap.getLocation(jn(this.scanner.source, this.scanner.source.length - 1)) : this.locationMap.getLocation(this.scanner.tokenStart);
                    throw new l1(e || "Unexpected input", this.scanner.source, n.offset, n.line, n.column);
                }
            };
            for(var n11 in e26 = (function(e) {
                var t = {
                    context: {
                    },
                    scope: {
                    },
                    atrule: {
                    },
                    pseudo: {
                    }
                };
                if (e.parseContext) for(var n in e.parseContext)switch(typeof e.parseContext[n]){
                    case "function":
                        t.context[n] = e.parseContext[n];
                        break;
                    case "string":
                        t.context[n] = Zn(e.parseContext[n]);
                }
                if (e.scope) for(var n in e.scope)t.scope[n] = e.scope[n];
                if (e.atrule) for(var n in e.atrule){
                    var r = e.atrule[n];
                    r.parse && (t.atrule[n] = r.parse);
                }
                if (e.pseudo) for(var n in e.pseudo){
                    var i = e.pseudo[n];
                    i.parse && (t.pseudo[n] = i.parse);
                }
                if (e.node) for(var n in e.node)t[n] = e.node[n].parse;
                return t;
            })(e26 || {
            }))t18[n11] = e26[n11];
            return function(e, n12) {
                var r9, i5 = (n12 = n12 || {
                }).context || "default", a = n12.onComment;
                if (Ce(e, t18.scanner), t18.locationMap.setSource(e, n12.offset, n12.line, n12.column), t18.filename = n12.filename || "<unknown>", t18.needPositions = Boolean(n12.positions), t18.onParseError = "function" == typeof n12.onParseError ? n12.onParseError : Fn, t18.onParseErrorThrow = !1, t18.parseAtrulePrelude = !("parseAtrulePrelude" in n12) || Boolean(n12.parseAtrulePrelude), t18.parseRulePrelude = !("parseRulePrelude" in n12) || Boolean(n12.parseRulePrelude), t18.parseValue = !("parseValue" in n12) || Boolean(n12.parseValue), t18.parseCustomProperty = "parseCustomProperty" in n12 && Boolean(n12.parseCustomProperty), !t18.context.hasOwnProperty(i5)) throw new Error("Unknown context `" + i5 + "`");
                return "function" == typeof a && t18.scanner.forEachToken((n, r, i)=>{
                    if (n === Un) {
                        const n = t18.getLocation(r, i), o = _n(e, i - 2, i, "*/") ? e.slice(r + 2, i - 2) : e.slice(r + 2, i);
                        a(o, n);
                    }
                }), r9 = t18.context[i5].call(t18, n12), t18.scanner.eof || t18.error(), r9;
            };
        }, Jn = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""), er = function(e) {
            if (0 <= e && e < Jn.length) return Jn[e];
            throw new TypeError("Must be between 0 and 63: " + e);
        };
        var tr = function(e28) {
            var t, n = "", r = function(e) {
                return e < 0 ? 1 + (-e << 1) : 0 + (e << 1);
            }(e28);
            do t = 31 & r, (r >>>= 5) > 0 && (t |= 32), n += er(t);
            while (r > 0)
            return n;
        };
        var nr = function(e, t) {
            return e(t = {
                exports: {
                }
            }, t.exports), t.exports;
        }(function(e29, t19) {
            t19.getArg = function(e, t, n) {
                if (t in e) return e[t];
                if (3 === arguments.length) return n;
                throw new Error('"' + t + '" is a required argument.');
            };
            var n13 = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/, r10 = /^data:.+\,.+$/;
            function i(e) {
                var t = e.match(n13);
                return t ? {
                    scheme: t[1],
                    auth: t[2],
                    host: t[3],
                    port: t[4],
                    path: t[5]
                } : null;
            }
            function a(e) {
                var t = "";
                return e.scheme && (t += e.scheme + ":"), t += "//", e.auth && (t += e.auth + "@"), e.host && (t += e.host), e.port && (t += ":" + e.port), e.path && (t += e.path), t;
            }
            function o3(e) {
                var n = e, r = i(e);
                if (r) {
                    if (!r.path) return e;
                    n = r.path;
                }
                for(var o, s = t19.isAbsolute(n), l = n.split(/\/+/), c = 0, u = l.length - 1; u >= 0; u--)"." === (o = l[u]) ? l.splice(u, 1) : ".." === o ? c++ : c > 0 && ("" === o ? (l.splice(u + 1, c), c = 0) : (l.splice(u, 2), c--));
                return "" === (n = l.join("/")) && (n = s ? "/" : "."), r ? (r.path = n, a(r)) : n;
            }
            function s3(e, t) {
                "" === e && (e = "."), "" === t && (t = ".");
                var n = i(t), s = i(e);
                if (s && (e = s.path || "/"), n && !n.scheme) return s && (n.scheme = s.scheme), a(n);
                if (n || t.match(r10)) return t;
                if (s && !s.host && !s.path) return s.host = t, a(s);
                var l = "/" === t.charAt(0) ? t : o3(e.replace(/\/+$/, "") + "/" + t);
                return s ? (s.path = l, a(s)) : l;
            }
            t19.urlParse = i, t19.urlGenerate = a, t19.normalize = o3, t19.join = s3, t19.isAbsolute = function(e) {
                return "/" === e.charAt(0) || n13.test(e);
            }, t19.relative = function(e, t) {
                "" === e && (e = "."), e = e.replace(/\/$/, "");
                for(var n = 0; 0 !== t.indexOf(e + "/");){
                    var r = e.lastIndexOf("/");
                    if (r < 0) return t;
                    if ((e = e.slice(0, r)).match(/^([^\/]+:\/)?\/*$/)) return t;
                    ++n;
                }
                return Array(n + 1).join("../") + t.substr(e.length + 1);
            };
            var l3 = !("__proto__" in Object.create(null));
            function c3(e) {
                return e;
            }
            function u3(e) {
                if (!e) return !1;
                var t = e.length;
                if (t < 9) return !1;
                if (95 !== e.charCodeAt(t - 1) || 95 !== e.charCodeAt(t - 2) || 111 !== e.charCodeAt(t - 3) || 116 !== e.charCodeAt(t - 4) || 111 !== e.charCodeAt(t - 5) || 114 !== e.charCodeAt(t - 6) || 112 !== e.charCodeAt(t - 7) || 95 !== e.charCodeAt(t - 8) || 95 !== e.charCodeAt(t - 9)) return !1;
                for(var n = t - 10; n >= 0; n--)if (36 !== e.charCodeAt(n)) return !1;
                return !0;
            }
            function h(e, t) {
                return e === t ? 0 : null === e ? 1 : null === t ? -1 : e > t ? 1 : -1;
            }
            t19.toSetString = l3 ? c3 : function(e) {
                return u3(e) ? "$" + e : e;
            }, t19.fromSetString = l3 ? c3 : function(e) {
                return u3(e) ? e.slice(1) : e;
            }, t19.compareByOriginalPositions = function(e, t, n) {
                var r = h(e.source, t.source);
                return 0 !== r || 0 !== (r = e.originalLine - t.originalLine) || 0 !== (r = e.originalColumn - t.originalColumn) || n || 0 !== (r = e.generatedColumn - t.generatedColumn) || 0 !== (r = e.generatedLine - t.generatedLine) ? r : h(e.name, t.name);
            }, t19.compareByGeneratedPositionsDeflated = function(e, t, n) {
                var r = e.generatedLine - t.generatedLine;
                return 0 !== r || 0 !== (r = e.generatedColumn - t.generatedColumn) || n || 0 !== (r = h(e.source, t.source)) || 0 !== (r = e.originalLine - t.originalLine) || 0 !== (r = e.originalColumn - t.originalColumn) ? r : h(e.name, t.name);
            }, t19.compareByGeneratedPositionsInflated = function(e, t) {
                var n = e.generatedLine - t.generatedLine;
                return 0 !== n || 0 !== (n = e.generatedColumn - t.generatedColumn) || 0 !== (n = h(e.source, t.source)) || 0 !== (n = e.originalLine - t.originalLine) || 0 !== (n = e.originalColumn - t.originalColumn) ? n : h(e.name, t.name);
            }, t19.parseSourceMapInput = function(e) {
                return JSON.parse(e.replace(/^\)]}'[^\n]*\n/, ""));
            }, t19.computeSourceURL = function(e, t, n) {
                if (t = t || "", e && ("/" !== e[e.length - 1] && "/" !== t[0] && (e += "/"), t = e + t), n) {
                    var r = i(n);
                    if (!r) throw new Error("sourceMapURL could not be parsed");
                    if (r.path) {
                        var l = r.path.lastIndexOf("/");
                        l >= 0 && (r.path = r.path.substring(0, l + 1));
                    }
                    t = s3(a(r), t);
                }
                return o3(t);
            };
        }), rr = (nr.getArg, nr.urlParse, nr.urlGenerate, nr.normalize, nr.join, nr.isAbsolute, nr.relative, nr.toSetString, nr.fromSetString, nr.compareByOriginalPositions, nr.compareByGeneratedPositionsDeflated, nr.compareByGeneratedPositionsInflated, nr.parseSourceMapInput, nr.computeSourceURL, Object.prototype.hasOwnProperty), ir = "undefined" != typeof Map;
        function ar() {
            this._array = [], this._set = ir ? new Map : Object.create(null);
        }
        ar.fromArray = function(e, t) {
            for(var n = new ar, r = 0, i = e.length; r < i; r++)n.add(e[r], t);
            return n;
        }, ar.prototype.size = function() {
            return ir ? this._set.size : Object.getOwnPropertyNames(this._set).length;
        }, ar.prototype.add = function(e, t) {
            var n = ir ? e : nr.toSetString(e), r = ir ? this.has(e) : rr.call(this._set, n), i = this._array.length;
            r && !t || this._array.push(e), r || (ir ? this._set.set(e, i) : this._set[n] = i);
        }, ar.prototype.has = function(e) {
            if (ir) return this._set.has(e);
            var t = nr.toSetString(e);
            return rr.call(this._set, t);
        }, ar.prototype.indexOf = function(e) {
            if (ir) {
                var t = this._set.get(e);
                if (t >= 0) return t;
            } else {
                var n = nr.toSetString(e);
                if (rr.call(this._set, n)) return this._set[n];
            }
            throw new Error('"' + e + '" is not in the set.');
        }, ar.prototype.at = function(e) {
            if (e >= 0 && e < this._array.length) return this._array[e];
            throw new Error("No element indexed by " + e);
        }, ar.prototype.toArray = function() {
            return this._array.slice();
        };
        var or = {
            ArraySet: ar
        };
        function sr() {
            this._array = [], this._sorted = !0, this._last = {
                generatedLine: -1,
                generatedColumn: 0
            };
        }
        sr.prototype.unsortedForEach = function(e, t) {
            this._array.forEach(e, t);
        }, sr.prototype.add = function(e) {
            var t, n, r, i, a, o;
            t = this._last, n = e, r = t.generatedLine, i = n.generatedLine, a = t.generatedColumn, o = n.generatedColumn, i > r || i == r && o >= a || nr.compareByGeneratedPositionsInflated(t, n) <= 0 ? (this._last = e, this._array.push(e)) : (this._sorted = !1, this._array.push(e));
        }, sr.prototype.toArray = function() {
            return this._sorted || (this._array.sort(nr.compareByGeneratedPositionsInflated), this._sorted = !0), this._array;
        };
        var lr = or.ArraySet, cr = {
            MappingList: sr
        }.MappingList;
        function ur(e) {
            e || (e = {
            }), this._file = nr.getArg(e, "file", null), this._sourceRoot = nr.getArg(e, "sourceRoot", null), this._skipValidation = nr.getArg(e, "skipValidation", !1), this._sources = new lr, this._names = new lr, this._mappings = new cr, this._sourcesContents = null;
        }
        ur.prototype._version = 3, ur.fromSourceMap = function(e30) {
            var t = e30.sourceRoot, n = new ur({
                file: e30.file,
                sourceRoot: t
            });
            return e30.eachMapping(function(e) {
                var r = {
                    generated: {
                        line: e.generatedLine,
                        column: e.generatedColumn
                    }
                };
                null != e.source && (r.source = e.source, null != t && (r.source = nr.relative(t, r.source)), r.original = {
                    line: e.originalLine,
                    column: e.originalColumn
                }, null != e.name && (r.name = e.name)), n.addMapping(r);
            }), e30.sources.forEach(function(r) {
                var i = r;
                null !== t && (i = nr.relative(t, r)), n._sources.has(i) || n._sources.add(i);
                var a = e30.sourceContentFor(r);
                null != a && n.setSourceContent(r, a);
            }), n;
        }, ur.prototype.addMapping = function(e) {
            var t = nr.getArg(e, "generated"), n = nr.getArg(e, "original", null), r = nr.getArg(e, "source", null), i = nr.getArg(e, "name", null);
            this._skipValidation || this._validateMapping(t, n, r, i), null != r && (r = String(r), this._sources.has(r) || this._sources.add(r)), null != i && (i = String(i), this._names.has(i) || this._names.add(i)), this._mappings.add({
                generatedLine: t.line,
                generatedColumn: t.column,
                originalLine: null != n && n.line,
                originalColumn: null != n && n.column,
                source: r,
                name: i
            });
        }, ur.prototype.setSourceContent = function(e, t) {
            var n = e;
            null != this._sourceRoot && (n = nr.relative(this._sourceRoot, n)), null != t ? (this._sourcesContents || (this._sourcesContents = Object.create(null)), this._sourcesContents[nr.toSetString(n)] = t) : this._sourcesContents && (delete this._sourcesContents[nr.toSetString(n)], 0 === Object.keys(this._sourcesContents).length && (this._sourcesContents = null));
        }, ur.prototype.applySourceMap = function(e, t20, n) {
            var r11 = t20;
            if (null == t20) {
                if (null == e.file) throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');
                r11 = e.file;
            }
            var i = this._sourceRoot;
            null != i && (r11 = nr.relative(i, r11));
            var a = new lr, o = new lr;
            this._mappings.unsortedForEach(function(t) {
                if (t.source === r11 && null != t.originalLine) {
                    var s = e.originalPositionFor({
                        line: t.originalLine,
                        column: t.originalColumn
                    });
                    null != s.source && (t.source = s.source, null != n && (t.source = nr.join(n, t.source)), null != i && (t.source = nr.relative(i, t.source)), t.originalLine = s.line, t.originalColumn = s.column, null != s.name && (t.name = s.name));
                }
                var l = t.source;
                null == l || a.has(l) || a.add(l);
                var c = t.name;
                null == c || o.has(c) || o.add(c);
            }, this), this._sources = a, this._names = o, e.sources.forEach(function(t) {
                var r = e.sourceContentFor(t);
                null != r && (null != n && (t = nr.join(n, t)), null != i && (t = nr.relative(i, t)), this.setSourceContent(t, r));
            }, this);
        }, ur.prototype._validateMapping = function(e, t, n, r) {
            if (t && "number" != typeof t.line && "number" != typeof t.column) throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
            if ((!(e && "line" in e && "column" in e && e.line > 0 && e.column >= 0) || t || n || r) && !(e && "line" in e && "column" in e && t && "line" in t && "column" in t && e.line > 0 && e.column >= 0 && t.line > 0 && t.column >= 0 && n)) throw new Error("Invalid mapping: " + JSON.stringify({
                generated: e,
                source: n,
                original: t,
                name: r
            }));
        }, ur.prototype._serializeMappings = function() {
            for(var e, t, n, r, i = 0, a = 1, o = 0, s = 0, l = 0, c = 0, u = "", h = this._mappings.toArray(), p = 0, d = h.length; p < d; p++){
                if (e = "", (t = h[p]).generatedLine !== a) for(i = 0; t.generatedLine !== a;)e += ";", a++;
                else if (p > 0) {
                    if (!nr.compareByGeneratedPositionsInflated(t, h[p - 1])) continue;
                    e += ",";
                }
                e += tr(t.generatedColumn - i), i = t.generatedColumn, null != t.source && (r = this._sources.indexOf(t.source), e += tr(r - c), c = r, e += tr(t.originalLine - 1 - s), s = t.originalLine - 1, e += tr(t.originalColumn - o), o = t.originalColumn, null != t.name && (n = this._names.indexOf(t.name), e += tr(n - l), l = n)), u += e;
            }
            return u;
        }, ur.prototype._generateSourcesContent = function(e31, t) {
            return e31.map(function(e) {
                if (!this._sourcesContents) return null;
                null != t && (e = nr.relative(t, e));
                var n = nr.toSetString(e);
                return Object.prototype.hasOwnProperty.call(this._sourcesContents, n) ? this._sourcesContents[n] : null;
            }, this);
        }, ur.prototype.toJSON = function() {
            var e = {
                version: this._version,
                sources: this._sources.toArray(),
                names: this._names.toArray(),
                mappings: this._serializeMappings()
            };
            return null != this._file && (e.file = this._file), null != this._sourceRoot && (e.sourceRoot = this._sourceRoot), this._sourcesContents && (e.sourcesContent = this._generateSourcesContent(e.sources, e.sourceRoot)), e;
        }, ur.prototype.toString = function() {
            return JSON.stringify(this.toJSON());
        };
        var hr = {
            SourceMapGenerator: ur
        }.SourceMapGenerator, pr = {
            Atrule: !0,
            Selector: !0,
            Declaration: !0
        }, dr = Object.prototype.hasOwnProperty;
        function mr(e32, t) {
            var n = e32.children, r = null;
            "function" != typeof t ? n.forEach(this.node, this) : n.forEach(function(e) {
                null !== r && t.call(this, r), this.node(e), r = e;
            }, this);
        }
        var gr = function(e33) {
            function t21(e) {
                if (!dr.call(n14, e.type)) throw new Error("Unknown node type: " + e.type);
                n14[e.type].call(this, e);
            }
            var n14 = {
            };
            if (e33.node) for(var r12 in e33.node)n14[r12] = e33.node[r12].generate;
            return function(e34, n15) {
                var r13 = "", i6 = {
                    children: mr,
                    node: t21,
                    chunk: function(e) {
                        r13 += e;
                    },
                    result: function() {
                        return r13;
                    }
                };
                return n15 && ("function" == typeof n15.decorator && (i6 = n15.decorator(i6)), n15.sourceMap && (i6 = (function(e35) {
                    var t22 = new hr, n = 1, r = 0, i = {
                        line: 1,
                        column: 0
                    }, a = {
                        line: 0,
                        column: 0
                    }, o = !1, s = {
                        line: 1,
                        column: 0
                    }, l = {
                        generated: s
                    }, c = e35.node;
                    e35.node = function(e) {
                        if (e.loc && e.loc.start && pr.hasOwnProperty(e.type)) {
                            var u = e.loc.start.line, h = e.loc.start.column - 1;
                            a.line === u && a.column === h || (a.line = u, a.column = h, i.line = n, i.column = r, o && (o = !1, i.line === s.line && i.column === s.column || t22.addMapping(l)), o = !0, t22.addMapping({
                                source: e.loc.source,
                                original: a,
                                generated: i
                            }));
                        }
                        c.call(this, e), o && pr.hasOwnProperty(e.type) && (s.line = n, s.column = r);
                    };
                    var u4 = e35.chunk;
                    e35.chunk = function(e) {
                        for(var t = 0; t < e.length; t++)10 === e.charCodeAt(t) ? (n++, r = 0) : r++;
                        u4(e);
                    };
                    var h2 = e35.result;
                    return e35.result = function() {
                        return o && t22.addMapping(l), {
                            css: h2(),
                            map: t22
                        };
                    }, e35;
                })(i6))), i6.node(e34), i6.result();
            };
        }, fr = Object.prototype.hasOwnProperty, br = function() {
        };
        function yr(e) {
            return "function" == typeof e ? e : br;
        }
        function kr(e, t) {
            return function(n, r, i) {
                n.type === t && e.call(this, n, r, i);
            };
        }
        function vr(e, t) {
            var n = t.structure, r = [];
            for(var i in n)if (!1 !== fr.call(n, i)) {
                var a = n[i], o = {
                    name: i,
                    type: !1,
                    nullable: !1
                };
                Array.isArray(n[i]) || (a = [
                    n[i]
                ]);
                for(var s = 0; s < a.length; s++){
                    var l = a[s];
                    null === l ? o.nullable = !0 : "string" == typeof l ? o.type = "node" : Array.isArray(l) && (o.type = "list");
                }
                o.type && r.push(o);
            }
            return r.length ? {
                context: t.walkContext,
                fields: r
            } : null;
        }
        function xr(e36, t) {
            var n = e36.fields.slice(), r = e36.context, i = "string" == typeof r;
            return t && n.reverse(), function(e, a, o, s) {
                var l;
                i && (l = a[r], a[r] = e);
                for(var c = 0; c < n.length; c++){
                    var u = n[c], h = e[u.name];
                    if (!u.nullable || h) {
                        if ("list" === u.type) {
                            if (t ? h.reduceRight(s, !1) : h.reduce(s, !1)) return !0;
                        } else if (o(h)) return !0;
                    }
                }
                i && (a[r] = l);
            };
        }
        function wr(e) {
            return {
                Atrule: {
                    StyleSheet: e.StyleSheet,
                    Atrule: e.Atrule,
                    Rule: e.Rule,
                    Block: e.Block
                },
                Rule: {
                    StyleSheet: e.StyleSheet,
                    Atrule: e.Atrule,
                    Rule: e.Rule,
                    Block: e.Block
                },
                Declaration: {
                    StyleSheet: e.StyleSheet,
                    Atrule: e.Atrule,
                    Rule: e.Rule,
                    Block: e.Block,
                    DeclarationList: e.DeclarationList
                }
            };
        }
        var Sr = function(e37) {
            var t23 = function(e) {
                var t = {
                };
                for(var n in e.node)if (fr.call(e.node, n)) {
                    var r = e.node[n];
                    if (!r.structure) throw new Error("Missed `structure` field in `" + n + "` node type definition");
                    t[n] = vr(0, r);
                }
                return t;
            }(e37), n16 = {
            }, r14 = {
            }, i7 = Symbol("break-walk"), a4 = Symbol("skip-node");
            for(var o4 in t23)fr.call(t23, o4) && null !== t23[o4] && (n16[o4] = xr(t23[o4], !1), r14[o4] = xr(t23[o4], !0));
            var s = wr(n16), l = wr(r14), c4 = function(e38, o) {
                function c(e, t, n) {
                    var r = h.call(m, e, t, n);
                    return r === i7 || r !== a4 && (!(!d.hasOwnProperty(e.type) || !d[e.type](e, m, c, u)) || p.call(m, e, t, n) === i7);
                }
                var u = (e, t, n, r)=>e || c(t, n, r)
                , h = br, p = br, d = n16, m = {
                    break: i7,
                    skip: a4,
                    root: e38,
                    stylesheet: null,
                    atrule: null,
                    atrulePrelude: null,
                    rule: null,
                    selector: null,
                    block: null,
                    declaration: null,
                    function: null
                };
                if ("function" == typeof o) h = o;
                else if (o && (h = yr(o.enter), p = yr(o.leave), o.reverse && (d = r14), o.visit)) {
                    if (s.hasOwnProperty(o.visit)) d = o.reverse ? l[o.visit] : s[o.visit];
                    else if (!t23.hasOwnProperty(o.visit)) throw new Error("Bad value `" + o.visit + "` for `visit` option (should be: " + Object.keys(t23).join(", ") + ")");
                    h = kr(h, o.visit), p = kr(p, o.visit);
                }
                if (h === br && p === br) throw new Error("Neither `enter` nor `leave` walker handler is set or both aren't a function");
                c(e38);
            };
            return c4.break = i7, c4.skip = a4, c4.find = function(e39, t) {
                var n = null;
                return c4(e39, function(e, r, a) {
                    if (t.call(this, e, r, a)) return n = e, i7;
                }), n;
            }, c4.findLast = function(e40, t) {
                var n = null;
                return c4(e40, {
                    reverse: !0,
                    enter: function(e, r, a) {
                        if (t.call(this, e, r, a)) return n = e, i7;
                    }
                }), n;
            }, c4.findAll = function(e41, t) {
                var n = [];
                return c4(e41, function(e, r, i) {
                    t.call(this, e, r, i) && n.push(e);
                }), n;
            }, c4;
        }, Cr = function e(t) {
            var n = {
            };
            for(var r in t){
                var i = t[r];
                i && (Array.isArray(i) || i instanceof a1 ? i = i.map(e) : i.constructor === Object && (i = e(i))), n[r] = i;
            }
            return n;
        };
        const zr = Object.prototype.hasOwnProperty, Ar = {
            generic: !0,
            types: Er,
            atrules: {
                prelude: Dr,
                descriptors: Dr
            },
            properties: Er,
            parseContext: function(e, t) {
                return Object.assign(e, t);
            },
            scope: function e(t, n) {
                for(const r in n)zr.call(n, r) && (Pr(t[r]) ? e(t[r], Tr(n[r])) : t[r] = Tr(n[r]));
                return t;
            },
            atrule: [
                "parse"
            ],
            pseudo: [
                "parse"
            ],
            node: [
                "name",
                "structure",
                "parse",
                "generate",
                "walkContext"
            ]
        };
        function Pr(e) {
            return e && e.constructor === Object;
        }
        function Tr(e) {
            return Pr(e) ? Object.assign({
            }, e) : e;
        }
        function Lr(e, t) {
            return "string" == typeof t && /^\s*\|/.test(t) ? "string" == typeof e ? e + t : t.replace(/^\s*\|\s*/, "") : t || null;
        }
        function Er(e, t) {
            if ("string" == typeof t) return Lr(e, t);
            const n = Object.assign({
            }, e);
            for(let r in t)zr.call(t, r) && (n[r] = Lr(zr.call(e, r) ? e[r] : void 0, t[r]));
            return n;
        }
        function Dr(e, t) {
            const n = Er(e, t);
            return !Pr(n) || Object.keys(n).length ? n : null;
        }
        var Or = (e42, t24)=>(function e43(t, n, r) {
                for(const i in r)if (!1 !== zr.call(r, i)) {
                    if (!0 === r[i]) i in n && zr.call(n, i) && (t[i] = Tr(n[i]));
                    else if (r[i]) {
                        if ("function" == typeof r[i]) {
                            const e = r[i];
                            t[i] = e({
                            }, t[i]), t[i] = e(t[i] || {
                            }, n[i]);
                        } else if (Pr(r[i])) {
                            const a = {
                            };
                            for(let n17 in t[i])a[n17] = e43({
                            }, t[i][n17], r[i]);
                            for(let t25 in n[i])a[t25] = e43(a[t25] || {
                            }, n[i][t25], r[i]);
                            t[i] = a;
                        } else if (Array.isArray(r[i])) {
                            const a = {
                            }, o = r[i].reduce(function(e, t) {
                                return e[t] = !0, e;
                            }, {
                            });
                            for (const [n20, r15] of Object.entries(t[i] || {
                            }))a[n20] = {
                            }, r15 && e43(a[n20], r15, o);
                            for(const t28 in n[i])zr.call(n[i], t28) && (a[t28] || (a[t28] = {
                            }), n[i] && n[i][t28] && e43(a[t28], n[i][t28], o));
                            t[i] = a;
                        }
                    }
                }
                return t;
            })(e42, t24, Ar)
        ;
        function Br(e44) {
            var t31 = $n(e44), n23 = Sr(e44), r = gr(e44), i = function(e45) {
                return {
                    fromPlainObject: function(t) {
                        return e45(t, {
                            enter: function(e) {
                                e.children && e.children instanceof a1 == !1 && (e.children = (new a1).fromArray(e.children));
                            }
                        }), t;
                    },
                    toPlainObject: function(t) {
                        return e45(t, {
                            leave: function(e) {
                                e.children && e.children instanceof a1 && (e.children = e.children.toArray());
                            }
                        }), t;
                    }
                };
            }(n23), o = {
                List: a1,
                SyntaxError: l1,
                TokenStream: H,
                Lexer: Ln,
                vendorPrefix: ae.vendorPrefix,
                keyword: ae.keyword,
                property: ae.property,
                isCustomProperty: ae.isCustomProperty,
                definitionSyntax: En,
                lexer: null,
                createLexer: function(e) {
                    return new Ln(e, o, o.lexer.structure);
                },
                tokenize: Ce,
                parse: t31,
                walk: n23,
                generate: r,
                find: n23.find,
                findLast: n23.findLast,
                findAll: n23.findAll,
                clone: Cr,
                fromPlainObject: i.fromPlainObject,
                toPlainObject: i.toPlainObject,
                createSyntax: function(e) {
                    return Br(Or({
                    }, e));
                },
                fork: function(t) {
                    var n = Or({
                    }, e44);
                    return Br("function" == typeof t ? t(n, Object.assign) : Or(n, t));
                }
            };
            return o.lexer = new Ln({
                generic: !0,
                types: e44.types,
                atrules: e44.atrules,
                properties: e44.properties,
                node: e44.node
            }, o), o;
        }
        var Ir = function(e) {
            return Br(Or({
            }, e));
        }, Nr = {
            generic: !0,
            types: {
                "absolute-size": "xx-small|x-small|small|medium|large|x-large|xx-large|xxx-large",
                "alpha-value": "<number>|<percentage>",
                "angle-percentage": "<angle>|<percentage>",
                "angular-color-hint": "<angle-percentage>",
                "angular-color-stop": "<color>&&<color-stop-angle>?",
                "angular-color-stop-list": "[<angular-color-stop> [, <angular-color-hint>]?]# , <angular-color-stop>",
                "animateable-feature": "scroll-position|contents|<custom-ident>",
                attachment: "scroll|fixed|local",
                "attr()": "attr( <attr-name> <type-or-unit>? [, <attr-fallback>]? )",
                "attr-matcher": "['~'|'|'|'^'|'$'|'*']? '='",
                "attr-modifier": "i|s",
                "attribute-selector": "'[' <wq-name> ']'|'[' <wq-name> <attr-matcher> [<string-token>|<ident-token>] <attr-modifier>? ']'",
                "auto-repeat": "repeat( [auto-fill|auto-fit] , [<line-names>? <fixed-size>]+ <line-names>? )",
                "auto-track-list": "[<line-names>? [<fixed-size>|<fixed-repeat>]]* <line-names>? <auto-repeat> [<line-names>? [<fixed-size>|<fixed-repeat>]]* <line-names>?",
                "baseline-position": "[first|last]? baseline",
                "basic-shape": "<inset()>|<circle()>|<ellipse()>|<polygon()>|<path()>",
                "bg-image": "none|<image>",
                "bg-layer": "<bg-image>||<bg-position> [/ <bg-size>]?||<repeat-style>||<attachment>||<box>||<box>",
                "bg-position": "[[left|center|right|top|bottom|<length-percentage>]|[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]|[center|[left|right] <length-percentage>?]&&[center|[top|bottom] <length-percentage>?]]",
                "bg-size": "[<length-percentage>|auto]{1,2}|cover|contain",
                "blur()": "blur( <length> )",
                "blend-mode": "normal|multiply|screen|overlay|darken|lighten|color-dodge|color-burn|hard-light|soft-light|difference|exclusion|hue|saturation|color|luminosity",
                box: "border-box|padding-box|content-box",
                "brightness()": "brightness( <number-percentage> )",
                "calc()": "calc( <calc-sum> )",
                "calc-sum": "<calc-product> [['+'|'-'] <calc-product>]*",
                "calc-product": "<calc-value> ['*' <calc-value>|'/' <number>]*",
                "calc-value": "<number>|<dimension>|<percentage>|( <calc-sum> )",
                "cf-final-image": "<image>|<color>",
                "cf-mixing-image": "<percentage>?&&<image>",
                "circle()": "circle( [<shape-radius>]? [at <position>]? )",
                "clamp()": "clamp( <calc-sum>#{3} )",
                "class-selector": "'.' <ident-token>",
                "clip-source": "<url>",
                color: "<rgb()>|<rgba()>|<hsl()>|<hsla()>|<hex-color>|<named-color>|currentcolor|<deprecated-system-color>",
                "color-stop": "<color-stop-length>|<color-stop-angle>",
                "color-stop-angle": "<angle-percentage>{1,2}",
                "color-stop-length": "<length-percentage>{1,2}",
                "color-stop-list": "[<linear-color-stop> [, <linear-color-hint>]?]# , <linear-color-stop>",
                combinator: "'>'|'+'|'~'|['||']",
                "common-lig-values": "[common-ligatures|no-common-ligatures]",
                "compat-auto": "searchfield|textarea|push-button|slider-horizontal|checkbox|radio|square-button|menulist|listbox|meter|progress-bar|button",
                "composite-style": "clear|copy|source-over|source-in|source-out|source-atop|destination-over|destination-in|destination-out|destination-atop|xor",
                "compositing-operator": "add|subtract|intersect|exclude",
                "compound-selector": "[<type-selector>? <subclass-selector>* [<pseudo-element-selector> <pseudo-class-selector>*]*]!",
                "compound-selector-list": "<compound-selector>#",
                "complex-selector": "<compound-selector> [<combinator>? <compound-selector>]*",
                "complex-selector-list": "<complex-selector>#",
                "conic-gradient()": "conic-gradient( [from <angle>]? [at <position>]? , <angular-color-stop-list> )",
                "contextual-alt-values": "[contextual|no-contextual]",
                "content-distribution": "space-between|space-around|space-evenly|stretch",
                "content-list": "[<string>|contents|<image>|<quote>|<target>|<leader()>|<attr()>|counter( <ident> , <'list-style-type'>? )]+",
                "content-position": "center|start|end|flex-start|flex-end",
                "content-replacement": "<image>",
                "contrast()": "contrast( [<number-percentage>] )",
                "counter()": "counter( <custom-ident> , <counter-style>? )",
                "counter-style": "<counter-style-name>|symbols( )",
                "counter-style-name": "<custom-ident>",
                "counters()": "counters( <custom-ident> , <string> , <counter-style>? )",
                "cross-fade()": "cross-fade( <cf-mixing-image> , <cf-final-image>? )",
                "cubic-bezier-timing-function": "ease|ease-in|ease-out|ease-in-out|cubic-bezier( <number [0,1]> , <number> , <number [0,1]> , <number> )",
                "deprecated-system-color": "ActiveBorder|ActiveCaption|AppWorkspace|Background|ButtonFace|ButtonHighlight|ButtonShadow|ButtonText|CaptionText|GrayText|Highlight|HighlightText|InactiveBorder|InactiveCaption|InactiveCaptionText|InfoBackground|InfoText|Menu|MenuText|Scrollbar|ThreeDDarkShadow|ThreeDFace|ThreeDHighlight|ThreeDLightShadow|ThreeDShadow|Window|WindowFrame|WindowText",
                "discretionary-lig-values": "[discretionary-ligatures|no-discretionary-ligatures]",
                "display-box": "contents|none",
                "display-inside": "flow|flow-root|table|flex|grid|ruby",
                "display-internal": "table-row-group|table-header-group|table-footer-group|table-row|table-cell|table-column-group|table-column|table-caption|ruby-base|ruby-text|ruby-base-container|ruby-text-container",
                "display-legacy": "inline-block|inline-list-item|inline-table|inline-flex|inline-grid",
                "display-listitem": "<display-outside>?&&[flow|flow-root]?&&list-item",
                "display-outside": "block|inline|run-in",
                "drop-shadow()": "drop-shadow( <length>{2,3} <color>? )",
                "east-asian-variant-values": "[jis78|jis83|jis90|jis04|simplified|traditional]",
                "east-asian-width-values": "[full-width|proportional-width]",
                "element()": "element( <custom-ident> , [first|start|last|first-except]? )|element( <id-selector> )",
                "ellipse()": "ellipse( [<shape-radius>{2}]? [at <position>]? )",
                "ending-shape": "circle|ellipse",
                "env()": "env( <custom-ident> , <declaration-value>? )",
                "explicit-track-list": "[<line-names>? <track-size>]+ <line-names>?",
                "family-name": "<string>|<custom-ident>+",
                "feature-tag-value": "<string> [<integer>|on|off]?",
                "feature-type": "@stylistic|@historical-forms|@styleset|@character-variant|@swash|@ornaments|@annotation",
                "feature-value-block": "<feature-type> '{' <feature-value-declaration-list> '}'",
                "feature-value-block-list": "<feature-value-block>+",
                "feature-value-declaration": "<custom-ident> : <integer>+ ;",
                "feature-value-declaration-list": "<feature-value-declaration>",
                "feature-value-name": "<custom-ident>",
                "fill-rule": "nonzero|evenodd",
                "filter-function": "<blur()>|<brightness()>|<contrast()>|<drop-shadow()>|<grayscale()>|<hue-rotate()>|<invert()>|<opacity()>|<saturate()>|<sepia()>",
                "filter-function-list": "[<filter-function>|<url>]+",
                "final-bg-layer": "<'background-color'>||<bg-image>||<bg-position> [/ <bg-size>]?||<repeat-style>||<attachment>||<box>||<box>",
                "fit-content()": "fit-content( [<length>|<percentage>] )",
                "fixed-breadth": "<length-percentage>",
                "fixed-repeat": "repeat( [<positive-integer>] , [<line-names>? <fixed-size>]+ <line-names>? )",
                "fixed-size": "<fixed-breadth>|minmax( <fixed-breadth> , <track-breadth> )|minmax( <inflexible-breadth> , <fixed-breadth> )",
                "font-stretch-absolute": "normal|ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded|<percentage>",
                "font-variant-css21": "[normal|small-caps]",
                "font-weight-absolute": "normal|bold|<number [1,1000]>",
                "frequency-percentage": "<frequency>|<percentage>",
                "general-enclosed": "[<function-token> <any-value> )]|( <ident> <any-value> )",
                "generic-family": "serif|sans-serif|cursive|fantasy|monospace|-apple-system",
                "generic-name": "serif|sans-serif|cursive|fantasy|monospace",
                "geometry-box": "<shape-box>|fill-box|stroke-box|view-box",
                gradient: "<linear-gradient()>|<repeating-linear-gradient()>|<radial-gradient()>|<repeating-radial-gradient()>|<conic-gradient()>|<-legacy-gradient>",
                "grayscale()": "grayscale( <number-percentage> )",
                "grid-line": "auto|<custom-ident>|[<integer>&&<custom-ident>?]|[span&&[<integer>||<custom-ident>]]",
                "historical-lig-values": "[historical-ligatures|no-historical-ligatures]",
                "hsl()": "hsl( <hue> <percentage> <percentage> [/ <alpha-value>]? )|hsl( <hue> , <percentage> , <percentage> , <alpha-value>? )",
                "hsla()": "hsla( <hue> <percentage> <percentage> [/ <alpha-value>]? )|hsla( <hue> , <percentage> , <percentage> , <alpha-value>? )",
                hue: "<number>|<angle>",
                "hue-rotate()": "hue-rotate( <angle> )",
                image: "<url>|<image()>|<image-set()>|<element()>|<paint()>|<cross-fade()>|<gradient>",
                "image()": "image( <image-tags>? [<image-src>? , <color>?]! )",
                "image-set()": "image-set( <image-set-option># )",
                "image-set-option": "[<image>|<string>] <resolution>",
                "image-src": "<url>|<string>",
                "image-tags": "ltr|rtl",
                "inflexible-breadth": "<length>|<percentage>|min-content|max-content|auto",
                "inset()": "inset( <length-percentage>{1,4} [round <'border-radius'>]? )",
                "invert()": "invert( <number-percentage> )",
                "keyframes-name": "<custom-ident>|<string>",
                "keyframe-block": "<keyframe-selector># { <declaration-list> }",
                "keyframe-block-list": "<keyframe-block>+",
                "keyframe-selector": "from|to|<percentage>",
                "leader()": "leader( <leader-type> )",
                "leader-type": "dotted|solid|space|<string>",
                "length-percentage": "<length>|<percentage>",
                "line-names": "'[' <custom-ident>* ']'",
                "line-name-list": "[<line-names>|<name-repeat>]+",
                "line-style": "none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset",
                "line-width": "<length>|thin|medium|thick",
                "linear-color-hint": "<length-percentage>",
                "linear-color-stop": "<color> <color-stop-length>?",
                "linear-gradient()": "linear-gradient( [<angle>|to <side-or-corner>]? , <color-stop-list> )",
                "mask-layer": "<mask-reference>||<position> [/ <bg-size>]?||<repeat-style>||<geometry-box>||[<geometry-box>|no-clip]||<compositing-operator>||<masking-mode>",
                "mask-position": "[<length-percentage>|left|center|right] [<length-percentage>|top|center|bottom]?",
                "mask-reference": "none|<image>|<mask-source>",
                "mask-source": "<url>",
                "masking-mode": "alpha|luminance|match-source",
                "matrix()": "matrix( <number>#{6} )",
                "matrix3d()": "matrix3d( <number>#{16} )",
                "max()": "max( <calc-sum># )",
                "media-and": "<media-in-parens> [and <media-in-parens>]+",
                "media-condition": "<media-not>|<media-and>|<media-or>|<media-in-parens>",
                "media-condition-without-or": "<media-not>|<media-and>|<media-in-parens>",
                "media-feature": "( [<mf-plain>|<mf-boolean>|<mf-range>] )",
                "media-in-parens": "( <media-condition> )|<media-feature>|<general-enclosed>",
                "media-not": "not <media-in-parens>",
                "media-or": "<media-in-parens> [or <media-in-parens>]+",
                "media-query": "<media-condition>|[not|only]? <media-type> [and <media-condition-without-or>]?",
                "media-query-list": "<media-query>#",
                "media-type": "<ident>",
                "mf-boolean": "<mf-name>",
                "mf-name": "<ident>",
                "mf-plain": "<mf-name> : <mf-value>",
                "mf-range": "<mf-name> ['<'|'>']? '='? <mf-value>|<mf-value> ['<'|'>']? '='? <mf-name>|<mf-value> '<' '='? <mf-name> '<' '='? <mf-value>|<mf-value> '>' '='? <mf-name> '>' '='? <mf-value>",
                "mf-value": "<number>|<dimension>|<ident>|<ratio>",
                "min()": "min( <calc-sum># )",
                "minmax()": "minmax( [<length>|<percentage>|min-content|max-content|auto] , [<length>|<percentage>|<flex>|min-content|max-content|auto] )",
                "named-color": "transparent|aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen|<-non-standard-color>",
                "namespace-prefix": "<ident>",
                "ns-prefix": "[<ident-token>|'*']? '|'",
                "number-percentage": "<number>|<percentage>",
                "numeric-figure-values": "[lining-nums|oldstyle-nums]",
                "numeric-fraction-values": "[diagonal-fractions|stacked-fractions]",
                "numeric-spacing-values": "[proportional-nums|tabular-nums]",
                nth: "<an-plus-b>|even|odd",
                "opacity()": "opacity( [<number-percentage>] )",
                "overflow-position": "unsafe|safe",
                "outline-radius": "<length>|<percentage>",
                "page-body": "<declaration>? [; <page-body>]?|<page-margin-box> <page-body>",
                "page-margin-box": "<page-margin-box-type> '{' <declaration-list> '}'",
                "page-margin-box-type": "@top-left-corner|@top-left|@top-center|@top-right|@top-right-corner|@bottom-left-corner|@bottom-left|@bottom-center|@bottom-right|@bottom-right-corner|@left-top|@left-middle|@left-bottom|@right-top|@right-middle|@right-bottom",
                "page-selector-list": "[<page-selector>#]?",
                "page-selector": "<pseudo-page>+|<ident> <pseudo-page>*",
                "path()": "path( [<fill-rule> ,]? <string> )",
                "paint()": "paint( <ident> , <declaration-value>? )",
                "perspective()": "perspective( <length> )",
                "polygon()": "polygon( <fill-rule>? , [<length-percentage> <length-percentage>]# )",
                position: "[[left|center|right]||[top|center|bottom]|[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]?|[[left|right] <length-percentage>]&&[[top|bottom] <length-percentage>]]",
                "pseudo-class-selector": "':' <ident-token>|':' <function-token> <any-value> ')'",
                "pseudo-element-selector": "':' <pseudo-class-selector>",
                "pseudo-page": ": [left|right|first|blank]",
                quote: "open-quote|close-quote|no-open-quote|no-close-quote",
                "radial-gradient()": "radial-gradient( [<ending-shape>||<size>]? [at <position>]? , <color-stop-list> )",
                "relative-selector": "<combinator>? <complex-selector>",
                "relative-selector-list": "<relative-selector>#",
                "relative-size": "larger|smaller",
                "repeat-style": "repeat-x|repeat-y|[repeat|space|round|no-repeat]{1,2}",
                "repeating-linear-gradient()": "repeating-linear-gradient( [<angle>|to <side-or-corner>]? , <color-stop-list> )",
                "repeating-radial-gradient()": "repeating-radial-gradient( [<ending-shape>||<size>]? [at <position>]? , <color-stop-list> )",
                "rgb()": "rgb( <percentage>{3} [/ <alpha-value>]? )|rgb( <number>{3} [/ <alpha-value>]? )|rgb( <percentage>#{3} , <alpha-value>? )|rgb( <number>#{3} , <alpha-value>? )",
                "rgba()": "rgba( <percentage>{3} [/ <alpha-value>]? )|rgba( <number>{3} [/ <alpha-value>]? )|rgba( <percentage>#{3} , <alpha-value>? )|rgba( <number>#{3} , <alpha-value>? )",
                "rotate()": "rotate( [<angle>|<zero>] )",
                "rotate3d()": "rotate3d( <number> , <number> , <number> , [<angle>|<zero>] )",
                "rotateX()": "rotateX( [<angle>|<zero>] )",
                "rotateY()": "rotateY( [<angle>|<zero>] )",
                "rotateZ()": "rotateZ( [<angle>|<zero>] )",
                "saturate()": "saturate( <number-percentage> )",
                "scale()": "scale( <number> , <number>? )",
                "scale3d()": "scale3d( <number> , <number> , <number> )",
                "scaleX()": "scaleX( <number> )",
                "scaleY()": "scaleY( <number> )",
                "scaleZ()": "scaleZ( <number> )",
                "self-position": "center|start|end|self-start|self-end|flex-start|flex-end",
                "shape-radius": "<length-percentage>|closest-side|farthest-side",
                "skew()": "skew( [<angle>|<zero>] , [<angle>|<zero>]? )",
                "skewX()": "skewX( [<angle>|<zero>] )",
                "skewY()": "skewY( [<angle>|<zero>] )",
                "sepia()": "sepia( <number-percentage> )",
                shadow: "inset?&&<length>{2,4}&&<color>?",
                "shadow-t": "[<length>{2,3}&&<color>?]",
                shape: "rect( <top> , <right> , <bottom> , <left> )|rect( <top> <right> <bottom> <left> )",
                "shape-box": "<box>|margin-box",
                "side-or-corner": "[left|right]||[top|bottom]",
                "single-animation": "<time>||<timing-function>||<time>||<single-animation-iteration-count>||<single-animation-direction>||<single-animation-fill-mode>||<single-animation-play-state>||[none|<keyframes-name>]",
                "single-animation-direction": "normal|reverse|alternate|alternate-reverse",
                "single-animation-fill-mode": "none|forwards|backwards|both",
                "single-animation-iteration-count": "infinite|<number>",
                "single-animation-play-state": "running|paused",
                "single-transition": "[none|<single-transition-property>]||<time>||<timing-function>||<time>",
                "single-transition-property": "all|<custom-ident>",
                size: "closest-side|farthest-side|closest-corner|farthest-corner|<length>|<length-percentage>{2}",
                "step-position": "jump-start|jump-end|jump-none|jump-both|start|end",
                "step-timing-function": "step-start|step-end|steps( <integer> [, <step-position>]? )",
                "subclass-selector": "<id-selector>|<class-selector>|<attribute-selector>|<pseudo-class-selector>",
                "supports-condition": "not <supports-in-parens>|<supports-in-parens> [and <supports-in-parens>]*|<supports-in-parens> [or <supports-in-parens>]*",
                "supports-in-parens": "( <supports-condition> )|<supports-feature>|<general-enclosed>",
                "supports-feature": "<supports-decl>|<supports-selector-fn>",
                "supports-decl": "( <declaration> )",
                "supports-selector-fn": "selector( <complex-selector> )",
                symbol: "<string>|<image>|<custom-ident>",
                target: "<target-counter()>|<target-counters()>|<target-text()>",
                "target-counter()": "target-counter( [<string>|<url>] , <custom-ident> , <counter-style>? )",
                "target-counters()": "target-counters( [<string>|<url>] , <custom-ident> , <string> , <counter-style>? )",
                "target-text()": "target-text( [<string>|<url>] , [content|before|after|first-letter]? )",
                "time-percentage": "<time>|<percentage>",
                "timing-function": "linear|<cubic-bezier-timing-function>|<step-timing-function>",
                "track-breadth": "<length-percentage>|<flex>|min-content|max-content|auto",
                "track-list": "[<line-names>? [<track-size>|<track-repeat>]]+ <line-names>?",
                "track-repeat": "repeat( [<positive-integer>] , [<line-names>? <track-size>]+ <line-names>? )",
                "track-size": "<track-breadth>|minmax( <inflexible-breadth> , <track-breadth> )|fit-content( [<length>|<percentage>] )",
                "transform-function": "<matrix()>|<translate()>|<translateX()>|<translateY()>|<scale()>|<scaleX()>|<scaleY()>|<rotate()>|<skew()>|<skewX()>|<skewY()>|<matrix3d()>|<translate3d()>|<translateZ()>|<scale3d()>|<scaleZ()>|<rotate3d()>|<rotateX()>|<rotateY()>|<rotateZ()>|<perspective()>",
                "transform-list": "<transform-function>+",
                "translate()": "translate( <length-percentage> , <length-percentage>? )",
                "translate3d()": "translate3d( <length-percentage> , <length-percentage> , <length> )",
                "translateX()": "translateX( <length-percentage> )",
                "translateY()": "translateY( <length-percentage> )",
                "translateZ()": "translateZ( <length> )",
                "type-or-unit": "string|color|url|integer|number|length|angle|time|frequency|cap|ch|em|ex|ic|lh|rlh|rem|vb|vi|vw|vh|vmin|vmax|mm|Q|cm|in|pt|pc|px|deg|grad|rad|turn|ms|s|Hz|kHz|%",
                "type-selector": "<wq-name>|<ns-prefix>? '*'",
                "var()": "var( <custom-property-name> , <declaration-value>? )",
                "viewport-length": "auto|<length-percentage>",
                "wq-name": "<ns-prefix>? <ident-token>",
                "-legacy-gradient": "<-webkit-gradient()>|<-legacy-linear-gradient>|<-legacy-repeating-linear-gradient>|<-legacy-radial-gradient>|<-legacy-repeating-radial-gradient>",
                "-legacy-linear-gradient": "-moz-linear-gradient( <-legacy-linear-gradient-arguments> )|-webkit-linear-gradient( <-legacy-linear-gradient-arguments> )|-o-linear-gradient( <-legacy-linear-gradient-arguments> )",
                "-legacy-repeating-linear-gradient": "-moz-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )|-webkit-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )|-o-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )",
                "-legacy-linear-gradient-arguments": "[<angle>|<side-or-corner>]? , <color-stop-list>",
                "-legacy-radial-gradient": "-moz-radial-gradient( <-legacy-radial-gradient-arguments> )|-webkit-radial-gradient( <-legacy-radial-gradient-arguments> )|-o-radial-gradient( <-legacy-radial-gradient-arguments> )",
                "-legacy-repeating-radial-gradient": "-moz-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )|-webkit-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )|-o-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )",
                "-legacy-radial-gradient-arguments": "[<position> ,]? [[[<-legacy-radial-gradient-shape>||<-legacy-radial-gradient-size>]|[<length>|<percentage>]{2}] ,]? <color-stop-list>",
                "-legacy-radial-gradient-size": "closest-side|closest-corner|farthest-side|farthest-corner|contain|cover",
                "-legacy-radial-gradient-shape": "circle|ellipse",
                "-non-standard-font": "-apple-system-body|-apple-system-headline|-apple-system-subheadline|-apple-system-caption1|-apple-system-caption2|-apple-system-footnote|-apple-system-short-body|-apple-system-short-headline|-apple-system-short-subheadline|-apple-system-short-caption1|-apple-system-short-footnote|-apple-system-tall-body",
                "-non-standard-color": "-moz-ButtonDefault|-moz-ButtonHoverFace|-moz-ButtonHoverText|-moz-CellHighlight|-moz-CellHighlightText|-moz-Combobox|-moz-ComboboxText|-moz-Dialog|-moz-DialogText|-moz-dragtargetzone|-moz-EvenTreeRow|-moz-Field|-moz-FieldText|-moz-html-CellHighlight|-moz-html-CellHighlightText|-moz-mac-accentdarkestshadow|-moz-mac-accentdarkshadow|-moz-mac-accentface|-moz-mac-accentlightesthighlight|-moz-mac-accentlightshadow|-moz-mac-accentregularhighlight|-moz-mac-accentregularshadow|-moz-mac-chrome-active|-moz-mac-chrome-inactive|-moz-mac-focusring|-moz-mac-menuselect|-moz-mac-menushadow|-moz-mac-menutextselect|-moz-MenuHover|-moz-MenuHoverText|-moz-MenuBarText|-moz-MenuBarHoverText|-moz-nativehyperlinktext|-moz-OddTreeRow|-moz-win-communicationstext|-moz-win-mediatext|-moz-activehyperlinktext|-moz-default-background-color|-moz-default-color|-moz-hyperlinktext|-moz-visitedhyperlinktext|-webkit-activelink|-webkit-focus-ring-color|-webkit-link|-webkit-text",
                "-non-standard-image-rendering": "optimize-contrast|-moz-crisp-edges|-o-crisp-edges|-webkit-optimize-contrast",
                "-non-standard-overflow": "-moz-scrollbars-none|-moz-scrollbars-horizontal|-moz-scrollbars-vertical|-moz-hidden-unscrollable",
                "-non-standard-width": "fill-available|min-intrinsic|intrinsic|-moz-available|-moz-fit-content|-moz-min-content|-moz-max-content|-webkit-min-content|-webkit-max-content",
                "-webkit-gradient()": "-webkit-gradient( <-webkit-gradient-type> , <-webkit-gradient-point> [, <-webkit-gradient-point>|, <-webkit-gradient-radius> , <-webkit-gradient-point>] [, <-webkit-gradient-radius>]? [, <-webkit-gradient-color-stop>]* )",
                "-webkit-gradient-color-stop": "from( <color> )|color-stop( [<number-zero-one>|<percentage>] , <color> )|to( <color> )",
                "-webkit-gradient-point": "[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]",
                "-webkit-gradient-radius": "<length>|<percentage>",
                "-webkit-gradient-type": "linear|radial",
                "-webkit-mask-box-repeat": "repeat|stretch|round",
                "-webkit-mask-clip-style": "border|border-box|padding|padding-box|content|content-box|text",
                "-ms-filter-function-list": "<-ms-filter-function>+",
                "-ms-filter-function": "<-ms-filter-function-progid>|<-ms-filter-function-legacy>",
                "-ms-filter-function-progid": "'progid:' [<ident-token> '.']* [<ident-token>|<function-token> <any-value>? )]",
                "-ms-filter-function-legacy": "<ident-token>|<function-token> <any-value>? )",
                "-ms-filter": "<string>",
                age: "child|young|old",
                "attr-name": "<wq-name>",
                "attr-fallback": "<any-value>",
                "border-radius": "<length-percentage>{1,2}",
                bottom: "<length>|auto",
                "generic-voice": "[<age>? <gender> <integer>?]",
                gender: "male|female|neutral",
                left: "<length>|auto",
                "mask-image": "<mask-reference>#",
                "name-repeat": "repeat( [<positive-integer>|auto-fill] , <line-names>+ )",
                paint: "none|<color>|<url> [none|<color>]?|context-fill|context-stroke",
                "page-size": "A5|A4|A3|B5|B4|JIS-B5|JIS-B4|letter|legal|ledger",
                ratio: "<integer> / <integer>",
                right: "<length>|auto",
                "svg-length": "<percentage>|<length>|<number>",
                "svg-writing-mode": "lr-tb|rl-tb|tb-rl|lr|rl|tb",
                top: "<length>|auto",
                "track-group": "'(' [<string>* <track-minmax> <string>*]+ ')' ['[' <positive-integer> ']']?|<track-minmax>",
                "track-list-v0": "[<string>* <track-group> <string>*]+|none",
                "track-minmax": "minmax( <track-breadth> , <track-breadth> )|auto|<track-breadth>|fit-content",
                x: "<number>",
                y: "<number>",
                declaration: "<ident-token> : <declaration-value>? ['!' important]?",
                "declaration-list": "[<declaration>? ';']* <declaration>?",
                url: "url( <string> <url-modifier>* )|<url-token>",
                "url-modifier": "<ident>|<function-token> <any-value> )",
                "number-zero-one": "<number [0,1]>",
                "number-one-or-greater": "<number [1,∞]>",
                "positive-integer": "<integer [0,∞]>",
                "-non-standard-display": "-ms-inline-flexbox|-ms-grid|-ms-inline-grid|-webkit-flex|-webkit-inline-flex|-webkit-box|-webkit-inline-box|-moz-inline-stack|-moz-box|-moz-inline-box"
            },
            properties: {
                "--*": "<declaration-value>",
                "-ms-accelerator": "false|true",
                "-ms-block-progression": "tb|rl|bt|lr",
                "-ms-content-zoom-chaining": "none|chained",
                "-ms-content-zooming": "none|zoom",
                "-ms-content-zoom-limit": "<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>",
                "-ms-content-zoom-limit-max": "<percentage>",
                "-ms-content-zoom-limit-min": "<percentage>",
                "-ms-content-zoom-snap": "<'-ms-content-zoom-snap-type'>||<'-ms-content-zoom-snap-points'>",
                "-ms-content-zoom-snap-points": "snapInterval( <percentage> , <percentage> )|snapList( <percentage># )",
                "-ms-content-zoom-snap-type": "none|proximity|mandatory",
                "-ms-filter": "<string>",
                "-ms-flow-from": "[none|<custom-ident>]#",
                "-ms-flow-into": "[none|<custom-ident>]#",
                "-ms-grid-columns": "none|<track-list>|<auto-track-list>",
                "-ms-grid-rows": "none|<track-list>|<auto-track-list>",
                "-ms-high-contrast-adjust": "auto|none",
                "-ms-hyphenate-limit-chars": "auto|<integer>{1,3}",
                "-ms-hyphenate-limit-lines": "no-limit|<integer>",
                "-ms-hyphenate-limit-zone": "<percentage>|<length>",
                "-ms-ime-align": "auto|after",
                "-ms-overflow-style": "auto|none|scrollbar|-ms-autohiding-scrollbar",
                "-ms-scrollbar-3dlight-color": "<color>",
                "-ms-scrollbar-arrow-color": "<color>",
                "-ms-scrollbar-base-color": "<color>",
                "-ms-scrollbar-darkshadow-color": "<color>",
                "-ms-scrollbar-face-color": "<color>",
                "-ms-scrollbar-highlight-color": "<color>",
                "-ms-scrollbar-shadow-color": "<color>",
                "-ms-scrollbar-track-color": "<color>",
                "-ms-scroll-chaining": "chained|none",
                "-ms-scroll-limit": "<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>",
                "-ms-scroll-limit-x-max": "auto|<length>",
                "-ms-scroll-limit-x-min": "<length>",
                "-ms-scroll-limit-y-max": "auto|<length>",
                "-ms-scroll-limit-y-min": "<length>",
                "-ms-scroll-rails": "none|railed",
                "-ms-scroll-snap-points-x": "snapInterval( <length-percentage> , <length-percentage> )|snapList( <length-percentage># )",
                "-ms-scroll-snap-points-y": "snapInterval( <length-percentage> , <length-percentage> )|snapList( <length-percentage># )",
                "-ms-scroll-snap-type": "none|proximity|mandatory",
                "-ms-scroll-snap-x": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>",
                "-ms-scroll-snap-y": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>",
                "-ms-scroll-translation": "none|vertical-to-horizontal",
                "-ms-text-autospace": "none|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space",
                "-ms-touch-select": "grippers|none",
                "-ms-user-select": "none|element|text",
                "-ms-wrap-flow": "auto|both|start|end|maximum|clear",
                "-ms-wrap-margin": "<length>",
                "-ms-wrap-through": "wrap|none",
                "-moz-appearance": "none|button|button-arrow-down|button-arrow-next|button-arrow-previous|button-arrow-up|button-bevel|button-focus|caret|checkbox|checkbox-container|checkbox-label|checkmenuitem|dualbutton|groupbox|listbox|listitem|menuarrow|menubar|menucheckbox|menuimage|menuitem|menuitemtext|menulist|menulist-button|menulist-text|menulist-textfield|menupopup|menuradio|menuseparator|meterbar|meterchunk|progressbar|progressbar-vertical|progresschunk|progresschunk-vertical|radio|radio-container|radio-label|radiomenuitem|range|range-thumb|resizer|resizerpanel|scale-horizontal|scalethumbend|scalethumb-horizontal|scalethumbstart|scalethumbtick|scalethumb-vertical|scale-vertical|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|searchfield|separator|sheet|spinner|spinner-downbutton|spinner-textfield|spinner-upbutton|splitter|statusbar|statusbarpanel|tab|tabpanel|tabpanels|tab-scroll-arrow-back|tab-scroll-arrow-forward|textfield|textfield-multiline|toolbar|toolbarbutton|toolbarbutton-dropdown|toolbargripper|toolbox|tooltip|treeheader|treeheadercell|treeheadersortarrow|treeitem|treeline|treetwisty|treetwistyopen|treeview|-moz-mac-unified-toolbar|-moz-win-borderless-glass|-moz-win-browsertabbar-toolbox|-moz-win-communicationstext|-moz-win-communications-toolbox|-moz-win-exclude-glass|-moz-win-glass|-moz-win-mediatext|-moz-win-media-toolbox|-moz-window-button-box|-moz-window-button-box-maximized|-moz-window-button-close|-moz-window-button-maximize|-moz-window-button-minimize|-moz-window-button-restore|-moz-window-frame-bottom|-moz-window-frame-left|-moz-window-frame-right|-moz-window-titlebar|-moz-window-titlebar-maximized",
                "-moz-binding": "<url>|none",
                "-moz-border-bottom-colors": "<color>+|none",
                "-moz-border-left-colors": "<color>+|none",
                "-moz-border-right-colors": "<color>+|none",
                "-moz-border-top-colors": "<color>+|none",
                "-moz-context-properties": "none|[fill|fill-opacity|stroke|stroke-opacity]#",
                "-moz-float-edge": "border-box|content-box|margin-box|padding-box",
                "-moz-force-broken-image-icon": "<integer [0,1]>",
                "-moz-image-region": "<shape>|auto",
                "-moz-orient": "inline|block|horizontal|vertical",
                "-moz-outline-radius": "<outline-radius>{1,4} [/ <outline-radius>{1,4}]?",
                "-moz-outline-radius-bottomleft": "<outline-radius>",
                "-moz-outline-radius-bottomright": "<outline-radius>",
                "-moz-outline-radius-topleft": "<outline-radius>",
                "-moz-outline-radius-topright": "<outline-radius>",
                "-moz-stack-sizing": "ignore|stretch-to-fit",
                "-moz-text-blink": "none|blink",
                "-moz-user-focus": "ignore|normal|select-after|select-before|select-menu|select-same|select-all|none",
                "-moz-user-input": "auto|none|enabled|disabled",
                "-moz-user-modify": "read-only|read-write|write-only",
                "-moz-window-dragging": "drag|no-drag",
                "-moz-window-shadow": "default|menu|tooltip|sheet|none",
                "-webkit-appearance": "none|button|button-bevel|caps-lock-indicator|caret|checkbox|default-button|inner-spin-button|listbox|listitem|media-controls-background|media-controls-fullscreen-background|media-current-time-display|media-enter-fullscreen-button|media-exit-fullscreen-button|media-fullscreen-button|media-mute-button|media-overlay-play-button|media-play-button|media-seek-back-button|media-seek-forward-button|media-slider|media-sliderthumb|media-time-remaining-display|media-toggle-closed-captions-button|media-volume-slider|media-volume-slider-container|media-volume-sliderthumb|menulist|menulist-button|menulist-text|menulist-textfield|meter|progress-bar|progress-bar-value|push-button|radio|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbargripper-horizontal|scrollbargripper-vertical|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|searchfield|searchfield-cancel-button|searchfield-decoration|searchfield-results-button|searchfield-results-decoration|slider-horizontal|slider-vertical|sliderthumb-horizontal|sliderthumb-vertical|square-button|textarea|textfield|-apple-pay-button",
                "-webkit-border-before": "<'border-width'>||<'border-style'>||<'color'>",
                "-webkit-border-before-color": "<'color'>",
                "-webkit-border-before-style": "<'border-style'>",
                "-webkit-border-before-width": "<'border-width'>",
                "-webkit-box-reflect": "[above|below|right|left]? <length>? <image>?",
                "-webkit-line-clamp": "none|<integer>",
                "-webkit-mask": "[<mask-reference>||<position> [/ <bg-size>]?||<repeat-style>||[<box>|border|padding|content|text]||[<box>|border|padding|content]]#",
                "-webkit-mask-attachment": "<attachment>#",
                "-webkit-mask-clip": "[<box>|border|padding|content|text]#",
                "-webkit-mask-composite": "<composite-style>#",
                "-webkit-mask-image": "<mask-reference>#",
                "-webkit-mask-origin": "[<box>|border|padding|content]#",
                "-webkit-mask-position": "<position>#",
                "-webkit-mask-position-x": "[<length-percentage>|left|center|right]#",
                "-webkit-mask-position-y": "[<length-percentage>|top|center|bottom]#",
                "-webkit-mask-repeat": "<repeat-style>#",
                "-webkit-mask-repeat-x": "repeat|no-repeat|space|round",
                "-webkit-mask-repeat-y": "repeat|no-repeat|space|round",
                "-webkit-mask-size": "<bg-size>#",
                "-webkit-overflow-scrolling": "auto|touch",
                "-webkit-tap-highlight-color": "<color>",
                "-webkit-text-fill-color": "<color>",
                "-webkit-text-stroke": "<length>||<color>",
                "-webkit-text-stroke-color": "<color>",
                "-webkit-text-stroke-width": "<length>",
                "-webkit-touch-callout": "default|none",
                "-webkit-user-modify": "read-only|read-write|read-write-plaintext-only",
                "align-content": "normal|<baseline-position>|<content-distribution>|<overflow-position>? <content-position>",
                "align-items": "normal|stretch|<baseline-position>|[<overflow-position>? <self-position>]",
                "align-self": "auto|normal|stretch|<baseline-position>|<overflow-position>? <self-position>",
                "align-tracks": "[normal|<baseline-position>|<content-distribution>|<overflow-position>? <content-position>]#",
                all: "initial|inherit|unset|revert",
                animation: "<single-animation>#",
                "animation-delay": "<time>#",
                "animation-direction": "<single-animation-direction>#",
                "animation-duration": "<time>#",
                "animation-fill-mode": "<single-animation-fill-mode>#",
                "animation-iteration-count": "<single-animation-iteration-count>#",
                "animation-name": "[none|<keyframes-name>]#",
                "animation-play-state": "<single-animation-play-state>#",
                "animation-timing-function": "<timing-function>#",
                appearance: "none|auto|textfield|menulist-button|<compat-auto>",
                "aspect-ratio": "auto|<ratio>",
                azimuth: "<angle>|[[left-side|far-left|left|center-left|center|center-right|right|far-right|right-side]||behind]|leftwards|rightwards",
                "backdrop-filter": "none|<filter-function-list>",
                "backface-visibility": "visible|hidden",
                background: "[<bg-layer> ,]* <final-bg-layer>",
                "background-attachment": "<attachment>#",
                "background-blend-mode": "<blend-mode>#",
                "background-clip": "<box>#",
                "background-color": "<color>",
                "background-image": "<bg-image>#",
                "background-origin": "<box>#",
                "background-position": "<bg-position>#",
                "background-position-x": "[center|[[left|right|x-start|x-end]? <length-percentage>?]!]#",
                "background-position-y": "[center|[[top|bottom|y-start|y-end]? <length-percentage>?]!]#",
                "background-repeat": "<repeat-style>#",
                "background-size": "<bg-size>#",
                "block-overflow": "clip|ellipsis|<string>",
                "block-size": "<'width'>",
                border: "<line-width>||<line-style>||<color>",
                "border-block": "<'border-top-width'>||<'border-top-style'>||<'color'>",
                "border-block-color": "<'border-top-color'>{1,2}",
                "border-block-style": "<'border-top-style'>",
                "border-block-width": "<'border-top-width'>",
                "border-block-end": "<'border-top-width'>||<'border-top-style'>||<'color'>",
                "border-block-end-color": "<'border-top-color'>",
                "border-block-end-style": "<'border-top-style'>",
                "border-block-end-width": "<'border-top-width'>",
                "border-block-start": "<'border-top-width'>||<'border-top-style'>||<'color'>",
                "border-block-start-color": "<'border-top-color'>",
                "border-block-start-style": "<'border-top-style'>",
                "border-block-start-width": "<'border-top-width'>",
                "border-bottom": "<line-width>||<line-style>||<color>",
                "border-bottom-color": "<'border-top-color'>",
                "border-bottom-left-radius": "<length-percentage>{1,2}",
                "border-bottom-right-radius": "<length-percentage>{1,2}",
                "border-bottom-style": "<line-style>",
                "border-bottom-width": "<line-width>",
                "border-collapse": "collapse|separate",
                "border-color": "<color>{1,4}",
                "border-end-end-radius": "<length-percentage>{1,2}",
                "border-end-start-radius": "<length-percentage>{1,2}",
                "border-image": "<'border-image-source'>||<'border-image-slice'> [/ <'border-image-width'>|/ <'border-image-width'>? / <'border-image-outset'>]?||<'border-image-repeat'>",
                "border-image-outset": "[<length>|<number>]{1,4}",
                "border-image-repeat": "[stretch|repeat|round|space]{1,2}",
                "border-image-slice": "<number-percentage>{1,4}&&fill?",
                "border-image-source": "none|<image>",
                "border-image-width": "[<length-percentage>|<number>|auto]{1,4}",
                "border-inline": "<'border-top-width'>||<'border-top-style'>||<'color'>",
                "border-inline-end": "<'border-top-width'>||<'border-top-style'>||<'color'>",
                "border-inline-color": "<'border-top-color'>{1,2}",
                "border-inline-style": "<'border-top-style'>",
                "border-inline-width": "<'border-top-width'>",
                "border-inline-end-color": "<'border-top-color'>",
                "border-inline-end-style": "<'border-top-style'>",
                "border-inline-end-width": "<'border-top-width'>",
                "border-inline-start": "<'border-top-width'>||<'border-top-style'>||<'color'>",
                "border-inline-start-color": "<'border-top-color'>",
                "border-inline-start-style": "<'border-top-style'>",
                "border-inline-start-width": "<'border-top-width'>",
                "border-left": "<line-width>||<line-style>||<color>",
                "border-left-color": "<color>",
                "border-left-style": "<line-style>",
                "border-left-width": "<line-width>",
                "border-radius": "<length-percentage>{1,4} [/ <length-percentage>{1,4}]?",
                "border-right": "<line-width>||<line-style>||<color>",
                "border-right-color": "<color>",
                "border-right-style": "<line-style>",
                "border-right-width": "<line-width>",
                "border-spacing": "<length> <length>?",
                "border-start-end-radius": "<length-percentage>{1,2}",
                "border-start-start-radius": "<length-percentage>{1,2}",
                "border-style": "<line-style>{1,4}",
                "border-top": "<line-width>||<line-style>||<color>",
                "border-top-color": "<color>",
                "border-top-left-radius": "<length-percentage>{1,2}",
                "border-top-right-radius": "<length-percentage>{1,2}",
                "border-top-style": "<line-style>",
                "border-top-width": "<line-width>",
                "border-width": "<line-width>{1,4}",
                bottom: "<length>|<percentage>|auto",
                "box-align": "start|center|end|baseline|stretch",
                "box-decoration-break": "slice|clone",
                "box-direction": "normal|reverse|inherit",
                "box-flex": "<number>",
                "box-flex-group": "<integer>",
                "box-lines": "single|multiple",
                "box-ordinal-group": "<integer>",
                "box-orient": "horizontal|vertical|inline-axis|block-axis|inherit",
                "box-pack": "start|center|end|justify",
                "box-shadow": "none|<shadow>#",
                "box-sizing": "content-box|border-box",
                "break-after": "auto|avoid|always|all|avoid-page|page|left|right|recto|verso|avoid-column|column|avoid-region|region",
                "break-before": "auto|avoid|always|all|avoid-page|page|left|right|recto|verso|avoid-column|column|avoid-region|region",
                "break-inside": "auto|avoid|avoid-page|avoid-column|avoid-region",
                "caption-side": "top|bottom|block-start|block-end|inline-start|inline-end",
                "caret-color": "auto|<color>",
                clear: "none|left|right|both|inline-start|inline-end",
                clip: "<shape>|auto",
                "clip-path": "<clip-source>|[<basic-shape>||<geometry-box>]|none",
                color: "<color>",
                "color-adjust": "economy|exact",
                "column-count": "<integer>|auto",
                "column-fill": "auto|balance|balance-all",
                "column-gap": "normal|<length-percentage>",
                "column-rule": "<'column-rule-width'>||<'column-rule-style'>||<'column-rule-color'>",
                "column-rule-color": "<color>",
                "column-rule-style": "<'border-style'>",
                "column-rule-width": "<'border-width'>",
                "column-span": "none|all",
                "column-width": "<length>|auto",
                columns: "<'column-width'>||<'column-count'>",
                contain: "none|strict|content|[size||layout||style||paint]",
                content: "normal|none|[<content-replacement>|<content-list>] [/ <string>]?",
                "counter-increment": "[<custom-ident> <integer>?]+|none",
                "counter-reset": "[<custom-ident> <integer>?]+|none",
                "counter-set": "[<custom-ident> <integer>?]+|none",
                cursor: "[[<url> [<x> <y>]? ,]* [auto|default|none|context-menu|help|pointer|progress|wait|cell|crosshair|text|vertical-text|alias|copy|move|no-drop|not-allowed|e-resize|n-resize|ne-resize|nw-resize|s-resize|se-resize|sw-resize|w-resize|ew-resize|ns-resize|nesw-resize|nwse-resize|col-resize|row-resize|all-scroll|zoom-in|zoom-out|grab|grabbing|hand|-webkit-grab|-webkit-grabbing|-webkit-zoom-in|-webkit-zoom-out|-moz-grab|-moz-grabbing|-moz-zoom-in|-moz-zoom-out]]",
                direction: "ltr|rtl",
                display: "[<display-outside>||<display-inside>]|<display-listitem>|<display-internal>|<display-box>|<display-legacy>|<-non-standard-display>",
                "empty-cells": "show|hide",
                filter: "none|<filter-function-list>|<-ms-filter-function-list>",
                flex: "none|[<'flex-grow'> <'flex-shrink'>?||<'flex-basis'>]",
                "flex-basis": "content|<'width'>",
                "flex-direction": "row|row-reverse|column|column-reverse",
                "flex-flow": "<'flex-direction'>||<'flex-wrap'>",
                "flex-grow": "<number>",
                "flex-shrink": "<number>",
                "flex-wrap": "nowrap|wrap|wrap-reverse",
                float: "left|right|none|inline-start|inline-end",
                font: "[[<'font-style'>||<font-variant-css21>||<'font-weight'>||<'font-stretch'>]? <'font-size'> [/ <'line-height'>]? <'font-family'>]|caption|icon|menu|message-box|small-caption|status-bar",
                "font-family": "[<family-name>|<generic-family>]#",
                "font-feature-settings": "normal|<feature-tag-value>#",
                "font-kerning": "auto|normal|none",
                "font-language-override": "normal|<string>",
                "font-optical-sizing": "auto|none",
                "font-variation-settings": "normal|[<string> <number>]#",
                "font-size": "<absolute-size>|<relative-size>|<length-percentage>",
                "font-size-adjust": "none|<number>",
                "font-smooth": "auto|never|always|<absolute-size>|<length>",
                "font-stretch": "<font-stretch-absolute>",
                "font-style": "normal|italic|oblique <angle>?",
                "font-synthesis": "none|[weight||style]",
                "font-variant": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby]",
                "font-variant-alternates": "normal|[stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )]",
                "font-variant-caps": "normal|small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps",
                "font-variant-east-asian": "normal|[<east-asian-variant-values>||<east-asian-width-values>||ruby]",
                "font-variant-ligatures": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>]",
                "font-variant-numeric": "normal|[<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero]",
                "font-variant-position": "normal|sub|super",
                "font-weight": "<font-weight-absolute>|bolder|lighter",
                gap: "<'row-gap'> <'column-gap'>?",
                grid: "<'grid-template'>|<'grid-template-rows'> / [auto-flow&&dense?] <'grid-auto-columns'>?|[auto-flow&&dense?] <'grid-auto-rows'>? / <'grid-template-columns'>",
                "grid-area": "<grid-line> [/ <grid-line>]{0,3}",
                "grid-auto-columns": "<track-size>+",
                "grid-auto-flow": "[row|column]||dense",
                "grid-auto-rows": "<track-size>+",
                "grid-column": "<grid-line> [/ <grid-line>]?",
                "grid-column-end": "<grid-line>",
                "grid-column-gap": "<length-percentage>",
                "grid-column-start": "<grid-line>",
                "grid-gap": "<'grid-row-gap'> <'grid-column-gap'>?",
                "grid-row": "<grid-line> [/ <grid-line>]?",
                "grid-row-end": "<grid-line>",
                "grid-row-gap": "<length-percentage>",
                "grid-row-start": "<grid-line>",
                "grid-template": "none|[<'grid-template-rows'> / <'grid-template-columns'>]|[<line-names>? <string> <track-size>? <line-names>?]+ [/ <explicit-track-list>]?",
                "grid-template-areas": "none|<string>+",
                "grid-template-columns": "none|<track-list>|<auto-track-list>|subgrid <line-name-list>?",
                "grid-template-rows": "none|<track-list>|<auto-track-list>|subgrid <line-name-list>?",
                "hanging-punctuation": "none|[first||[force-end|allow-end]||last]",
                height: "auto|<length>|<percentage>|min-content|max-content|fit-content( <length-percentage> )",
                hyphens: "none|manual|auto",
                "image-orientation": "from-image|<angle>|[<angle>? flip]",
                "image-rendering": "auto|crisp-edges|pixelated|optimizeSpeed|optimizeQuality|<-non-standard-image-rendering>",
                "image-resolution": "[from-image||<resolution>]&&snap?",
                "ime-mode": "auto|normal|active|inactive|disabled",
                "initial-letter": "normal|[<number> <integer>?]",
                "initial-letter-align": "[auto|alphabetic|hanging|ideographic]",
                "inline-size": "<'width'>",
                inset: "<'top'>{1,4}",
                "inset-block": "<'top'>{1,2}",
                "inset-block-end": "<'top'>",
                "inset-block-start": "<'top'>",
                "inset-inline": "<'top'>{1,2}",
                "inset-inline-end": "<'top'>",
                "inset-inline-start": "<'top'>",
                isolation: "auto|isolate",
                "justify-content": "normal|<content-distribution>|<overflow-position>? [<content-position>|left|right]",
                "justify-items": "normal|stretch|<baseline-position>|<overflow-position>? [<self-position>|left|right]|legacy|legacy&&[left|right|center]",
                "justify-self": "auto|normal|stretch|<baseline-position>|<overflow-position>? [<self-position>|left|right]",
                "justify-tracks": "[normal|<content-distribution>|<overflow-position>? [<content-position>|left|right]]#",
                left: "<length>|<percentage>|auto",
                "letter-spacing": "normal|<length-percentage>",
                "line-break": "auto|loose|normal|strict|anywhere",
                "line-clamp": "none|<integer>",
                "line-height": "normal|<number>|<length>|<percentage>",
                "line-height-step": "<length>",
                "list-style": "<'list-style-type'>||<'list-style-position'>||<'list-style-image'>",
                "list-style-image": "<url>|none",
                "list-style-position": "inside|outside",
                "list-style-type": "<counter-style>|<string>|none",
                margin: "[<length>|<percentage>|auto]{1,4}",
                "margin-block": "<'margin-left'>{1,2}",
                "margin-block-end": "<'margin-left'>",
                "margin-block-start": "<'margin-left'>",
                "margin-bottom": "<length>|<percentage>|auto",
                "margin-inline": "<'margin-left'>{1,2}",
                "margin-inline-end": "<'margin-left'>",
                "margin-inline-start": "<'margin-left'>",
                "margin-left": "<length>|<percentage>|auto",
                "margin-right": "<length>|<percentage>|auto",
                "margin-top": "<length>|<percentage>|auto",
                "margin-trim": "none|in-flow|all",
                mask: "<mask-layer>#",
                "mask-border": "<'mask-border-source'>||<'mask-border-slice'> [/ <'mask-border-width'>? [/ <'mask-border-outset'>]?]?||<'mask-border-repeat'>||<'mask-border-mode'>",
                "mask-border-mode": "luminance|alpha",
                "mask-border-outset": "[<length>|<number>]{1,4}",
                "mask-border-repeat": "[stretch|repeat|round|space]{1,2}",
                "mask-border-slice": "<number-percentage>{1,4} fill?",
                "mask-border-source": "none|<image>",
                "mask-border-width": "[<length-percentage>|<number>|auto]{1,4}",
                "mask-clip": "[<geometry-box>|no-clip]#",
                "mask-composite": "<compositing-operator>#",
                "mask-image": "<mask-reference>#",
                "mask-mode": "<masking-mode>#",
                "mask-origin": "<geometry-box>#",
                "mask-position": "<position>#",
                "mask-repeat": "<repeat-style>#",
                "mask-size": "<bg-size>#",
                "mask-type": "luminance|alpha",
                "masonry-auto-flow": "[pack|next]||[definite-first|ordered]",
                "math-style": "normal|compact",
                "max-block-size": "<'max-width'>",
                "max-height": "none|<length-percentage>|min-content|max-content|fit-content( <length-percentage> )",
                "max-inline-size": "<'max-width'>",
                "max-lines": "none|<integer>",
                "max-width": "none|<length-percentage>|min-content|max-content|fit-content( <length-percentage> )|<-non-standard-width>",
                "min-block-size": "<'min-width'>",
                "min-height": "auto|<length>|<percentage>|min-content|max-content|fit-content( <length-percentage> )",
                "min-inline-size": "<'min-width'>",
                "min-width": "auto|<length-percentage>|min-content|max-content|fit-content( <length-percentage> )|<-non-standard-width>",
                "mix-blend-mode": "<blend-mode>",
                "object-fit": "fill|contain|cover|none|scale-down",
                "object-position": "<position>",
                offset: "[<'offset-position'>? [<'offset-path'> [<'offset-distance'>||<'offset-rotate'>]?]?]! [/ <'offset-anchor'>]?",
                "offset-anchor": "auto|<position>",
                "offset-distance": "<length-percentage>",
                "offset-path": "none|ray( [<angle>&&<size>&&contain?] )|<path()>|<url>|[<basic-shape>||<geometry-box>]",
                "offset-position": "auto|<position>",
                "offset-rotate": "[auto|reverse]||<angle>",
                opacity: "<alpha-value>",
                order: "<integer>",
                orphans: "<integer>",
                outline: "[<'outline-color'>||<'outline-style'>||<'outline-width'>]",
                "outline-color": "<color>|invert",
                "outline-offset": "<length>",
                "outline-style": "auto|<'border-style'>",
                "outline-width": "<line-width>",
                overflow: "[visible|hidden|clip|scroll|auto]{1,2}|<-non-standard-overflow>",
                "overflow-anchor": "auto|none",
                "overflow-block": "visible|hidden|clip|scroll|auto",
                "overflow-clip-box": "padding-box|content-box",
                "overflow-inline": "visible|hidden|clip|scroll|auto",
                "overflow-wrap": "normal|break-word|anywhere",
                "overflow-x": "visible|hidden|clip|scroll|auto",
                "overflow-y": "visible|hidden|clip|scroll|auto",
                "overscroll-behavior": "[contain|none|auto]{1,2}",
                "overscroll-behavior-block": "contain|none|auto",
                "overscroll-behavior-inline": "contain|none|auto",
                "overscroll-behavior-x": "contain|none|auto",
                "overscroll-behavior-y": "contain|none|auto",
                padding: "[<length>|<percentage>]{1,4}",
                "padding-block": "<'padding-left'>{1,2}",
                "padding-block-end": "<'padding-left'>",
                "padding-block-start": "<'padding-left'>",
                "padding-bottom": "<length>|<percentage>",
                "padding-inline": "<'padding-left'>{1,2}",
                "padding-inline-end": "<'padding-left'>",
                "padding-inline-start": "<'padding-left'>",
                "padding-left": "<length>|<percentage>",
                "padding-right": "<length>|<percentage>",
                "padding-top": "<length>|<percentage>",
                "page-break-after": "auto|always|avoid|left|right|recto|verso",
                "page-break-before": "auto|always|avoid|left|right|recto|verso",
                "page-break-inside": "auto|avoid",
                "paint-order": "normal|[fill||stroke||markers]",
                perspective: "none|<length>",
                "perspective-origin": "<position>",
                "place-content": "<'align-content'> <'justify-content'>?",
                "place-items": "<'align-items'> <'justify-items'>?",
                "place-self": "<'align-self'> <'justify-self'>?",
                "pointer-events": "auto|none|visiblePainted|visibleFill|visibleStroke|visible|painted|fill|stroke|all|inherit",
                position: "static|relative|absolute|sticky|fixed|-webkit-sticky",
                quotes: "none|auto|[<string> <string>]+",
                resize: "none|both|horizontal|vertical|block|inline",
                right: "<length>|<percentage>|auto",
                rotate: "none|<angle>|[x|y|z|<number>{3}]&&<angle>",
                "row-gap": "normal|<length-percentage>",
                "ruby-align": "start|center|space-between|space-around",
                "ruby-merge": "separate|collapse|auto",
                "ruby-position": "over|under|inter-character",
                scale: "none|<number>{1,3}",
                "scrollbar-color": "auto|dark|light|<color>{2}",
                "scrollbar-gutter": "auto|[stable|always]&&both?&&force?",
                "scrollbar-width": "auto|thin|none",
                "scroll-behavior": "auto|smooth",
                "scroll-margin": "<length>{1,4}",
                "scroll-margin-block": "<length>{1,2}",
                "scroll-margin-block-start": "<length>",
                "scroll-margin-block-end": "<length>",
                "scroll-margin-bottom": "<length>",
                "scroll-margin-inline": "<length>{1,2}",
                "scroll-margin-inline-start": "<length>",
                "scroll-margin-inline-end": "<length>",
                "scroll-margin-left": "<length>",
                "scroll-margin-right": "<length>",
                "scroll-margin-top": "<length>",
                "scroll-padding": "[auto|<length-percentage>]{1,4}",
                "scroll-padding-block": "[auto|<length-percentage>]{1,2}",
                "scroll-padding-block-start": "auto|<length-percentage>",
                "scroll-padding-block-end": "auto|<length-percentage>",
                "scroll-padding-bottom": "auto|<length-percentage>",
                "scroll-padding-inline": "[auto|<length-percentage>]{1,2}",
                "scroll-padding-inline-start": "auto|<length-percentage>",
                "scroll-padding-inline-end": "auto|<length-percentage>",
                "scroll-padding-left": "auto|<length-percentage>",
                "scroll-padding-right": "auto|<length-percentage>",
                "scroll-padding-top": "auto|<length-percentage>",
                "scroll-snap-align": "[none|start|end|center]{1,2}",
                "scroll-snap-coordinate": "none|<position>#",
                "scroll-snap-destination": "<position>",
                "scroll-snap-points-x": "none|repeat( <length-percentage> )",
                "scroll-snap-points-y": "none|repeat( <length-percentage> )",
                "scroll-snap-stop": "normal|always",
                "scroll-snap-type": "none|[x|y|block|inline|both] [mandatory|proximity]?",
                "scroll-snap-type-x": "none|mandatory|proximity",
                "scroll-snap-type-y": "none|mandatory|proximity",
                "shape-image-threshold": "<alpha-value>",
                "shape-margin": "<length-percentage>",
                "shape-outside": "none|<shape-box>||<basic-shape>|<image>",
                "tab-size": "<integer>|<length>",
                "table-layout": "auto|fixed",
                "text-align": "start|end|left|right|center|justify|match-parent",
                "text-align-last": "auto|start|end|left|right|center|justify",
                "text-combine-upright": "none|all|[digits <integer>?]",
                "text-decoration": "<'text-decoration-line'>||<'text-decoration-style'>||<'text-decoration-color'>||<'text-decoration-thickness'>",
                "text-decoration-color": "<color>",
                "text-decoration-line": "none|[underline||overline||line-through||blink]|spelling-error|grammar-error",
                "text-decoration-skip": "none|[objects||[spaces|[leading-spaces||trailing-spaces]]||edges||box-decoration]",
                "text-decoration-skip-ink": "auto|all|none",
                "text-decoration-style": "solid|double|dotted|dashed|wavy",
                "text-decoration-thickness": "auto|from-font|<length>|<percentage>",
                "text-emphasis": "<'text-emphasis-style'>||<'text-emphasis-color'>",
                "text-emphasis-color": "<color>",
                "text-emphasis-position": "[over|under]&&[right|left]",
                "text-emphasis-style": "none|[[filled|open]||[dot|circle|double-circle|triangle|sesame]]|<string>",
                "text-indent": "<length-percentage>&&hanging?&&each-line?",
                "text-justify": "auto|inter-character|inter-word|none",
                "text-orientation": "mixed|upright|sideways",
                "text-overflow": "[clip|ellipsis|<string>]{1,2}",
                "text-rendering": "auto|optimizeSpeed|optimizeLegibility|geometricPrecision",
                "text-shadow": "none|<shadow-t>#",
                "text-size-adjust": "none|auto|<percentage>",
                "text-transform": "none|capitalize|uppercase|lowercase|full-width|full-size-kana",
                "text-underline-offset": "auto|<length>|<percentage>",
                "text-underline-position": "auto|from-font|[under||[left|right]]",
                top: "<length>|<percentage>|auto",
                "touch-action": "auto|none|[[pan-x|pan-left|pan-right]||[pan-y|pan-up|pan-down]||pinch-zoom]|manipulation",
                transform: "none|<transform-list>",
                "transform-box": "content-box|border-box|fill-box|stroke-box|view-box",
                "transform-origin": "[<length-percentage>|left|center|right|top|bottom]|[[<length-percentage>|left|center|right]&&[<length-percentage>|top|center|bottom]] <length>?",
                "transform-style": "flat|preserve-3d",
                transition: "<single-transition>#",
                "transition-delay": "<time>#",
                "transition-duration": "<time>#",
                "transition-property": "none|<single-transition-property>#",
                "transition-timing-function": "<timing-function>#",
                translate: "none|<length-percentage> [<length-percentage> <length>?]?",
                "unicode-bidi": "normal|embed|isolate|bidi-override|isolate-override|plaintext|-moz-isolate|-moz-isolate-override|-moz-plaintext|-webkit-isolate|-webkit-isolate-override|-webkit-plaintext",
                "user-select": "auto|text|none|contain|all",
                "vertical-align": "baseline|sub|super|text-top|text-bottom|middle|top|bottom|<percentage>|<length>",
                visibility: "visible|hidden|collapse",
                "white-space": "normal|pre|nowrap|pre-wrap|pre-line|break-spaces",
                widows: "<integer>",
                width: "auto|<length>|<percentage>|min-content|max-content|fit-content( <length-percentage> )|fit-content|-moz-fit-content|-webkit-fit-content",
                "will-change": "auto|<animateable-feature>#",
                "word-break": "normal|break-all|keep-all|break-word",
                "word-spacing": "normal|<length-percentage>",
                "word-wrap": "normal|break-word",
                "writing-mode": "horizontal-tb|vertical-rl|vertical-lr|sideways-rl|sideways-lr|<svg-writing-mode>",
                "z-index": "auto|<integer>",
                zoom: "normal|reset|<number>|<percentage>",
                "-moz-background-clip": "padding|border",
                "-moz-border-radius-bottomleft": "<'border-bottom-left-radius'>",
                "-moz-border-radius-bottomright": "<'border-bottom-right-radius'>",
                "-moz-border-radius-topleft": "<'border-top-left-radius'>",
                "-moz-border-radius-topright": "<'border-bottom-right-radius'>",
                "-moz-control-character-visibility": "visible|hidden",
                "-moz-osx-font-smoothing": "auto|grayscale",
                "-moz-user-select": "none|text|all|-moz-none",
                "-ms-flex-align": "start|end|center|baseline|stretch",
                "-ms-flex-item-align": "auto|start|end|center|baseline|stretch",
                "-ms-flex-line-pack": "start|end|center|justify|distribute|stretch",
                "-ms-flex-negative": "<'flex-shrink'>",
                "-ms-flex-pack": "start|end|center|justify|distribute",
                "-ms-flex-order": "<integer>",
                "-ms-flex-positive": "<'flex-grow'>",
                "-ms-flex-preferred-size": "<'flex-basis'>",
                "-ms-interpolation-mode": "nearest-neighbor|bicubic",
                "-ms-grid-column-align": "start|end|center|stretch",
                "-ms-grid-row-align": "start|end|center|stretch",
                "-ms-hyphenate-limit-last": "none|always|column|page|spread",
                "-webkit-background-clip": "[<box>|border|padding|content|text]#",
                "-webkit-column-break-after": "always|auto|avoid",
                "-webkit-column-break-before": "always|auto|avoid",
                "-webkit-column-break-inside": "always|auto|avoid",
                "-webkit-font-smoothing": "auto|none|antialiased|subpixel-antialiased",
                "-webkit-mask-box-image": "[<url>|<gradient>|none] [<length-percentage>{4} <-webkit-mask-box-repeat>{2}]?",
                "-webkit-print-color-adjust": "economy|exact",
                "-webkit-text-security": "none|circle|disc|square",
                "-webkit-user-drag": "none|element|auto",
                "-webkit-user-select": "auto|none|text|all",
                "alignment-baseline": "auto|baseline|before-edge|text-before-edge|middle|central|after-edge|text-after-edge|ideographic|alphabetic|hanging|mathematical",
                "baseline-shift": "baseline|sub|super|<svg-length>",
                behavior: "<url>+",
                "clip-rule": "nonzero|evenodd",
                cue: "<'cue-before'> <'cue-after'>?",
                "cue-after": "<url> <decibel>?|none",
                "cue-before": "<url> <decibel>?|none",
                "dominant-baseline": "auto|use-script|no-change|reset-size|ideographic|alphabetic|hanging|mathematical|central|middle|text-after-edge|text-before-edge",
                fill: "<paint>",
                "fill-opacity": "<number-zero-one>",
                "fill-rule": "nonzero|evenodd",
                "glyph-orientation-horizontal": "<angle>",
                "glyph-orientation-vertical": "<angle>",
                kerning: "auto|<svg-length>",
                marker: "none|<url>",
                "marker-end": "none|<url>",
                "marker-mid": "none|<url>",
                "marker-start": "none|<url>",
                pause: "<'pause-before'> <'pause-after'>?",
                "pause-after": "<time>|none|x-weak|weak|medium|strong|x-strong",
                "pause-before": "<time>|none|x-weak|weak|medium|strong|x-strong",
                rest: "<'rest-before'> <'rest-after'>?",
                "rest-after": "<time>|none|x-weak|weak|medium|strong|x-strong",
                "rest-before": "<time>|none|x-weak|weak|medium|strong|x-strong",
                "shape-rendering": "auto|optimizeSpeed|crispEdges|geometricPrecision",
                src: "[<url> [format( <string># )]?|local( <family-name> )]#",
                speak: "auto|none|normal",
                "speak-as": "normal|spell-out||digits||[literal-punctuation|no-punctuation]",
                stroke: "<paint>",
                "stroke-dasharray": "none|[<svg-length>+]#",
                "stroke-dashoffset": "<svg-length>",
                "stroke-linecap": "butt|round|square",
                "stroke-linejoin": "miter|round|bevel",
                "stroke-miterlimit": "<number-one-or-greater>",
                "stroke-opacity": "<number-zero-one>",
                "stroke-width": "<svg-length>",
                "text-anchor": "start|middle|end",
                "unicode-range": "<urange>#",
                "voice-balance": "<number>|left|center|right|leftwards|rightwards",
                "voice-duration": "auto|<time>",
                "voice-family": "[[<family-name>|<generic-voice>] ,]* [<family-name>|<generic-voice>]|preserve",
                "voice-pitch": "<frequency>&&absolute|[[x-low|low|medium|high|x-high]||[<frequency>|<semitones>|<percentage>]]",
                "voice-range": "<frequency>&&absolute|[[x-low|low|medium|high|x-high]||[<frequency>|<semitones>|<percentage>]]",
                "voice-rate": "[normal|x-slow|slow|medium|fast|x-fast]||<percentage>",
                "voice-stress": "normal|strong|moderate|none|reduced",
                "voice-volume": "silent|[[x-soft|soft|medium|loud|x-loud]||<decibel>]"
            },
            atrules: {
                charset: {
                    prelude: "<string>",
                    descriptors: null
                },
                "counter-style": {
                    prelude: "<counter-style-name>",
                    descriptors: {
                        "additive-symbols": "[<integer>&&<symbol>]#",
                        fallback: "<counter-style-name>",
                        negative: "<symbol> <symbol>?",
                        pad: "<integer>&&<symbol>",
                        prefix: "<symbol>",
                        range: "[[<integer>|infinite]{2}]#|auto",
                        "speak-as": "auto|bullets|numbers|words|spell-out|<counter-style-name>",
                        suffix: "<symbol>",
                        symbols: "<symbol>+",
                        system: "cyclic|numeric|alphabetic|symbolic|additive|[fixed <integer>?]|[extends <counter-style-name>]"
                    }
                },
                document: {
                    prelude: "[<url>|url-prefix( <string> )|domain( <string> )|media-document( <string> )|regexp( <string> )]#",
                    descriptors: null
                },
                "font-face": {
                    prelude: null,
                    descriptors: {
                        "font-display": "[auto|block|swap|fallback|optional]",
                        "font-family": "<family-name>",
                        "font-feature-settings": "normal|<feature-tag-value>#",
                        "font-variation-settings": "normal|[<string> <number>]#",
                        "font-stretch": "<font-stretch-absolute>{1,2}",
                        "font-style": "normal|italic|oblique <angle>{0,2}",
                        "font-weight": "<font-weight-absolute>{1,2}",
                        "font-variant": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby]",
                        src: "[<url> [format( <string># )]?|local( <family-name> )]#",
                        "unicode-range": "<urange>#"
                    }
                },
                "font-feature-values": {
                    prelude: "<family-name>#",
                    descriptors: null
                },
                import: {
                    prelude: "[<string>|<url>] [<media-query-list>]?",
                    descriptors: null
                },
                keyframes: {
                    prelude: "<keyframes-name>",
                    descriptors: null
                },
                media: {
                    prelude: "<media-query-list>",
                    descriptors: null
                },
                namespace: {
                    prelude: "<namespace-prefix>? [<string>|<url>]",
                    descriptors: null
                },
                page: {
                    prelude: "<page-selector-list>",
                    descriptors: {
                        bleed: "auto|<length>",
                        marks: "none|[crop||cross]",
                        size: "<length>{1,2}|auto|[<page-size>||[portrait|landscape]]"
                    }
                },
                property: {
                    prelude: "<custom-property-name>",
                    descriptors: {
                        syntax: "<string>",
                        inherits: "true|false",
                        "initial-value": "<string>"
                    }
                },
                supports: {
                    prelude: "<supports-condition>",
                    descriptors: null
                },
                viewport: {
                    prelude: null,
                    descriptors: {
                        height: "<viewport-length>{1,2}",
                        "max-height": "<viewport-length>",
                        "max-width": "<viewport-length>",
                        "max-zoom": "auto|<number>|<percentage>",
                        "min-height": "<viewport-length>",
                        "min-width": "<viewport-length>",
                        "min-zoom": "auto|<number>|<percentage>",
                        orientation: "auto|portrait|landscape",
                        "user-zoom": "zoom|fixed",
                        "viewport-fit": "auto|contain|cover",
                        width: "<viewport-length>{1,2}",
                        zoom: "auto|<number>|<percentage>"
                    }
                }
            }
        }, Rr = Ce.cmpChar, Mr = Ce.isDigit, jr = Ce.TYPE, _r = jr.WhiteSpace, Fr = jr.Comment, Wr = jr.Ident, qr = jr.Number, Yr = jr.Dimension;
        function Ur(e, t) {
            var n = this.scanner.tokenStart + e, r = this.scanner.source.charCodeAt(n);
            for(43 !== r && 45 !== r || (t && this.error("Number sign is not allowed"), n++); n < this.scanner.tokenEnd; n++)Mr(this.scanner.source.charCodeAt(n)) || this.error("Integer is expected", n);
        }
        function Hr(e) {
            return Ur.call(this, 0, e);
        }
        function Vr(e, t) {
            if (!Rr(this.scanner.source, this.scanner.tokenStart + e, t)) {
                var n = "";
                switch(t){
                    case 110:
                        n = "N is expected";
                        break;
                    case 45:
                        n = "HyphenMinus is expected";
                }
                this.error(n, this.scanner.tokenStart + e);
            }
        }
        function Kr() {
            for(var e = 0, t = 0, n = this.scanner.tokenType; n === _r || n === Fr;)n = this.scanner.lookupType(++e);
            if (n !== qr) {
                if (!this.scanner.isDelim(43, e) && !this.scanner.isDelim(45, e)) return null;
                t = this.scanner.isDelim(43, e) ? 43 : 45;
                do n = this.scanner.lookupType(++e);
                while (n === _r || n === Fr)
                n !== qr && (this.scanner.skip(e), Hr.call(this, !0));
            }
            return e > 0 && this.scanner.skip(e), 0 === t && 43 !== (n = this.scanner.source.charCodeAt(this.scanner.tokenStart)) && 45 !== n && this.error("Number sign is expected"), Hr.call(this, 0 !== t), 45 === t ? "-" + this.consume(qr) : this.consume(qr);
        }
        var Gr = {
            name: "AnPlusB",
            structure: {
                a: [
                    String,
                    null
                ],
                b: [
                    String,
                    null
                ]
            },
            parse: function() {
                var e = this.scanner.tokenStart, t = null, n = null;
                if (this.scanner.tokenType === qr) Hr.call(this, !1), n = this.consume(qr);
                else if (this.scanner.tokenType === Wr && Rr(this.scanner.source, this.scanner.tokenStart, 45)) switch(t = "-1", Vr.call(this, 1, 110), this.scanner.getTokenLength()){
                    case 2:
                        this.scanner.next(), n = Kr.call(this);
                        break;
                    case 3:
                        Vr.call(this, 2, 45), this.scanner.next(), this.scanner.skipSC(), Hr.call(this, !0), n = "-" + this.consume(qr);
                        break;
                    default:
                        Vr.call(this, 2, 45), Ur.call(this, 3, !0), this.scanner.next(), n = this.scanner.substrToCursor(e + 2);
                }
                else if (this.scanner.tokenType === Wr || this.scanner.isDelim(43) && this.scanner.lookupType(1) === Wr) {
                    var r = 0;
                    switch(t = "1", this.scanner.isDelim(43) && (r = 1, this.scanner.next()), Vr.call(this, 0, 110), this.scanner.getTokenLength()){
                        case 1:
                            this.scanner.next(), n = Kr.call(this);
                            break;
                        case 2:
                            Vr.call(this, 1, 45), this.scanner.next(), this.scanner.skipSC(), Hr.call(this, !0), n = "-" + this.consume(qr);
                            break;
                        default:
                            Vr.call(this, 1, 45), Ur.call(this, 2, !0), this.scanner.next(), n = this.scanner.substrToCursor(e + r + 1);
                    }
                } else if (this.scanner.tokenType === Yr) {
                    for(var i = this.scanner.source.charCodeAt(this.scanner.tokenStart), a = (r = 43 === i || 45 === i, this.scanner.tokenStart + r); a < this.scanner.tokenEnd && Mr(this.scanner.source.charCodeAt(a)); a++);
                    a === this.scanner.tokenStart + r && this.error("Integer is expected", this.scanner.tokenStart + r), Vr.call(this, a - this.scanner.tokenStart, 110), t = this.scanner.source.substring(e, a), a + 1 === this.scanner.tokenEnd ? (this.scanner.next(), n = Kr.call(this)) : (Vr.call(this, a - this.scanner.tokenStart + 1, 45), a + 2 === this.scanner.tokenEnd ? (this.scanner.next(), this.scanner.skipSC(), Hr.call(this, !0), n = "-" + this.consume(qr)) : (Ur.call(this, a - this.scanner.tokenStart + 2, !0), this.scanner.next(), n = this.scanner.substrToCursor(a + 1)));
                } else this.error();
                return null !== t && 43 === t.charCodeAt(0) && (t = t.substr(1)), null !== n && 43 === n.charCodeAt(0) && (n = n.substr(1)), {
                    type: "AnPlusB",
                    loc: this.getLocation(e, this.scanner.tokenStart),
                    a: t,
                    b: n
                };
            },
            generate: function(e) {
                var t = null !== e.a && void 0 !== e.a, n = null !== e.b && void 0 !== e.b;
                t ? (this.chunk("+1" === e.a ? "+n" : "1" === e.a ? "n" : "-1" === e.a ? "-n" : e.a + "n"), n && ("-" === (n = String(e.b)).charAt(0) || "+" === n.charAt(0) ? (this.chunk(n.charAt(0)), this.chunk(n.substr(1))) : (this.chunk("+"), this.chunk(n)))) : this.chunk(String(e.b));
            }
        }, Qr = Ce.TYPE, Xr = Qr.WhiteSpace, Zr = Qr.Semicolon, $r = Qr.LeftCurlyBracket, Jr = Qr.Delim;
        function ei() {
            return this.scanner.tokenIndex > 0 && this.scanner.lookupType(-1) === Xr ? this.scanner.tokenIndex > 1 ? this.scanner.getTokenStart(this.scanner.tokenIndex - 1) : this.scanner.firstCharOffset : this.scanner.tokenStart;
        }
        function ti() {
            return 0;
        }
        var ni = {
            name: "Raw",
            structure: {
                value: String
            },
            parse: function(e, t, n) {
                var r, i = this.scanner.getTokenStart(e);
                return this.scanner.skip(this.scanner.getRawLength(e, t || ti)), r = n && this.scanner.tokenStart > i ? ei.call(this) : this.scanner.tokenStart, {
                    type: "Raw",
                    loc: this.getLocation(i, r),
                    value: this.scanner.source.substring(i, r)
                };
            },
            generate: function(e) {
                this.chunk(e.value);
            },
            mode: {
                default: ti,
                leftCurlyBracket: function(e) {
                    return e === $r ? 1 : 0;
                },
                leftCurlyBracketOrSemicolon: function(e) {
                    return e === $r || e === Zr ? 1 : 0;
                },
                exclamationMarkOrSemicolon: function(e, t, n) {
                    return e === Jr && 33 === t.charCodeAt(n) || e === Zr ? 1 : 0;
                },
                semicolonIncluded: function(e) {
                    return e === Zr ? 2 : 0;
                }
            }
        }, ri = Ce.TYPE, ii = ni.mode, ai = ri.AtKeyword, oi = ri.Semicolon, si = ri.LeftCurlyBracket, li = ri.RightCurlyBracket;
        function ci(e) {
            return this.Raw(e, ii.leftCurlyBracketOrSemicolon, !0);
        }
        function ui() {
            for(var e, t = 1; e = this.scanner.lookupType(t); t++){
                if (e === li) return !0;
                if (e === si || e === ai) return !1;
            }
            return !1;
        }
        var hi = {
            name: "Atrule",
            structure: {
                name: String,
                prelude: [
                    "AtrulePrelude",
                    "Raw",
                    null
                ],
                block: [
                    "Block",
                    null
                ]
            },
            parse: function() {
                var e, t, n = this.scanner.tokenStart, r = null, i = null;
                switch(this.eat(ai), t = (e = this.scanner.substrToCursor(n + 1)).toLowerCase(), this.scanner.skipSC(), !1 === this.scanner.eof && this.scanner.tokenType !== si && this.scanner.tokenType !== oi && (this.parseAtrulePrelude ? "AtrulePrelude" === (r = this.parseWithFallback(this.AtrulePrelude.bind(this, e), ci)).type && null === r.children.head && (r = null) : r = ci.call(this, this.scanner.tokenIndex), this.scanner.skipSC()), this.scanner.tokenType){
                    case oi:
                        this.scanner.next();
                        break;
                    case si:
                        i = this.atrule.hasOwnProperty(t) && "function" == typeof this.atrule[t].block ? this.atrule[t].block.call(this) : this.Block(ui.call(this));
                }
                return {
                    type: "Atrule",
                    loc: this.getLocation(n, this.scanner.tokenStart),
                    name: e,
                    prelude: r,
                    block: i
                };
            },
            generate: function(e) {
                this.chunk("@"), this.chunk(e.name), null !== e.prelude && (this.chunk(" "), this.node(e.prelude)), e.block ? this.node(e.block) : this.chunk(";");
            },
            walkContext: "atrule"
        }, pi = Ce.TYPE, di = pi.Semicolon, mi = pi.LeftCurlyBracket, gi = {
            name: "AtrulePrelude",
            structure: {
                children: [
                    []
                ]
            },
            parse: function(e) {
                var t = null;
                return null !== e && (e = e.toLowerCase()), this.scanner.skipSC(), t = this.atrule.hasOwnProperty(e) && "function" == typeof this.atrule[e].prelude ? this.atrule[e].prelude.call(this) : this.readSequence(this.scope.AtrulePrelude), this.scanner.skipSC(), !0 !== this.scanner.eof && this.scanner.tokenType !== mi && this.scanner.tokenType !== di && this.error("Semicolon or block is expected"), null === t && (t = this.createList()), {
                    type: "AtrulePrelude",
                    loc: this.getLocationFromList(t),
                    children: t
                };
            },
            generate: function(e) {
                this.children(e);
            },
            walkContext: "atrulePrelude"
        }, fi = Ce.TYPE, bi = fi.Ident, yi = fi.String, ki = fi.Colon, vi = fi.LeftSquareBracket, xi = fi.RightSquareBracket;
        function wi() {
            this.scanner.eof && this.error("Unexpected end of input");
            var e = this.scanner.tokenStart, t = !1, n = !0;
            return this.scanner.isDelim(42) ? (t = !0, n = !1, this.scanner.next()) : this.scanner.isDelim(124) || this.eat(bi), this.scanner.isDelim(124) ? 61 !== this.scanner.source.charCodeAt(this.scanner.tokenStart + 1) ? (this.scanner.next(), this.eat(bi)) : t && this.error("Identifier is expected", this.scanner.tokenEnd) : t && this.error("Vertical line is expected"), n && this.scanner.tokenType === ki && (this.scanner.next(), this.eat(bi)), {
                type: "Identifier",
                loc: this.getLocation(e, this.scanner.tokenStart),
                name: this.scanner.substrToCursor(e)
            };
        }
        function Si() {
            var e = this.scanner.tokenStart, t = this.scanner.source.charCodeAt(e);
            return 61 !== t && 126 !== t && 94 !== t && 36 !== t && 42 !== t && 124 !== t && this.error("Attribute selector (=, ~=, ^=, $=, *=, |=) is expected"), this.scanner.next(), 61 !== t && (this.scanner.isDelim(61) || this.error("Equal sign is expected"), this.scanner.next()), this.scanner.substrToCursor(e);
        }
        var Ci = {
            name: "AttributeSelector",
            structure: {
                name: "Identifier",
                matcher: [
                    String,
                    null
                ],
                value: [
                    "String",
                    "Identifier",
                    null
                ],
                flags: [
                    String,
                    null
                ]
            },
            parse: function() {
                var e, t = this.scanner.tokenStart, n = null, r = null, i = null;
                return this.eat(vi), this.scanner.skipSC(), e = wi.call(this), this.scanner.skipSC(), this.scanner.tokenType !== xi && (this.scanner.tokenType !== bi && (n = Si.call(this), this.scanner.skipSC(), r = this.scanner.tokenType === yi ? this.String() : this.Identifier(), this.scanner.skipSC()), this.scanner.tokenType === bi && (i = this.scanner.getTokenValue(), this.scanner.next(), this.scanner.skipSC())), this.eat(xi), {
                    type: "AttributeSelector",
                    loc: this.getLocation(t, this.scanner.tokenStart),
                    name: e,
                    matcher: n,
                    value: r,
                    flags: i
                };
            },
            generate: function(e) {
                var t = " ";
                this.chunk("["), this.node(e.name), null !== e.matcher && (this.chunk(e.matcher), null !== e.value && (this.node(e.value), "String" === e.value.type && (t = ""))), null !== e.flags && (this.chunk(t), this.chunk(e.flags)), this.chunk("]");
            }
        }, zi = Ce.TYPE, Ai = ni.mode, Pi = zi.WhiteSpace, Ti = zi.Comment, Li = zi.Semicolon, Ei = zi.AtKeyword, Di = zi.LeftCurlyBracket, Oi = zi.RightCurlyBracket;
        function Bi(e) {
            return this.Raw(e, null, !0);
        }
        function Ii() {
            return this.parseWithFallback(this.Rule, Bi);
        }
        function Ni(e) {
            return this.Raw(e, Ai.semicolonIncluded, !0);
        }
        function Ri() {
            if (this.scanner.tokenType === Li) return Ni.call(this, this.scanner.tokenIndex);
            var e = this.parseWithFallback(this.Declaration, Ni);
            return this.scanner.tokenType === Li && this.scanner.next(), e;
        }
        var Mi = {
            name: "Block",
            structure: {
                children: [
                    [
                        "Atrule",
                        "Rule",
                        "Declaration"
                    ]
                ]
            },
            parse: function(e) {
                var t = e ? Ri : Ii, n = this.scanner.tokenStart, r = this.createList();
                this.eat(Di);
                e: for(; !this.scanner.eof;)switch(this.scanner.tokenType){
                    case Oi:
                        break e;
                    case Pi:
                    case Ti:
                        this.scanner.next();
                        break;
                    case Ei:
                        r.push(this.parseWithFallback(this.Atrule, Bi));
                        break;
                    default:
                        r.push(t.call(this));
                }
                return this.scanner.eof || this.eat(Oi), {
                    type: "Block",
                    loc: this.getLocation(n, this.scanner.tokenStart),
                    children: r
                };
            },
            generate: function(e46) {
                this.chunk("{"), this.children(e46, function(e) {
                    "Declaration" === e.type && this.chunk(";");
                }), this.chunk("}");
            },
            walkContext: "block"
        }, ji = Ce.TYPE, _i = ji.LeftSquareBracket, Fi = ji.RightSquareBracket, Wi = {
            name: "Brackets",
            structure: {
                children: [
                    []
                ]
            },
            parse: function(e, t) {
                var n, r = this.scanner.tokenStart;
                return this.eat(_i), n = e.call(this, t), this.scanner.eof || this.eat(Fi), {
                    type: "Brackets",
                    loc: this.getLocation(r, this.scanner.tokenStart),
                    children: n
                };
            },
            generate: function(e) {
                this.chunk("["), this.children(e), this.chunk("]");
            }
        }, qi = Ce.TYPE.CDC, Yi = {
            name: "CDC",
            structure: [],
            parse: function() {
                var e = this.scanner.tokenStart;
                return this.eat(qi), {
                    type: "CDC",
                    loc: this.getLocation(e, this.scanner.tokenStart)
                };
            },
            generate: function() {
                this.chunk("--\x3e");
            }
        }, Ui = Ce.TYPE.CDO, Hi = {
            name: "CDO",
            structure: [],
            parse: function() {
                var e = this.scanner.tokenStart;
                return this.eat(Ui), {
                    type: "CDO",
                    loc: this.getLocation(e, this.scanner.tokenStart)
                };
            },
            generate: function() {
                this.chunk("\x3c!--");
            }
        }, Vi = Ce.TYPE.Ident, Ki = {
            name: "ClassSelector",
            structure: {
                name: String
            },
            parse: function() {
                return this.scanner.isDelim(46) || this.error("Full stop is expected"), this.scanner.next(), {
                    type: "ClassSelector",
                    loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),
                    name: this.consume(Vi)
                };
            },
            generate: function(e) {
                this.chunk("."), this.chunk(e.name);
            }
        }, Gi = Ce.TYPE.Ident, Qi = {
            name: "Combinator",
            structure: {
                name: String
            },
            parse: function() {
                var e = this.scanner.tokenStart;
                switch(this.scanner.source.charCodeAt(this.scanner.tokenStart)){
                    case 62:
                    case 43:
                    case 126:
                        this.scanner.next();
                        break;
                    case 47:
                        this.scanner.next(), this.scanner.tokenType === Gi && !1 !== this.scanner.lookupValue(0, "deep") || this.error("Identifier `deep` is expected"), this.scanner.next(), this.scanner.isDelim(47) || this.error("Solidus is expected"), this.scanner.next();
                        break;
                    default:
                        this.error("Combinator is expected");
                }
                return {
                    type: "Combinator",
                    loc: this.getLocation(e, this.scanner.tokenStart),
                    name: this.scanner.substrToCursor(e)
                };
            },
            generate: function(e) {
                this.chunk(e.name);
            }
        }, Xi = Ce.TYPE.Comment, Zi = {
            name: "Comment",
            structure: {
                value: String
            },
            parse: function() {
                var e = this.scanner.tokenStart, t = this.scanner.tokenEnd;
                return this.eat(Xi), t - e + 2 >= 2 && 42 === this.scanner.source.charCodeAt(t - 2) && 47 === this.scanner.source.charCodeAt(t - 1) && (t -= 2), {
                    type: "Comment",
                    loc: this.getLocation(e, this.scanner.tokenStart),
                    value: this.scanner.source.substring(e + 2, t)
                };
            },
            generate: function(e) {
                this.chunk("/*"), this.chunk(e.value), this.chunk("*/");
            }
        }, $i = ae.isCustomProperty, Ji = Ce.TYPE, ea = ni.mode, ta = Ji.Ident, na = Ji.Hash, ra = Ji.Colon, ia = Ji.Semicolon, aa = Ji.Delim, oa = Ji.WhiteSpace;
        function sa(e) {
            return this.Raw(e, ea.exclamationMarkOrSemicolon, !0);
        }
        function la(e) {
            return this.Raw(e, ea.exclamationMarkOrSemicolon, !1);
        }
        function ca() {
            var e = this.scanner.tokenIndex, t = this.Value();
            return "Raw" !== t.type && !1 === this.scanner.eof && this.scanner.tokenType !== ia && !1 === this.scanner.isDelim(33) && !1 === this.scanner.isBalanceEdge(e) && this.error(), t;
        }
        var ua = {
            name: "Declaration",
            structure: {
                important: [
                    Boolean,
                    String
                ],
                property: String,
                value: [
                    "Value",
                    "Raw"
                ]
            },
            parse: function() {
                var e, t = this.scanner.tokenStart, n = this.scanner.tokenIndex, r = ha.call(this), i = $i(r), a = i ? this.parseCustomProperty : this.parseValue, o = i ? la : sa, s = !1;
                this.scanner.skipSC(), this.eat(ra);
                const l = this.scanner.tokenIndex;
                if (i || this.scanner.skipSC(), e = a ? this.parseWithFallback(ca, o) : o.call(this, this.scanner.tokenIndex), i && "Value" === e.type && e.children.isEmpty()) {
                    for(let t32 = l - this.scanner.tokenIndex; t32 <= 0; t32++)if (this.scanner.lookupType(t32) === oa) {
                        e.children.appendData({
                            type: "WhiteSpace",
                            loc: null,
                            value: " "
                        });
                        break;
                    }
                }
                return this.scanner.isDelim(33) && (s = pa.call(this), this.scanner.skipSC()), !1 === this.scanner.eof && this.scanner.tokenType !== ia && !1 === this.scanner.isBalanceEdge(n) && this.error(), {
                    type: "Declaration",
                    loc: this.getLocation(t, this.scanner.tokenStart),
                    important: s,
                    property: r,
                    value: e
                };
            },
            generate: function(e) {
                this.chunk(e.property), this.chunk(":"), this.node(e.value), e.important && this.chunk(!0 === e.important ? "!important" : "!" + e.important);
            },
            walkContext: "declaration"
        };
        function ha() {
            var e = this.scanner.tokenStart;
            if (this.scanner.tokenType === aa) switch(this.scanner.source.charCodeAt(this.scanner.tokenStart)){
                case 42:
                case 36:
                case 43:
                case 35:
                case 38:
                    this.scanner.next();
                    break;
                case 47:
                    this.scanner.next(), this.scanner.isDelim(47) && this.scanner.next();
            }
            return this.scanner.tokenType === na ? this.eat(na) : this.eat(ta), this.scanner.substrToCursor(e);
        }
        function pa() {
            this.eat(aa), this.scanner.skipSC();
            var e = this.consume(ta);
            return "important" === e || e;
        }
        var da = Ce.TYPE, ma = ni.mode, ga = da.WhiteSpace, fa = da.Comment, ba = da.Semicolon;
        function ya(e) {
            return this.Raw(e, ma.semicolonIncluded, !0);
        }
        var ka = {
            name: "DeclarationList",
            structure: {
                children: [
                    [
                        "Declaration"
                    ]
                ]
            },
            parse: function() {
                for(var e = this.createList(); !this.scanner.eof;)switch(this.scanner.tokenType){
                    case ga:
                    case fa:
                    case ba:
                        this.scanner.next();
                        break;
                    default:
                        e.push(this.parseWithFallback(this.Declaration, ya));
                }
                return {
                    type: "DeclarationList",
                    loc: this.getLocationFromList(e),
                    children: e
                };
            },
            generate: function(e47) {
                this.children(e47, function(e) {
                    "Declaration" === e.type && this.chunk(";");
                });
            }
        }, va = M.consumeNumber, xa = Ce.TYPE.Dimension, wa = {
            name: "Dimension",
            structure: {
                value: String,
                unit: String
            },
            parse: function() {
                var e = this.scanner.tokenStart, t = va(this.scanner.source, e);
                return this.eat(xa), {
                    type: "Dimension",
                    loc: this.getLocation(e, this.scanner.tokenStart),
                    value: this.scanner.source.substring(e, t),
                    unit: this.scanner.source.substring(t, this.scanner.tokenStart)
                };
            },
            generate: function(e) {
                this.chunk(e.value), this.chunk(e.unit);
            }
        }, Sa = Ce.TYPE.RightParenthesis, Ca = {
            name: "Function",
            structure: {
                name: String,
                children: [
                    []
                ]
            },
            parse: function(e, t) {
                var n, r = this.scanner.tokenStart, i = this.consumeFunctionName(), a = i.toLowerCase();
                return n = t.hasOwnProperty(a) ? t[a].call(this, t) : e.call(this, t), this.scanner.eof || this.eat(Sa), {
                    type: "Function",
                    loc: this.getLocation(r, this.scanner.tokenStart),
                    name: i,
                    children: n
                };
            },
            generate: function(e) {
                this.chunk(e.name), this.chunk("("), this.children(e), this.chunk(")");
            },
            walkContext: "function"
        }, za = Ce.TYPE.Hash, Aa = {
            name: "Hash",
            structure: {
                value: String
            },
            parse: function() {
                var e = this.scanner.tokenStart;
                return this.eat(za), {
                    type: "Hash",
                    loc: this.getLocation(e, this.scanner.tokenStart),
                    value: this.scanner.substrToCursor(e + 1)
                };
            },
            generate: function(e) {
                this.chunk("#"), this.chunk(e.value);
            }
        }, Pa = Ce.TYPE.Ident, Ta = {
            name: "Identifier",
            structure: {
                name: String
            },
            parse: function() {
                return {
                    type: "Identifier",
                    loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
                    name: this.consume(Pa)
                };
            },
            generate: function(e) {
                this.chunk(e.name);
            }
        }, La = Ce.TYPE.Hash, Ea = {
            name: "IdSelector",
            structure: {
                name: String
            },
            parse: function() {
                var e = this.scanner.tokenStart;
                return this.eat(La), {
                    type: "IdSelector",
                    loc: this.getLocation(e, this.scanner.tokenStart),
                    name: this.scanner.substrToCursor(e + 1)
                };
            },
            generate: function(e) {
                this.chunk("#"), this.chunk(e.name);
            }
        }, Da = Ce.TYPE, Oa = Da.Ident, Ba = Da.Number, Ia = Da.Dimension, Na = Da.LeftParenthesis, Ra = Da.RightParenthesis, Ma = Da.Colon, ja = Da.Delim, _a = {
            name: "MediaFeature",
            structure: {
                name: String,
                value: [
                    "Identifier",
                    "Number",
                    "Dimension",
                    "Ratio",
                    null
                ]
            },
            parse: function() {
                var e, t = this.scanner.tokenStart, n = null;
                if (this.eat(Na), this.scanner.skipSC(), e = this.consume(Oa), this.scanner.skipSC(), this.scanner.tokenType !== Ra) {
                    switch(this.eat(Ma), this.scanner.skipSC(), this.scanner.tokenType){
                        case Ba:
                            n = this.lookupNonWSType(1) === ja ? this.Ratio() : this.Number();
                            break;
                        case Ia:
                            n = this.Dimension();
                            break;
                        case Oa:
                            n = this.Identifier();
                            break;
                        default:
                            this.error("Number, dimension, ratio or identifier is expected");
                    }
                    this.scanner.skipSC();
                }
                return this.eat(Ra), {
                    type: "MediaFeature",
                    loc: this.getLocation(t, this.scanner.tokenStart),
                    name: e,
                    value: n
                };
            },
            generate: function(e) {
                this.chunk("("), this.chunk(e.name), null !== e.value && (this.chunk(":"), this.node(e.value)), this.chunk(")");
            }
        }, Fa = Ce.TYPE, Wa = Fa.WhiteSpace, qa = Fa.Comment, Ya = Fa.Ident, Ua = Fa.LeftParenthesis, Ha = {
            name: "MediaQuery",
            structure: {
                children: [
                    [
                        "Identifier",
                        "MediaFeature",
                        "WhiteSpace"
                    ]
                ]
            },
            parse: function() {
                this.scanner.skipSC();
                var e = this.createList(), t = null, n = null;
                e: for(; !this.scanner.eof;){
                    switch(this.scanner.tokenType){
                        case qa:
                            this.scanner.next();
                            continue;
                        case Wa:
                            n = this.WhiteSpace();
                            continue;
                        case Ya:
                            t = this.Identifier();
                            break;
                        case Ua:
                            t = this.MediaFeature();
                            break;
                        default:
                            break e;
                    }
                    null !== n && (e.push(n), n = null), e.push(t);
                }
                return null === t && this.error("Identifier or parenthesis is expected"), {
                    type: "MediaQuery",
                    loc: this.getLocationFromList(e),
                    children: e
                };
            },
            generate: function(e) {
                this.children(e);
            }
        }, Va = Ce.TYPE.Comma, Ka = {
            name: "MediaQueryList",
            structure: {
                children: [
                    [
                        "MediaQuery"
                    ]
                ]
            },
            parse: function(e) {
                var t = this.createList();
                for(this.scanner.skipSC(); !this.scanner.eof && (t.push(this.MediaQuery(e)), this.scanner.tokenType === Va);)this.scanner.next();
                return {
                    type: "MediaQueryList",
                    loc: this.getLocationFromList(t),
                    children: t
                };
            },
            generate: function(e) {
                this.children(e, function() {
                    this.chunk(",");
                });
            }
        }, Ga = Ce.TYPE.Number, Qa = {
            name: "Number",
            structure: {
                value: String
            },
            parse: function() {
                return {
                    type: "Number",
                    loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
                    value: this.consume(Ga)
                };
            },
            generate: function(e) {
                this.chunk(e.value);
            }
        }, Xa = {
            name: "Operator",
            structure: {
                value: String
            },
            parse: function() {
                var e = this.scanner.tokenStart;
                return this.scanner.next(), {
                    type: "Operator",
                    loc: this.getLocation(e, this.scanner.tokenStart),
                    value: this.scanner.substrToCursor(e)
                };
            },
            generate: function(e) {
                this.chunk(e.value);
            }
        }, Za = Ce.TYPE, $a = Za.LeftParenthesis, Ja = Za.RightParenthesis, eo = {
            name: "Parentheses",
            structure: {
                children: [
                    []
                ]
            },
            parse: function(e, t) {
                var n, r = this.scanner.tokenStart;
                return this.eat($a), n = e.call(this, t), this.scanner.eof || this.eat(Ja), {
                    type: "Parentheses",
                    loc: this.getLocation(r, this.scanner.tokenStart),
                    children: n
                };
            },
            generate: function(e) {
                this.chunk("("), this.children(e), this.chunk(")");
            }
        }, to = M.consumeNumber, no = Ce.TYPE.Percentage, ro = {
            name: "Percentage",
            structure: {
                value: String
            },
            parse: function() {
                var e = this.scanner.tokenStart, t = to(this.scanner.source, e);
                return this.eat(no), {
                    type: "Percentage",
                    loc: this.getLocation(e, this.scanner.tokenStart),
                    value: this.scanner.source.substring(e, t)
                };
            },
            generate: function(e) {
                this.chunk(e.value), this.chunk("%");
            }
        }, io = Ce.TYPE, ao = io.Ident, oo = io.Function, so = io.Colon, lo = io.RightParenthesis, co = {
            name: "PseudoClassSelector",
            structure: {
                name: String,
                children: [
                    [
                        "Raw"
                    ],
                    null
                ]
            },
            parse: function() {
                var e, t, n = this.scanner.tokenStart, r = null;
                return this.eat(so), this.scanner.tokenType === oo ? (t = (e = this.consumeFunctionName()).toLowerCase(), this.pseudo.hasOwnProperty(t) ? (this.scanner.skipSC(), r = this.pseudo[t].call(this), this.scanner.skipSC()) : (r = this.createList()).push(this.Raw(this.scanner.tokenIndex, null, !1)), this.eat(lo)) : e = this.consume(ao), {
                    type: "PseudoClassSelector",
                    loc: this.getLocation(n, this.scanner.tokenStart),
                    name: e,
                    children: r
                };
            },
            generate: function(e) {
                this.chunk(":"), this.chunk(e.name), null !== e.children && (this.chunk("("), this.children(e), this.chunk(")"));
            },
            walkContext: "function"
        }, uo = Ce.TYPE, ho = uo.Ident, po = uo.Function, mo = uo.Colon, go = uo.RightParenthesis, fo = {
            name: "PseudoElementSelector",
            structure: {
                name: String,
                children: [
                    [
                        "Raw"
                    ],
                    null
                ]
            },
            parse: function() {
                var e, t, n = this.scanner.tokenStart, r = null;
                return this.eat(mo), this.eat(mo), this.scanner.tokenType === po ? (t = (e = this.consumeFunctionName()).toLowerCase(), this.pseudo.hasOwnProperty(t) ? (this.scanner.skipSC(), r = this.pseudo[t].call(this), this.scanner.skipSC()) : (r = this.createList()).push(this.Raw(this.scanner.tokenIndex, null, !1)), this.eat(go)) : e = this.consume(ho), {
                    type: "PseudoElementSelector",
                    loc: this.getLocation(n, this.scanner.tokenStart),
                    name: e,
                    children: r
                };
            },
            generate: function(e) {
                this.chunk("::"), this.chunk(e.name), null !== e.children && (this.chunk("("), this.children(e), this.chunk(")"));
            },
            walkContext: "function"
        }, bo = Ce.isDigit, yo = Ce.TYPE, ko = yo.Number, vo = yo.Delim;
        function xo() {
            this.scanner.skipWS();
            for(var e = this.consume(ko), t = 0; t < e.length; t++){
                var n = e.charCodeAt(t);
                bo(n) || 46 === n || this.error("Unsigned number is expected", this.scanner.tokenStart - e.length + t);
            }
            return 0 === Number(e) && this.error("Zero number is not allowed", this.scanner.tokenStart - e.length), e;
        }
        var wo = {
            name: "Ratio",
            structure: {
                left: String,
                right: String
            },
            parse: function() {
                var e, t = this.scanner.tokenStart, n = xo.call(this);
                return this.scanner.skipWS(), this.scanner.isDelim(47) || this.error("Solidus is expected"), this.eat(vo), e = xo.call(this), {
                    type: "Ratio",
                    loc: this.getLocation(t, this.scanner.tokenStart),
                    left: n,
                    right: e
                };
            },
            generate: function(e) {
                this.chunk(e.left), this.chunk("/"), this.chunk(e.right);
            }
        }, So = Ce.TYPE, Co = ni.mode, zo = So.LeftCurlyBracket;
        function Ao(e) {
            return this.Raw(e, Co.leftCurlyBracket, !0);
        }
        function Po() {
            var e = this.SelectorList();
            return "Raw" !== e.type && !1 === this.scanner.eof && this.scanner.tokenType !== zo && this.error(), e;
        }
        var To = {
            name: "Rule",
            structure: {
                prelude: [
                    "SelectorList",
                    "Raw"
                ],
                block: [
                    "Block"
                ]
            },
            parse: function() {
                var e, t, n = this.scanner.tokenIndex, r = this.scanner.tokenStart;
                return e = this.parseRulePrelude ? this.parseWithFallback(Po, Ao) : Ao.call(this, n), t = this.Block(!0), {
                    type: "Rule",
                    loc: this.getLocation(r, this.scanner.tokenStart),
                    prelude: e,
                    block: t
                };
            },
            generate: function(e) {
                this.node(e.prelude), this.node(e.block);
            },
            walkContext: "rule"
        }, Lo = Ce.TYPE.Comma, Eo = {
            name: "SelectorList",
            structure: {
                children: [
                    [
                        "Selector",
                        "Raw"
                    ]
                ]
            },
            parse: function() {
                for(var e = this.createList(); !this.scanner.eof && (e.push(this.Selector()), this.scanner.tokenType === Lo);)this.scanner.next();
                return {
                    type: "SelectorList",
                    loc: this.getLocationFromList(e),
                    children: e
                };
            },
            generate: function(e) {
                this.children(e, function() {
                    this.chunk(",");
                });
            },
            walkContext: "selector"
        }, Do = Ce.TYPE.String, Oo = {
            name: "String",
            structure: {
                value: String
            },
            parse: function() {
                return {
                    type: "String",
                    loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
                    value: this.consume(Do)
                };
            },
            generate: function(e) {
                this.chunk(e.value);
            }
        }, Bo = Ce.TYPE, Io = Bo.WhiteSpace, No = Bo.Comment, Ro = Bo.AtKeyword, Mo = Bo.CDO, jo = Bo.CDC;
        function _o(e) {
            return this.Raw(e, null, !1);
        }
        var Fo = {
            name: "StyleSheet",
            structure: {
                children: [
                    [
                        "Comment",
                        "CDO",
                        "CDC",
                        "Atrule",
                        "Rule",
                        "Raw"
                    ]
                ]
            },
            parse: function() {
                for(var e, t = this.scanner.tokenStart, n = this.createList(); !this.scanner.eof;){
                    switch(this.scanner.tokenType){
                        case Io:
                            this.scanner.next();
                            continue;
                        case No:
                            if (33 !== this.scanner.source.charCodeAt(this.scanner.tokenStart + 2)) {
                                this.scanner.next();
                                continue;
                            }
                            e = this.Comment();
                            break;
                        case Mo:
                            e = this.CDO();
                            break;
                        case jo:
                            e = this.CDC();
                            break;
                        case Ro:
                            e = this.parseWithFallback(this.Atrule, _o);
                            break;
                        default:
                            e = this.parseWithFallback(this.Rule, _o);
                    }
                    n.push(e);
                }
                return {
                    type: "StyleSheet",
                    loc: this.getLocation(t, this.scanner.tokenStart),
                    children: n
                };
            },
            generate: function(e) {
                this.children(e);
            },
            walkContext: "stylesheet"
        }, Wo = Ce.TYPE.Ident;
        function qo() {
            this.scanner.tokenType !== Wo && !1 === this.scanner.isDelim(42) && this.error("Identifier or asterisk is expected"), this.scanner.next();
        }
        var Yo = {
            name: "TypeSelector",
            structure: {
                name: String
            },
            parse: function() {
                var e = this.scanner.tokenStart;
                return this.scanner.isDelim(124) ? (this.scanner.next(), qo.call(this)) : (qo.call(this), this.scanner.isDelim(124) && (this.scanner.next(), qo.call(this))), {
                    type: "TypeSelector",
                    loc: this.getLocation(e, this.scanner.tokenStart),
                    name: this.scanner.substrToCursor(e)
                };
            },
            generate: function(e) {
                this.chunk(e.name);
            }
        }, Uo = Ce.isHexDigit, Ho = Ce.cmpChar, Vo = Ce.TYPE, Ko = Ce.NAME, Go = Vo.Ident, Qo = Vo.Number, Xo = Vo.Dimension;
        function Zo(e, t) {
            for(var n = this.scanner.tokenStart + e, r = 0; n < this.scanner.tokenEnd; n++){
                var i = this.scanner.source.charCodeAt(n);
                if (45 === i && t && 0 !== r) return 0 === Zo.call(this, e + r + 1, !1) && this.error(), -1;
                Uo(i) || this.error(t && 0 !== r ? "HyphenMinus" + (r < 6 ? " or hex digit" : "") + " is expected" : r < 6 ? "Hex digit is expected" : "Unexpected input", n), ++r > 6 && this.error("Too many hex digits", n);
            }
            return this.scanner.next(), r;
        }
        function $o(e) {
            for(var t = 0; this.scanner.isDelim(63);)++t > e && this.error("Too many question marks"), this.scanner.next();
        }
        function Jo(e) {
            this.scanner.source.charCodeAt(this.scanner.tokenStart) !== e && this.error(Ko[e] + " is expected");
        }
        function es() {
            var e = 0;
            return this.scanner.isDelim(43) ? (this.scanner.next(), this.scanner.tokenType === Go ? void ((e = Zo.call(this, 0, !0)) > 0 && $o.call(this, 6 - e)) : this.scanner.isDelim(63) ? (this.scanner.next(), void $o.call(this, 5)) : void this.error("Hex digit or question mark is expected")) : this.scanner.tokenType === Qo ? (Jo.call(this, 43), e = Zo.call(this, 1, !0), this.scanner.isDelim(63) ? void $o.call(this, 6 - e) : this.scanner.tokenType === Xo || this.scanner.tokenType === Qo ? (Jo.call(this, 45), void Zo.call(this, 1, !1)) : void 0) : this.scanner.tokenType === Xo ? (Jo.call(this, 43), void ((e = Zo.call(this, 1, !0)) > 0 && $o.call(this, 6 - e))) : void this.error();
        }
        var ts = {
            name: "UnicodeRange",
            structure: {
                value: String
            },
            parse: function() {
                var e = this.scanner.tokenStart;
                return Ho(this.scanner.source, e, 117) || this.error("U is expected"), Ho(this.scanner.source, e + 1, 43) || this.error("Plus sign is expected"), this.scanner.next(), es.call(this), {
                    type: "UnicodeRange",
                    loc: this.getLocation(e, this.scanner.tokenStart),
                    value: this.scanner.substrToCursor(e)
                };
            },
            generate: function(e) {
                this.chunk(e.value);
            }
        }, ns = Ce.isWhiteSpace, rs = Ce.cmpStr, is = Ce.TYPE, as = is.Function, os = is.Url, ss = is.RightParenthesis, ls = {
            name: "Url",
            structure: {
                value: [
                    "String",
                    "Raw"
                ]
            },
            parse: function() {
                var e, t = this.scanner.tokenStart;
                switch(this.scanner.tokenType){
                    case os:
                        for(var n = t + 4, r = this.scanner.tokenEnd - 1; n < r && ns(this.scanner.source.charCodeAt(n));)n++;
                        for(; n < r && ns(this.scanner.source.charCodeAt(r - 1));)r--;
                        e = {
                            type: "Raw",
                            loc: this.getLocation(n, r),
                            value: this.scanner.source.substring(n, r)
                        }, this.eat(os);
                        break;
                    case as:
                        rs(this.scanner.source, this.scanner.tokenStart, this.scanner.tokenEnd, "url(") || this.error("Function name must be `url`"), this.eat(as), this.scanner.skipSC(), e = this.String(), this.scanner.skipSC(), this.eat(ss);
                        break;
                    default:
                        this.error("Url or Function is expected");
                }
                return {
                    type: "Url",
                    loc: this.getLocation(t, this.scanner.tokenStart),
                    value: e
                };
            },
            generate: function(e) {
                this.chunk("url"), this.chunk("("), this.node(e.value), this.chunk(")");
            }
        }, cs = Ce.TYPE.WhiteSpace, us = Object.freeze({
            type: "WhiteSpace",
            loc: null,
            value: " "
        }), hs = {
            AnPlusB: Gr,
            Atrule: hi,
            AtrulePrelude: gi,
            AttributeSelector: Ci,
            Block: Mi,
            Brackets: Wi,
            CDC: Yi,
            CDO: Hi,
            ClassSelector: Ki,
            Combinator: Qi,
            Comment: Zi,
            Declaration: ua,
            DeclarationList: ka,
            Dimension: wa,
            Function: Ca,
            Hash: Aa,
            Identifier: Ta,
            IdSelector: Ea,
            MediaFeature: _a,
            MediaQuery: Ha,
            MediaQueryList: Ka,
            Nth: {
                name: "Nth",
                structure: {
                    nth: [
                        "AnPlusB",
                        "Identifier"
                    ],
                    selector: [
                        "SelectorList",
                        null
                    ]
                },
                parse: function(e) {
                    this.scanner.skipSC();
                    var t, n = this.scanner.tokenStart, r = n, i = null;
                    return t = this.scanner.lookupValue(0, "odd") || this.scanner.lookupValue(0, "even") ? this.Identifier() : this.AnPlusB(), this.scanner.skipSC(), e && this.scanner.lookupValue(0, "of") ? (this.scanner.next(), i = this.SelectorList(), this.needPositions && (r = this.getLastListNode(i.children).loc.end.offset)) : this.needPositions && (r = t.loc.end.offset), {
                        type: "Nth",
                        loc: this.getLocation(n, r),
                        nth: t,
                        selector: i
                    };
                },
                generate: function(e) {
                    this.node(e.nth), null !== e.selector && (this.chunk(" of "), this.node(e.selector));
                }
            },
            Number: Qa,
            Operator: Xa,
            Parentheses: eo,
            Percentage: ro,
            PseudoClassSelector: co,
            PseudoElementSelector: fo,
            Ratio: wo,
            Raw: ni,
            Rule: To,
            Selector: {
                name: "Selector",
                structure: {
                    children: [
                        [
                            "TypeSelector",
                            "IdSelector",
                            "ClassSelector",
                            "AttributeSelector",
                            "PseudoClassSelector",
                            "PseudoElementSelector",
                            "Combinator",
                            "WhiteSpace"
                        ]
                    ]
                },
                parse: function() {
                    var e = this.readSequence(this.scope.Selector);
                    return null === this.getFirstListNode(e) && this.error("Selector is expected"), {
                        type: "Selector",
                        loc: this.getLocationFromList(e),
                        children: e
                    };
                },
                generate: function(e) {
                    this.children(e);
                }
            },
            SelectorList: Eo,
            String: Oo,
            StyleSheet: Fo,
            TypeSelector: Yo,
            UnicodeRange: ts,
            Url: ls,
            Value: {
                name: "Value",
                structure: {
                    children: [
                        []
                    ]
                },
                parse: function() {
                    var e = this.scanner.tokenStart, t = this.readSequence(this.scope.Value);
                    return {
                        type: "Value",
                        loc: this.getLocation(e, this.scanner.tokenStart),
                        children: t
                    };
                },
                generate: function(e) {
                    this.children(e);
                }
            },
            WhiteSpace: {
                name: "WhiteSpace",
                structure: {
                    value: String
                },
                parse: function() {
                    return this.eat(cs), us;
                },
                generate: function(e) {
                    this.chunk(e.value);
                }
            }
        }, ps = {
            generic: !0,
            types: Nr.types,
            atrules: Nr.atrules,
            properties: Nr.properties,
            node: hs
        }, ds = Ce.cmpChar, ms = Ce.cmpStr, gs = Ce.TYPE, fs = gs.Ident, bs = gs.String, ys = gs.Number, ks = gs.Function, vs = gs.Url, xs = gs.Hash, ws = gs.Dimension, Ss = gs.Percentage, Cs = gs.LeftParenthesis, zs = gs.LeftSquareBracket, As = gs.Comma, Ps = gs.Delim, Ts = function(e) {
            switch(this.scanner.tokenType){
                case xs:
                    return this.Hash();
                case As:
                    return e.space = null, e.ignoreWSAfter = !0, this.Operator();
                case Cs:
                    return this.Parentheses(this.readSequence, e.recognizer);
                case zs:
                    return this.Brackets(this.readSequence, e.recognizer);
                case bs:
                    return this.String();
                case ws:
                    return this.Dimension();
                case Ss:
                    return this.Percentage();
                case ys:
                    return this.Number();
                case ks:
                    return ms(this.scanner.source, this.scanner.tokenStart, this.scanner.tokenEnd, "url(") ? this.Url() : this.Function(this.readSequence, e.recognizer);
                case vs:
                    return this.Url();
                case fs:
                    return ds(this.scanner.source, this.scanner.tokenStart, 117) && ds(this.scanner.source, this.scanner.tokenStart + 1, 43) ? this.UnicodeRange() : this.Identifier();
                case Ps:
                    var t = this.scanner.source.charCodeAt(this.scanner.tokenStart);
                    if (47 === t || 42 === t || 43 === t || 45 === t) return this.Operator();
                    35 === t && this.error("Hex or identifier is expected", this.scanner.tokenStart + 1);
            }
        }, Ls = {
            getNode: Ts
        }, Es = Ce.TYPE, Ds = Es.Delim, Os = Es.Ident, Bs = Es.Dimension, Is = Es.Percentage, Ns = Es.Number, Rs = Es.Hash, Ms = Es.Colon, js = Es.LeftSquareBracket;
        var _s = {
            getNode: function(e) {
                switch(this.scanner.tokenType){
                    case js:
                        return this.AttributeSelector();
                    case Rs:
                        return this.IdSelector();
                    case Ms:
                        return this.scanner.lookupType(1) === Ms ? this.PseudoElementSelector() : this.PseudoClassSelector();
                    case Os:
                        return this.TypeSelector();
                    case Ns:
                    case Is:
                        return this.Percentage();
                    case Bs:
                        46 === this.scanner.source.charCodeAt(this.scanner.tokenStart) && this.error("Identifier is expected", this.scanner.tokenStart + 1);
                        break;
                    case Ds:
                        switch(this.scanner.source.charCodeAt(this.scanner.tokenStart)){
                            case 43:
                            case 62:
                            case 126:
                                return e.space = null, e.ignoreWSAfter = !0, this.Combinator();
                            case 47:
                                return this.Combinator();
                            case 46:
                                return this.ClassSelector();
                            case 42:
                            case 124:
                                return this.TypeSelector();
                            case 35:
                                return this.IdSelector();
                        }
                }
            }
        }, Fs = Ce.TYPE, Ws = ni.mode, qs = Fs.Comma, Ys = Fs.WhiteSpace, Us = {
            AtrulePrelude: Ls,
            Selector: _s,
            Value: {
                getNode: Ts,
                expression: function() {
                    return this.createSingleNodeList(this.Raw(this.scanner.tokenIndex, null, !1));
                },
                var: function() {
                    var e = this.createList();
                    if (this.scanner.skipSC(), e.push(this.Identifier()), this.scanner.skipSC(), this.scanner.tokenType === qs) {
                        e.push(this.Operator());
                        const t = this.scanner.tokenIndex, n = this.parseCustomProperty ? this.Value(null) : this.Raw(this.scanner.tokenIndex, Ws.exclamationMarkOrSemicolon, !1);
                        if ("Value" === n.type && n.children.isEmpty()) {
                            for(let e48 = t - this.scanner.tokenIndex; e48 <= 0; e48++)if (this.scanner.lookupType(e48) === Ys) {
                                n.children.appendData({
                                    type: "WhiteSpace",
                                    loc: null,
                                    value: " "
                                });
                                break;
                            }
                        }
                        e.push(n);
                    }
                    return e;
                }
            }
        }, Hs = Ce.TYPE, Vs = Hs.String, Ks = Hs.Ident, Gs = Hs.Url, Qs = Hs.Function, Xs = Hs.LeftParenthesis, Zs = {
            parse: {
                prelude: function() {
                    var e = this.createList();
                    switch(this.scanner.skipSC(), this.scanner.tokenType){
                        case Vs:
                            e.push(this.String());
                            break;
                        case Gs:
                        case Qs:
                            e.push(this.Url());
                            break;
                        default:
                            this.error("String or url() is expected");
                    }
                    return this.lookupNonWSType(0) !== Ks && this.lookupNonWSType(0) !== Xs || (e.push(this.WhiteSpace()), e.push(this.MediaQueryList())), e;
                },
                block: null
            }
        }, $s = Ce.TYPE, Js = $s.WhiteSpace, el = $s.Comment, tl = $s.Ident, nl = $s.Function, rl = $s.Colon, il = $s.LeftParenthesis;
        function al() {
            return this.createSingleNodeList(this.Raw(this.scanner.tokenIndex, null, !1));
        }
        function ol() {
            return this.scanner.skipSC(), this.scanner.tokenType === tl && this.lookupNonWSType(1) === rl ? this.createSingleNodeList(this.Declaration()) : sl.call(this);
        }
        function sl() {
            var e, t = this.createList(), n = null;
            this.scanner.skipSC();
            e: for(; !this.scanner.eof;){
                switch(this.scanner.tokenType){
                    case Js:
                        n = this.WhiteSpace();
                        continue;
                    case el:
                        this.scanner.next();
                        continue;
                    case nl:
                        e = this.Function(al, this.scope.AtrulePrelude);
                        break;
                    case tl:
                        e = this.Identifier();
                        break;
                    case il:
                        e = this.Parentheses(ol, this.scope.AtrulePrelude);
                        break;
                    default:
                        break e;
                }
                null !== n && (t.push(n), n = null), t.push(e);
            }
            return t;
        }
        var ll, cl = {
            parse: function() {
                return this.createSingleNodeList(this.SelectorList());
            }
        }, ul = {
            parse: function() {
                return this.createSingleNodeList(this.Nth(!0));
            }
        }, hl = {
            parse: function() {
                return this.createSingleNodeList(this.Nth(!1));
            }
        }, pl = {
            parseContext: {
                default: "StyleSheet",
                stylesheet: "StyleSheet",
                atrule: "Atrule",
                atrulePrelude: function(e) {
                    return this.AtrulePrelude(e.atrule ? String(e.atrule) : null);
                },
                mediaQueryList: "MediaQueryList",
                mediaQuery: "MediaQuery",
                rule: "Rule",
                selectorList: "SelectorList",
                selector: "Selector",
                block: function() {
                    return this.Block(!0);
                },
                declarationList: "DeclarationList",
                declaration: "Declaration",
                value: "Value"
            },
            scope: Us,
            atrule: {
                "font-face": {
                    parse: {
                        prelude: null,
                        block: function() {
                            return this.Block(!0);
                        }
                    }
                },
                import: Zs,
                media: {
                    parse: {
                        prelude: function() {
                            return this.createSingleNodeList(this.MediaQueryList());
                        },
                        block: function() {
                            return this.Block(!1);
                        }
                    }
                },
                page: {
                    parse: {
                        prelude: function() {
                            return this.createSingleNodeList(this.SelectorList());
                        },
                        block: function() {
                            return this.Block(!0);
                        }
                    }
                },
                supports: {
                    parse: {
                        prelude: function() {
                            var e = sl.call(this);
                            return null === this.getFirstListNode(e) && this.error("Condition is expected"), e;
                        },
                        block: function() {
                            return this.Block(!1);
                        }
                    }
                }
            },
            pseudo: {
                dir: {
                    parse: function() {
                        return this.createSingleNodeList(this.Identifier());
                    }
                },
                has: {
                    parse: function() {
                        return this.createSingleNodeList(this.SelectorList());
                    }
                },
                lang: {
                    parse: function() {
                        return this.createSingleNodeList(this.Identifier());
                    }
                },
                matches: cl,
                not: cl,
                "nth-child": ul,
                "nth-last-child": ul,
                "nth-last-of-type": hl,
                "nth-of-type": hl,
                slotted: {
                    parse: function() {
                        return this.createSingleNodeList(this.Selector());
                    }
                }
            },
            node: hs
        }, dl = {
            node: hs
        }, ml = {
            version: "1.1.3"
        }, gl = (ll = Object.freeze({
            __proto__: null,
            version: "1.1.3",
            default: ml
        })) && ll.default || ll;
        var fl = Ir(function() {
            for(var e = {
            }, t = 0; t < arguments.length; t++){
                var n = arguments[t];
                for(var r in n)e[r] = n[r];
            }
            return e;
        }(ps, pl, dl)), bl = gl.version;
        return fl.version = bl, fl;
    });
})($a8848f9916d99690$var$csstree_min);
var $a8848f9916d99690$var$cssTools = {
};
var $a8848f9916d99690$var$stable$3 = {
    exports: {
    }
};
(function(module, exports) {
    (function(global, factory) {
        module.exports = factory();
    })($a8848f9916d99690$var$commonjsGlobal, function() {
        var stable = function(arr, comp) {
            return exec(arr.slice(), comp);
        };
        stable.inplace = function(arr, comp) {
            var result = exec(arr, comp);
            if (result !== arr) pass(result, null, arr.length, arr);
            return arr;
        };
        function exec(arr, comp) {
            if (typeof comp !== "function") comp = function(a, b) {
                return String(a).localeCompare(b);
            };
            var len = arr.length;
            if (len <= 1) return arr;
            var buffer = new Array(len);
            for(var chk = 1; chk < len; chk *= 2){
                pass(arr, comp, chk, buffer);
                var tmp = arr;
                arr = buffer;
                buffer = tmp;
            }
            return arr;
        }
        var pass = function(arr, comp, chk, result) {
            var len = arr.length;
            var i = 0;
            var dbl = chk * 2;
            var l, r, e;
            var li, ri;
            for(l = 0; l < len; l += dbl){
                r = l + chk;
                e = r + chk;
                if (r > len) r = len;
                if (e > len) e = len;
                li = l;
                ri = r;
                while(true){
                    if (li < r && ri < e) {
                        if (comp(arr[li], arr[ri]) <= 0) result[i++] = arr[li++];
                        else result[i++] = arr[ri++];
                    } else if (li < r) result[i++] = arr[li++];
                    else if (ri < e) result[i++] = arr[ri++];
                    else break;
                }
            }
        };
        return stable;
    });
})($a8848f9916d99690$var$stable$3);
var $a8848f9916d99690$var$specificity$4 = function specificity(simpleSelector) {
    var A = 0;
    var B = 0;
    var C = 0;
    simpleSelector.children.each(function walk(node) {
        switch(node.type){
            case "SelectorList":
            case "Selector":
                node.children.each(walk);
                break;
            case "IdSelector":
                A++;
                break;
            case "ClassSelector":
            case "AttributeSelector":
                B++;
                break;
            case "PseudoClassSelector":
                switch(node.name.toLowerCase()){
                    case "not":
                        node.children.each(walk);
                        break;
                    case "before":
                    case "after":
                    case "first-line":
                    case "first-letter":
                        C++;
                        break;
                    default:
                        B++;
                }
                break;
            case "PseudoElementSelector":
                C++;
                break;
            case "TypeSelector":
                if (node.name.charAt(node.name.length - 1) !== "*") C++;
                break;
        }
    });
    return [
        A,
        B,
        C
    ];
};
var $a8848f9916d99690$var$csstree$5 = $a8848f9916d99690$var$csstree_min.exports, $a8848f9916d99690$var$List$6 = $a8848f9916d99690$var$csstree$5.List, $a8848f9916d99690$var$stable$2 = $a8848f9916d99690$var$stable$3.exports, $a8848f9916d99690$var$specificity$3 = $a8848f9916d99690$var$specificity$4;
function $a8848f9916d99690$var$flattenToSelectors(cssAst) {
    var selectors = [];
    $a8848f9916d99690$var$csstree$5.walk(cssAst, {
        visit: "Rule",
        enter: function(node) {
            if (node.type !== "Rule") return;
            var atrule = this.atrule;
            var rule = node;
            node.prelude.children.each(function(selectorNode, selectorItem) {
                var selector = {
                    item: selectorItem,
                    atrule: atrule,
                    rule: rule,
                    pseudos: []
                };
                selectorNode.children.each(function(selectorChildNode, selectorChildItem, selectorChildList) {
                    if (selectorChildNode.type === "PseudoClassSelector" || selectorChildNode.type === "PseudoElementSelector") selector.pseudos.push({
                        item: selectorChildItem,
                        list: selectorChildList
                    });
                });
                selectors.push(selector);
            });
        }
    });
    return selectors;
}
function $a8848f9916d99690$var$filterByMqs(selectors, useMqs) {
    return selectors.filter(function(selector) {
        if (selector.atrule === null) return ~useMqs.indexOf("");
        var mqName = selector.atrule.name;
        var mqStr = mqName;
        if (selector.atrule.expression && selector.atrule.expression.children.first().type === "MediaQueryList") {
            var mqExpr = $a8848f9916d99690$var$csstree$5.generate(selector.atrule.expression);
            mqStr = [
                mqName,
                mqExpr
            ].join(" ");
        }
        return ~useMqs.indexOf(mqStr);
    });
}
function $a8848f9916d99690$var$filterByPseudos(selectors, usePseudos) {
    return selectors.filter(function(selector) {
        var pseudoSelectorsStr = $a8848f9916d99690$var$csstree$5.generate({
            type: "Selector",
            children: (new $a8848f9916d99690$var$List$6).fromArray(selector.pseudos.map(function(pseudo) {
                return pseudo.item.data;
            }))
        });
        return ~usePseudos.indexOf(pseudoSelectorsStr);
    });
}
function $a8848f9916d99690$var$cleanPseudos(selectors) {
    selectors.forEach(function(selector) {
        selector.pseudos.forEach(function(pseudo) {
            pseudo.list.remove(pseudo.item);
        });
    });
}
function $a8848f9916d99690$var$compareSpecificity$2(aSpecificity, bSpecificity) {
    for(var i = 0; i < 4; i += 1){
        if (aSpecificity[i] < bSpecificity[i]) return -1;
        else if (aSpecificity[i] > bSpecificity[i]) return 1;
    }
    return 0;
}
function $a8848f9916d99690$var$compareSimpleSelectorNode(aSimpleSelectorNode, bSimpleSelectorNode) {
    var aSpecificity = $a8848f9916d99690$var$specificity$3(aSimpleSelectorNode), bSpecificity = $a8848f9916d99690$var$specificity$3(bSimpleSelectorNode);
    return $a8848f9916d99690$var$compareSpecificity$2(aSpecificity, bSpecificity);
}
function $a8848f9916d99690$var$_bySelectorSpecificity(selectorA, selectorB) {
    return $a8848f9916d99690$var$compareSimpleSelectorNode(selectorA.item.data, selectorB.item.data);
}
function $a8848f9916d99690$var$sortSelectors(selectors) {
    return $a8848f9916d99690$var$stable$2(selectors, $a8848f9916d99690$var$_bySelectorSpecificity);
}
function $a8848f9916d99690$var$csstreeToStyleDeclaration(declaration) {
    var propertyName = declaration.property, propertyValue = $a8848f9916d99690$var$csstree$5.generate(declaration.value), propertyPriority = declaration.important ? "important" : "";
    return {
        name: propertyName,
        value: propertyValue,
        priority: propertyPriority
    };
}
function $a8848f9916d99690$var$getCssStr(elem) {
    if (elem.children.length > 0 && (elem.children[0].type === "text" || elem.children[0].type === "cdata")) return elem.children[0].value;
    return "";
}
function $a8848f9916d99690$var$setCssStr(elem, css) {
    if (elem.children.length === 0) elem.children.push({
        type: "text",
        value: ""
    });
    if (elem.children[0].type !== "text" && elem.children[0].type !== "cdata") return css;
    elem.children[0].value = css;
    return css;
}
$a8848f9916d99690$var$cssTools.flattenToSelectors = $a8848f9916d99690$var$flattenToSelectors;
$a8848f9916d99690$var$cssTools.filterByMqs = $a8848f9916d99690$var$filterByMqs;
$a8848f9916d99690$var$cssTools.filterByPseudos = $a8848f9916d99690$var$filterByPseudos;
$a8848f9916d99690$var$cssTools.cleanPseudos = $a8848f9916d99690$var$cleanPseudos;
$a8848f9916d99690$var$cssTools.compareSpecificity = $a8848f9916d99690$var$compareSpecificity$2;
$a8848f9916d99690$var$cssTools.compareSimpleSelectorNode = $a8848f9916d99690$var$compareSimpleSelectorNode;
$a8848f9916d99690$var$cssTools.sortSelectors = $a8848f9916d99690$var$sortSelectors;
$a8848f9916d99690$var$cssTools.csstreeToStyleDeclaration = $a8848f9916d99690$var$csstreeToStyleDeclaration;
$a8848f9916d99690$var$cssTools.getCssStr = $a8848f9916d99690$var$getCssStr;
$a8848f9916d99690$var$cssTools.setCssStr = $a8848f9916d99690$var$setCssStr;
var $a8848f9916d99690$var$csstree$4 = $a8848f9916d99690$var$csstree_min.exports, $a8848f9916d99690$var$csstools = $a8848f9916d99690$var$cssTools;
var $a8848f9916d99690$var$CSSStyleDeclaration$1 = function(node) {
    this.parentNode = node;
    this.properties = new Map;
    this.hasSynced = false;
    this.styleValue = null;
    this.parseError = false;
    const value = node.attributes.style;
    if (value != null) {
        this.addStyleValueHandler();
        this.setStyleValue(value);
    }
};
$a8848f9916d99690$var$CSSStyleDeclaration$1.prototype.addStyleValueHandler = function() {
    Object.defineProperty(this.parentNode.attributes, "style", {
        get: this.getStyleValue.bind(this),
        set: this.setStyleValue.bind(this),
        enumerable: true,
        configurable: true
    });
};
$a8848f9916d99690$var$CSSStyleDeclaration$1.prototype.getStyleValue = function() {
    return this.getCssText();
};
$a8848f9916d99690$var$CSSStyleDeclaration$1.prototype.setStyleValue = function(newValue) {
    this.properties.clear();
    this.styleValue = newValue;
    this.hasSynced = false;
};
$a8848f9916d99690$var$CSSStyleDeclaration$1.prototype._loadCssText = function() {
    if (this.hasSynced) return;
    this.hasSynced = true;
    if (!this.styleValue || this.styleValue.length === 0) return;
    var inlineCssStr = this.styleValue;
    var declarations = {
    };
    try {
        declarations = $a8848f9916d99690$var$csstree$4.parse(inlineCssStr, {
            context: "declarationList",
            parseValue: false
        });
    } catch (parseError) {
        this.parseError = parseError;
        return;
    }
    this.parseError = false;
    var self = this;
    declarations.children.each(function(declaration) {
        try {
            var styleDeclaration = $a8848f9916d99690$var$csstools.csstreeToStyleDeclaration(declaration);
            self.setProperty(styleDeclaration.name, styleDeclaration.value, styleDeclaration.priority);
        } catch (styleError) {
            if (styleError.message !== "Unknown node type: undefined") self.parseError = styleError;
        }
    });
};
$a8848f9916d99690$var$CSSStyleDeclaration$1.prototype.getCssText = function() {
    var properties = this.getProperties();
    if (this.parseError) return this.styleValue;
    var cssText = [];
    properties.forEach(function(property, propertyName) {
        var strImportant = property.priority === "important" ? "!important" : "";
        cssText.push(propertyName.trim() + ":" + property.value.trim() + strImportant);
    });
    return cssText.join(";");
};
$a8848f9916d99690$var$CSSStyleDeclaration$1.prototype._handleParseError = function() {
    if (this.parseError) console.warn("Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr('style').value. Error details: " + this.parseError);
};
$a8848f9916d99690$var$CSSStyleDeclaration$1.prototype._getProperty = function(propertyName) {
    if (typeof propertyName === "undefined") throw Error("1 argument required, but only 0 present.");
    var properties = this.getProperties();
    this._handleParseError();
    var property = properties.get(propertyName.trim());
    return property;
};
$a8848f9916d99690$var$CSSStyleDeclaration$1.prototype.getPropertyPriority = function(propertyName) {
    var property = this._getProperty(propertyName);
    return property ? property.priority : "";
};
$a8848f9916d99690$var$CSSStyleDeclaration$1.prototype.getPropertyValue = function(propertyName) {
    var property = this._getProperty(propertyName);
    return property ? property.value : null;
};
$a8848f9916d99690$var$CSSStyleDeclaration$1.prototype.item = function(index) {
    if (typeof index === "undefined") throw Error("1 argument required, but only 0 present.");
    var properties = this.getProperties();
    this._handleParseError();
    return Array.from(properties.keys())[index];
};
$a8848f9916d99690$var$CSSStyleDeclaration$1.prototype.getProperties = function() {
    this._loadCssText();
    return this.properties;
};
$a8848f9916d99690$var$CSSStyleDeclaration$1.prototype.removeProperty = function(propertyName) {
    if (typeof propertyName === "undefined") throw Error("1 argument required, but only 0 present.");
    this.addStyleValueHandler();
    var properties = this.getProperties();
    this._handleParseError();
    var oldValue = this.getPropertyValue(propertyName);
    properties.delete(propertyName.trim());
    return oldValue;
};
$a8848f9916d99690$var$CSSStyleDeclaration$1.prototype.setProperty = function(propertyName, value, priority) {
    if (typeof propertyName === "undefined") throw Error("propertyName argument required, but only not present.");
    this.addStyleValueHandler();
    var properties = this.getProperties();
    this._handleParseError();
    var property = {
        value: value.trim(),
        priority: priority.trim()
    };
    properties.set(propertyName.trim(), property);
    return property;
};
var $a8848f9916d99690$var$cssStyleDeclaration = $a8848f9916d99690$var$CSSStyleDeclaration$1;
const { selectAll: $a8848f9916d99690$var$selectAll , selectOne: $a8848f9916d99690$var$selectOne , is: $a8848f9916d99690$var$is  } = $a8848f9916d99690$var$lib$8;
const $a8848f9916d99690$var$svgoCssSelectAdapter = $a8848f9916d99690$var$cssSelectAdapter;
const $a8848f9916d99690$var$CSSClassList = $a8848f9916d99690$var$cssClassList;
const $a8848f9916d99690$var$CSSStyleDeclaration = $a8848f9916d99690$var$cssStyleDeclaration;
const $a8848f9916d99690$var$parseName = (name25)=>{
    if (name25 == null) return {
        prefix: "",
        local: ""
    };
    if (name25 === "xmlns") return {
        prefix: "xmlns",
        local: ""
    };
    const chunks = name25.split(":");
    if (chunks.length === 1) return {
        prefix: "",
        local: chunks[0]
    };
    return {
        prefix: chunks[0],
        local: chunks[1]
    };
};
var $a8848f9916d99690$var$cssSelectOpts = {
    xmlMode: true,
    adapter: $a8848f9916d99690$var$svgoCssSelectAdapter
};
const $a8848f9916d99690$var$attrsHandler = {
    get: (attributes, name26)=>{
        if (attributes.hasOwnProperty(name26)) return {
            name: name26,
            get value () {
                return attributes[name26];
            },
            set value (value){
                attributes[name26] = value;
            }
        };
    },
    set: (attributes, name, attr)=>{
        attributes[name] = attr.value;
        return true;
    }
};
var $a8848f9916d99690$var$JSAPI$4 = function(data, parentNode) {
    Object.assign(this, data);
    if (this.type === "element") {
        if (this.attributes == null) this.attributes = {
        };
        if (this.children == null) this.children = [];
        Object.defineProperty(this, "class", {
            writable: true,
            configurable: true,
            value: new $a8848f9916d99690$var$CSSClassList(this)
        });
        Object.defineProperty(this, "style", {
            writable: true,
            configurable: true,
            value: new $a8848f9916d99690$var$CSSStyleDeclaration(this)
        });
        Object.defineProperty(this, "parentNode", {
            writable: true,
            value: parentNode
        });
        const element = this;
        Object.defineProperty(this, "attrs", {
            configurable: true,
            get () {
                return new Proxy(element.attributes, $a8848f9916d99690$var$attrsHandler);
            },
            set (value) {
                const newAttributes = {
                };
                for (const attr of Object.values(value))newAttributes[attr.name] = attr.value;
                element.attributes = newAttributes;
            }
        });
    }
};
var $a8848f9916d99690$var$jsAPI = $a8848f9916d99690$var$JSAPI$4;
$a8848f9916d99690$var$JSAPI$4.prototype.clone = function() {
    const { children: children , ...nodeData } = this;
    const clonedNode = new $a8848f9916d99690$var$JSAPI$4(JSON.parse(JSON.stringify(nodeData)), null);
    if (children) clonedNode.children = children.map((child)=>{
        const clonedChild = child.clone();
        clonedChild.parentNode = clonedNode;
        return clonedChild;
    });
    return clonedNode;
};
$a8848f9916d99690$var$JSAPI$4.prototype.isElem = function(param) {
    if (this.type !== "element") return false;
    if (param == null) return true;
    if (Array.isArray(param)) return param.includes(this.name);
    return this.name === param;
};
$a8848f9916d99690$var$JSAPI$4.prototype.renameElem = function(name27) {
    if (name27 && typeof name27 === "string") this.name = name27;
    return this;
};
$a8848f9916d99690$var$JSAPI$4.prototype.isEmpty = function() {
    return !this.children || !this.children.length;
};
$a8848f9916d99690$var$JSAPI$4.prototype.closestElem = function(elemName) {
    var elem = this;
    while((elem = elem.parentNode) && !elem.isElem(elemName));
    return elem;
};
$a8848f9916d99690$var$JSAPI$4.prototype.spliceContent = function(start, n, insertion) {
    if (arguments.length < 2) return [];
    if (!Array.isArray(insertion)) insertion = Array.apply(null, arguments).slice(2);
    insertion.forEach(function(inner) {
        inner.parentNode = this;
    }, this);
    return this.children.splice.apply(this.children, [
        start,
        n
    ].concat(insertion));
};
$a8848f9916d99690$var$JSAPI$4.prototype.hasAttr = function(name28, val) {
    if (this.type !== "element") return false;
    if (Object.keys(this.attributes).length === 0) return false;
    if (name28 == null) return true;
    if (this.attributes.hasOwnProperty(name28) === false) return false;
    if (val !== undefined) return this.attributes[name28] === val.toString();
    return true;
};
$a8848f9916d99690$var$JSAPI$4.prototype.hasAttrLocal = function(localName, val) {
    if (!this.attrs || !Object.keys(this.attrs).length) return false;
    if (!arguments.length) return !!this.attrs;
    var callback;
    switch(val != null && val.constructor && val.constructor.name){
        case "Number":
        case "String":
            callback = stringValueTest;
            break;
        case "RegExp":
            callback = regexpValueTest;
            break;
        case "Function":
            callback = funcValueTest;
            break;
        default:
            callback = nameTest;
    }
    function nameTest(attr) {
        const { local: local  } = $a8848f9916d99690$var$parseName(attr.name);
        return local === localName;
    }
    function stringValueTest(attr) {
        const { local: local  } = $a8848f9916d99690$var$parseName(attr.name);
        return local === localName && val == attr.value;
    }
    function regexpValueTest(attr) {
        const { local: local  } = $a8848f9916d99690$var$parseName(attr.name);
        return local === localName && val.test(attr.value);
    }
    function funcValueTest(attr) {
        const { local: local  } = $a8848f9916d99690$var$parseName(attr.name);
        return local === localName && val(attr.value);
    }
    return this.someAttr(callback);
};
$a8848f9916d99690$var$JSAPI$4.prototype.attr = function(name29, val) {
    if (this.hasAttr(name29, val)) return this.attrs[name29];
};
$a8848f9916d99690$var$JSAPI$4.prototype.computedAttr = function(name30, val) {
    if (!arguments.length) return;
    for(var elem = this; elem && (!elem.hasAttr(name30) || !elem.attributes[name30]); elem = elem.parentNode);
    if (val != null) return elem ? elem.hasAttr(name30, val) : false;
    else if (elem && elem.hasAttr(name30)) return elem.attributes[name30];
};
$a8848f9916d99690$var$JSAPI$4.prototype.removeAttr = function(name31, val) {
    if (this.type !== "element") return false;
    if (arguments.length === 0) return false;
    if (Array.isArray(name31)) {
        for (const nameItem of name31)this.removeAttr(nameItem, val);
        return false;
    }
    if (this.hasAttr(name31, val) === false) return false;
    delete this.attributes[name31];
    return true;
};
$a8848f9916d99690$var$JSAPI$4.prototype.addAttr = function(attr) {
    attr = attr || {
    };
    if (attr.name === undefined) return false;
    this.attributes[attr.name] = attr.value;
    if (attr.name === "class") this.class.addClassValueHandler();
    if (attr.name === "style") this.style.addStyleValueHandler();
    return this.attrs[attr.name];
};
$a8848f9916d99690$var$JSAPI$4.prototype.eachAttr = function(callback, context) {
    if (this.type !== "element") return false;
    if (callback == null) return false;
    for (const attr of Object.values(this.attrs))callback.call(context, attr);
    return true;
};
$a8848f9916d99690$var$JSAPI$4.prototype.someAttr = function(callback, context) {
    if (this.type !== "element") return false;
    for (const attr of Object.values(this.attrs)){
        if (callback.call(context, attr)) return true;
    }
    return false;
};
$a8848f9916d99690$var$JSAPI$4.prototype.querySelectorAll = function(selectors) {
    var matchedEls = $a8848f9916d99690$var$selectAll(selectors, this, $a8848f9916d99690$var$cssSelectOpts);
    return matchedEls.length > 0 ? matchedEls : null;
};
$a8848f9916d99690$var$JSAPI$4.prototype.querySelector = function(selectors) {
    return $a8848f9916d99690$var$selectOne(selectors, this, $a8848f9916d99690$var$cssSelectOpts);
};
$a8848f9916d99690$var$JSAPI$4.prototype.matches = function(selector) {
    return $a8848f9916d99690$var$is(this, selector, $a8848f9916d99690$var$cssSelectOpts);
};
const { visitSkip: $a8848f9916d99690$var$visitSkip$5 , detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$g  } = $a8848f9916d99690$var$xast;
const $a8848f9916d99690$var$JSAPI$3 = $a8848f9916d99690$var$jsAPI;
$a8848f9916d99690$var$mergeStyles$1.name = "mergeStyles";
$a8848f9916d99690$var$mergeStyles$1.type = "visitor";
$a8848f9916d99690$var$mergeStyles$1.active = true;
$a8848f9916d99690$var$mergeStyles$1.description = "merge multiple style elements into one";
$a8848f9916d99690$var$mergeStyles$1.fn = ()=>{
    let firstStyleElement = null;
    let collectedStyles = "";
    let styleContentType = "text";
    return {
        element: {
            enter: (node, parentNode)=>{
                if (node.name === "foreignObject") return $a8848f9916d99690$var$visitSkip$5;
                if (node.name !== "style") return;
                if (node.attributes.type != null && node.attributes.type !== "" && node.attributes.type !== "text/css") return;
                let css = "";
                for (const child of node.children){
                    if (child.type === "text") css += child.value;
                    if (child.type === "cdata") {
                        styleContentType = "cdata";
                        css += child.value;
                    }
                }
                if (css.trim().length === 0) {
                    $a8848f9916d99690$var$detachNodeFromParent$g(node, parentNode);
                    return;
                }
                if (node.attributes.media == null) collectedStyles += css;
                else {
                    collectedStyles += `@media ${node.attributes.media}{${css}}`;
                    delete node.attributes.media;
                }
                if (firstStyleElement == null) firstStyleElement = node;
                else {
                    $a8848f9916d99690$var$detachNodeFromParent$g(node, parentNode);
                    firstStyleElement.children = [
                        new $a8848f9916d99690$var$JSAPI$3({
                            type: styleContentType,
                            value: collectedStyles
                        }, firstStyleElement)
                    ];
                }
            }
        }
    };
};
var $a8848f9916d99690$var$inlineStyles$1 = {
};
const $a8848f9916d99690$var$csstree$3 = $a8848f9916d99690$var$csstree_min.exports;
const $a8848f9916d99690$var$specificity$2 = $a8848f9916d99690$var$specificity$4;
const $a8848f9916d99690$var$stable$1 = $a8848f9916d99690$var$stable$3.exports;
const { visitSkip: $a8848f9916d99690$var$visitSkip$4 , querySelectorAll: $a8848f9916d99690$var$querySelectorAll$1 , detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$f  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$inlineStyles$1.type = "visitor";
$a8848f9916d99690$var$inlineStyles$1.name = "inlineStyles";
$a8848f9916d99690$var$inlineStyles$1.active = true;
$a8848f9916d99690$var$inlineStyles$1.description = "inline styles (additional options)";
const $a8848f9916d99690$var$compareSpecificity$1 = (a, b)=>{
    for(var i = 0; i < 4; i += 1){
        if (a[i] < b[i]) return -1;
        else if (a[i] > b[i]) return 1;
    }
    return 0;
};
$a8848f9916d99690$var$inlineStyles$1.fn = (root, params)=>{
    const { onlyMatchedOnce: onlyMatchedOnce = true , removeMatchedSelectors: removeMatchedSelectors = true , useMqs: useMqs = [
        "",
        "screen"
    ] , usePseudos: usePseudos = [
        ""
    ]  } = params;
    const styles = [];
    let selectors = [];
    return {
        element: {
            enter: (node2, parentNode)=>{
                if (node2.name === "foreignObject") return $a8848f9916d99690$var$visitSkip$4;
                if (node2.name !== "style" || node2.children.length === 0) return;
                if (node2.attributes.type != null && node2.attributes.type !== "" && node2.attributes.type !== "text/css") return;
                let cssText = "";
                for (const child of node2.children)if (child.type === "text" || child.type === "cdata") cssText += child.value;
                let cssAst = null;
                try {
                    cssAst = $a8848f9916d99690$var$csstree$3.parse(cssText, {
                        parseValue: false,
                        parseCustomProperty: false
                    });
                } catch  {
                    return;
                }
                if (cssAst.type === "StyleSheet") styles.push({
                    node: node2,
                    parentNode: parentNode,
                    cssAst: cssAst
                });
                $a8848f9916d99690$var$csstree$3.walk(cssAst, {
                    visit: "Selector",
                    enter (node, item) {
                        const atrule = this.atrule;
                        const rule = this.rule;
                        if (rule == null) return;
                        let mq = "";
                        if (atrule != null) {
                            mq = atrule.name;
                            if (atrule.prelude != null) mq += ` ${$a8848f9916d99690$var$csstree$3.generate(atrule.prelude)}`;
                        }
                        if (useMqs.includes(mq) === false) return;
                        const pseudos = [];
                        if (node.type === "Selector") node.children.each((childNode, childItem, childList)=>{
                            if (childNode.type === "PseudoClassSelector" || childNode.type === "PseudoElementSelector") pseudos.push({
                                item: childItem,
                                list: childList
                            });
                        });
                        const pseudoSelectors = $a8848f9916d99690$var$csstree$3.generate({
                            type: "Selector",
                            children: (new $a8848f9916d99690$var$csstree$3.List).fromArray(pseudos.map((pseudo)=>pseudo.item.data
                            ))
                        });
                        if (usePseudos.includes(pseudoSelectors) === false) return;
                        for (const pseudo1 of pseudos)pseudo1.list.remove(pseudo1.item);
                        selectors.push({
                            node: node,
                            item: item,
                            rule: rule
                        });
                    }
                });
            }
        },
        root: {
            exit: ()=>{
                if (styles.length === 0) return;
                const sortedSelectors = $a8848f9916d99690$var$stable$1(selectors, (a, b)=>{
                    const aSpecificity = $a8848f9916d99690$var$specificity$2(a.item.data);
                    const bSpecificity = $a8848f9916d99690$var$specificity$2(b.item.data);
                    return $a8848f9916d99690$var$compareSpecificity$1(aSpecificity, bSpecificity);
                }).reverse();
                for (const selector of sortedSelectors){
                    const selectorText = $a8848f9916d99690$var$csstree$3.generate(selector.item.data);
                    const matchedElements = [];
                    try {
                        for (const node of $a8848f9916d99690$var$querySelectorAll$1(root, selectorText))if (node.type === "element") matchedElements.push(node);
                    } catch (selectError) {
                        continue;
                    }
                    if (matchedElements.length === 0) continue;
                    if (onlyMatchedOnce && matchedElements.length > 1) continue;
                    for (const selectedEl of matchedElements){
                        const styleDeclarationList = $a8848f9916d99690$var$csstree$3.parse(selectedEl.attributes.style == null ? "" : selectedEl.attributes.style, {
                            context: "declarationList",
                            parseValue: false
                        });
                        if (styleDeclarationList.type !== "DeclarationList") continue;
                        const styleDeclarationItems = new Map;
                        $a8848f9916d99690$var$csstree$3.walk(styleDeclarationList, {
                            visit: "Declaration",
                            enter (node, item) {
                                styleDeclarationItems.set(node.property, item);
                            }
                        });
                        $a8848f9916d99690$var$csstree$3.walk(selector.rule, {
                            visit: "Declaration",
                            enter (ruleDeclaration) {
                                const matchedItem = styleDeclarationItems.get(ruleDeclaration.property);
                                const ruleDeclarationItem = styleDeclarationList.children.createItem(ruleDeclaration);
                                if (matchedItem == null) styleDeclarationList.children.append(ruleDeclarationItem);
                                else if (matchedItem.data.important !== true && ruleDeclaration.important === true) {
                                    styleDeclarationList.children.replace(matchedItem, ruleDeclarationItem);
                                    styleDeclarationItems.set(ruleDeclaration.property, ruleDeclarationItem);
                                }
                            }
                        });
                        selectedEl.attributes.style = $a8848f9916d99690$var$csstree$3.generate(styleDeclarationList);
                    }
                    if (removeMatchedSelectors && matchedElements.length !== 0 && selector.rule.prelude.type === "SelectorList") selector.rule.prelude.children.remove(selector.item);
                    selector.matchedElements = matchedElements;
                }
                if (removeMatchedSelectors === false) return;
                for (const selector1 of sortedSelectors){
                    if (selector1.matchedElements == null) continue;
                    if (onlyMatchedOnce && selector1.matchedElements.length > 1) continue;
                    for (const selectedEl of selector1.matchedElements){
                        const classList = new Set(selectedEl.attributes.class == null ? null : selectedEl.attributes.class.split(" "));
                        const firstSubSelector = selector1.node.children.first();
                        if (firstSubSelector != null && firstSubSelector.type === "ClassSelector") classList.delete(firstSubSelector.name);
                        if (classList.size === 0) delete selectedEl.attributes.class;
                        else selectedEl.attributes.class = Array.from(classList).join(" ");
                        if (firstSubSelector != null && firstSubSelector.type === "IdSelector") {
                            if (selectedEl.attributes.id === firstSubSelector.name) delete selectedEl.attributes.id;
                        }
                    }
                }
                for (const style of styles){
                    $a8848f9916d99690$var$csstree$3.walk(style.cssAst, {
                        visit: "Rule",
                        enter: function(node, item, list) {
                            if (node.type === "Rule" && node.prelude.type === "SelectorList" && node.prelude.children.isEmpty()) list.remove(item);
                        }
                    });
                    if (style.cssAst.children.isEmpty()) $a8848f9916d99690$var$detachNodeFromParent$f(style.node, style.parentNode);
                    else {
                        const firstChild = style.node.children[0];
                        if (firstChild.type === "text" || firstChild.type === "cdata") firstChild.value = $a8848f9916d99690$var$csstree$3.generate(style.cssAst);
                    }
                }
            }
        }
    };
};
var $a8848f9916d99690$var$minifyStyles$1 = {
};
var $a8848f9916d99690$var$hasOwnProperty$3 = Object.prototype.hasOwnProperty;
function $a8848f9916d99690$var$buildMap(list, caseInsensitive) {
    var map = Object.create(null);
    if (!Array.isArray(list)) return null;
    for(var i = 0; i < list.length; i++){
        var name32 = list[i];
        if (caseInsensitive) name32 = name32.toLowerCase();
        map[name32] = true;
    }
    return map;
}
function $a8848f9916d99690$var$buildList(data) {
    if (!data) return null;
    var tags = $a8848f9916d99690$var$buildMap(data.tags, true);
    var ids = $a8848f9916d99690$var$buildMap(data.ids);
    var classes = $a8848f9916d99690$var$buildMap(data.classes);
    if (tags === null && ids === null && classes === null) return null;
    return {
        tags: tags,
        ids: ids,
        classes: classes
    };
}
function $a8848f9916d99690$var$buildIndex(data) {
    var scopes = false;
    if (data.scopes && Array.isArray(data.scopes)) {
        scopes = Object.create(null);
        for(var i = 0; i < data.scopes.length; i++){
            var list = data.scopes[i];
            if (!list || !Array.isArray(list)) throw new Error("Wrong usage format");
            for(var j = 0; j < list.length; j++){
                var name33 = list[j];
                if ($a8848f9916d99690$var$hasOwnProperty$3.call(scopes, name33)) throw new Error("Class can't be used for several scopes: " + name33);
                scopes[name33] = i + 1;
            }
        }
    }
    return {
        whitelist: $a8848f9916d99690$var$buildList(data),
        blacklist: $a8848f9916d99690$var$buildList(data.blacklist),
        scopes: scopes
    };
}
var $a8848f9916d99690$var$usage = {
    buildIndex: $a8848f9916d99690$var$buildIndex
};
var $a8848f9916d99690$var$utils$4 = {
    hasNoChildren: function(node) {
        return !node || !node.children || node.children.isEmpty();
    },
    isNodeChildrenList: function(node, list) {
        return node !== null && node.children === list;
    }
};
var $a8848f9916d99690$var$resolveKeyword$4 = $a8848f9916d99690$var$csstree_min.exports.keyword;
var { hasNoChildren: $a8848f9916d99690$var$hasNoChildren$1  } = $a8848f9916d99690$var$utils$4;
var $a8848f9916d99690$var$Atrule$1 = function cleanAtrule(node, item, list) {
    if (node.block) {
        if (this.stylesheet !== null) this.stylesheet.firstAtrulesAllowed = false;
        if ($a8848f9916d99690$var$hasNoChildren$1(node.block)) {
            list.remove(item);
            return;
        }
    }
    switch(node.name){
        case "charset":
            if ($a8848f9916d99690$var$hasNoChildren$1(node.prelude)) {
                list.remove(item);
                return;
            }
            if (item.prev) {
                list.remove(item);
                return;
            }
            break;
        case "import":
            if (this.stylesheet === null || !this.stylesheet.firstAtrulesAllowed) {
                list.remove(item);
                return;
            }
            list.prevUntil(item.prev, function(rule) {
                if (rule.type === "Atrule") {
                    if (rule.name === "import" || rule.name === "charset") return;
                }
                this.root.firstAtrulesAllowed = false;
                list.remove(item);
                return true;
            }, this);
            break;
        default:
            var name34 = $a8848f9916d99690$var$resolveKeyword$4(node.name).basename;
            if (name34 === "keyframes" || name34 === "media" || name34 === "supports") {
                if ($a8848f9916d99690$var$hasNoChildren$1(node.prelude) || $a8848f9916d99690$var$hasNoChildren$1(node.block)) list.remove(item);
            }
    }
};
var $a8848f9916d99690$var$Comment = function cleanComment(data, item, list) {
    list.remove(item);
};
var $a8848f9916d99690$var$property = $a8848f9916d99690$var$csstree_min.exports.property;
var $a8848f9916d99690$var$Declaration = function cleanDeclartion(node, item, list) {
    if (node.value.children && node.value.children.isEmpty()) {
        list.remove(item);
        return;
    }
    if ($a8848f9916d99690$var$property(node.property).custom) {
        if (/\S/.test(node.value.value)) node.value.value = node.value.value.trim();
    }
};
var { isNodeChildrenList: $a8848f9916d99690$var$isNodeChildrenList$1  } = $a8848f9916d99690$var$utils$4;
var $a8848f9916d99690$var$Raw = function cleanRaw(node, item, list) {
    if ($a8848f9916d99690$var$isNodeChildrenList$1(this.stylesheet, list) || $a8848f9916d99690$var$isNodeChildrenList$1(this.block, list)) list.remove(item);
};
var $a8848f9916d99690$var$hasOwnProperty$2 = Object.prototype.hasOwnProperty;
var $a8848f9916d99690$var$walk$b = $a8848f9916d99690$var$csstree_min.exports.walk;
var { hasNoChildren: $a8848f9916d99690$var$hasNoChildren  } = $a8848f9916d99690$var$utils$4;
function $a8848f9916d99690$var$cleanUnused(selectorList, usageData) {
    selectorList.children.each(function(selector, item, list) {
        var shouldRemove = false;
        $a8848f9916d99690$var$walk$b(selector, function(node) {
            if (this.selector === null || this.selector === selectorList) switch(node.type){
                case "SelectorList":
                    if (this.function === null || this.function.name.toLowerCase() !== "not") {
                        if ($a8848f9916d99690$var$cleanUnused(node, usageData)) shouldRemove = true;
                    }
                    break;
                case "ClassSelector":
                    if (usageData.whitelist !== null && usageData.whitelist.classes !== null && !$a8848f9916d99690$var$hasOwnProperty$2.call(usageData.whitelist.classes, node.name)) shouldRemove = true;
                    if (usageData.blacklist !== null && usageData.blacklist.classes !== null && $a8848f9916d99690$var$hasOwnProperty$2.call(usageData.blacklist.classes, node.name)) shouldRemove = true;
                    break;
                case "IdSelector":
                    if (usageData.whitelist !== null && usageData.whitelist.ids !== null && !$a8848f9916d99690$var$hasOwnProperty$2.call(usageData.whitelist.ids, node.name)) shouldRemove = true;
                    if (usageData.blacklist !== null && usageData.blacklist.ids !== null && $a8848f9916d99690$var$hasOwnProperty$2.call(usageData.blacklist.ids, node.name)) shouldRemove = true;
                    break;
                case "TypeSelector":
                    if (node.name.charAt(node.name.length - 1) !== "*") {
                        if (usageData.whitelist !== null && usageData.whitelist.tags !== null && !$a8848f9916d99690$var$hasOwnProperty$2.call(usageData.whitelist.tags, node.name.toLowerCase())) shouldRemove = true;
                        if (usageData.blacklist !== null && usageData.blacklist.tags !== null && $a8848f9916d99690$var$hasOwnProperty$2.call(usageData.blacklist.tags, node.name.toLowerCase())) shouldRemove = true;
                    }
                    break;
            }
        });
        if (shouldRemove) list.remove(item);
    });
    return selectorList.children.isEmpty();
}
var $a8848f9916d99690$var$Rule = function cleanRule(node, item, list, options) {
    if ($a8848f9916d99690$var$hasNoChildren(node.prelude) || $a8848f9916d99690$var$hasNoChildren(node.block)) {
        list.remove(item);
        return;
    }
    var usageData = options.usage;
    if (usageData && (usageData.whitelist !== null || usageData.blacklist !== null)) {
        $a8848f9916d99690$var$cleanUnused(node.prelude, usageData);
        if ($a8848f9916d99690$var$hasNoChildren(node.prelude)) {
            list.remove(item);
            return;
        }
    }
};
var $a8848f9916d99690$var$TypeSelector = function cleanTypeSelector(node, item, list) {
    var name35 = item.data.name;
    if (name35 !== "*") return;
    var nextType = item.next && item.next.data.type;
    if (nextType === "IdSelector" || nextType === "ClassSelector" || nextType === "AttributeSelector" || nextType === "PseudoClassSelector" || nextType === "PseudoElementSelector") list.remove(item);
};
var { isNodeChildrenList: $a8848f9916d99690$var$isNodeChildrenList  } = $a8848f9916d99690$var$utils$4;
function $a8848f9916d99690$var$isSafeOperator(node) {
    return node.type === "Operator" && node.value !== "+" && node.value !== "-";
}
var $a8848f9916d99690$var$WhiteSpace = function cleanWhitespace(node, item, list) {
    if (item.next === null || item.prev === null) {
        list.remove(item);
        return;
    }
    if ($a8848f9916d99690$var$isNodeChildrenList(this.stylesheet, list) || $a8848f9916d99690$var$isNodeChildrenList(this.block, list)) {
        list.remove(item);
        return;
    }
    if (item.next.data.type === "WhiteSpace") {
        list.remove(item);
        return;
    }
    if ($a8848f9916d99690$var$isSafeOperator(item.prev.data) || $a8848f9916d99690$var$isSafeOperator(item.next.data)) {
        list.remove(item);
        return;
    }
};
var $a8848f9916d99690$var$walk$a = $a8848f9916d99690$var$csstree_min.exports.walk;
var $a8848f9916d99690$var$handlers$2 = {
    Atrule: $a8848f9916d99690$var$Atrule$1,
    Comment: $a8848f9916d99690$var$Comment,
    Declaration: $a8848f9916d99690$var$Declaration,
    Raw: $a8848f9916d99690$var$Raw,
    Rule: $a8848f9916d99690$var$Rule,
    TypeSelector: $a8848f9916d99690$var$TypeSelector,
    WhiteSpace: $a8848f9916d99690$var$WhiteSpace
};
var $a8848f9916d99690$var$clean$1 = function(ast, options) {
    $a8848f9916d99690$var$walk$a(ast, {
        leave: function(node, item, list) {
            if ($a8848f9916d99690$var$handlers$2.hasOwnProperty(node.type)) $a8848f9916d99690$var$handlers$2[node.type].call(this, node, item, list, options);
        }
    });
};
var $a8848f9916d99690$var$keyframes = function(node) {
    node.block.children.each(function(rule) {
        rule.prelude.children.each(function(simpleselector) {
            simpleselector.children.each(function(data, item) {
                if (data.type === "Percentage" && data.value === "100") item.data = {
                    type: "TypeSelector",
                    loc: data.loc,
                    name: "to"
                };
                else if (data.type === "TypeSelector" && data.name === "from") item.data = {
                    type: "Percentage",
                    loc: data.loc,
                    value: "0"
                };
            });
        });
    });
};
var $a8848f9916d99690$var$resolveKeyword$3 = $a8848f9916d99690$var$csstree_min.exports.keyword;
var $a8848f9916d99690$var$compressKeyframes = $a8848f9916d99690$var$keyframes;
var $a8848f9916d99690$var$Atrule = function(node) {
    if ($a8848f9916d99690$var$resolveKeyword$3(node.name).basename === "keyframes") $a8848f9916d99690$var$compressKeyframes(node);
};
var $a8848f9916d99690$var$escapesRx = /\\([0-9A-Fa-f]{1,6})(\r\n|[ \t\n\f\r])?|\\./g;
var $a8848f9916d99690$var$blockUnquoteRx = /^(-?\d|--)|[\u0000-\u002c\u002e\u002f\u003A-\u0040\u005B-\u005E\u0060\u007B-\u009f]/;
function $a8848f9916d99690$var$canUnquote(value) {
    if (value === "" || value === "-") return;
    value = value.replace($a8848f9916d99690$var$escapesRx, "a");
    return !$a8848f9916d99690$var$blockUnquoteRx.test(value);
}
var $a8848f9916d99690$var$AttributeSelector = function(node) {
    var attrValue = node.value;
    if (!attrValue || attrValue.type !== "String") return;
    var unquotedValue = attrValue.value.replace(/^(.)(.*)\1$/, "$2");
    if ($a8848f9916d99690$var$canUnquote(unquotedValue)) node.value = {
        type: "Identifier",
        loc: attrValue.loc,
        name: unquotedValue
    };
};
var $a8848f9916d99690$var$font = function compressFont(node3) {
    var list = node3.children;
    list.eachRight(function(node, item) {
        if (node.type === "Identifier") {
            if (node.name === "bold") item.data = {
                type: "Number",
                loc: node.loc,
                value: "700"
            };
            else if (node.name === "normal") {
                var prev = item.prev;
                if (prev && prev.data.type === "Operator" && prev.data.value === "/") this.remove(prev);
                this.remove(item);
            } else if (node.name === "medium") {
                var next = item.next;
                if (!next || next.data.type !== "Operator") this.remove(item);
            }
        }
    });
    list.each(function(node, item) {
        if (node.type === "WhiteSpace") {
            if (!item.prev || !item.next || item.next.data.type === "WhiteSpace") this.remove(item);
        }
    });
    if (list.isEmpty()) list.insert(list.createItem({
        type: "Identifier",
        name: "normal"
    }));
};
var $a8848f9916d99690$var$fontWeight = function compressFontWeight(node) {
    var value = node.children.head.data;
    if (value.type === "Identifier") switch(value.name){
        case "normal":
            node.children.head.data = {
                type: "Number",
                loc: value.loc,
                value: "400"
            };
            break;
        case "bold":
            node.children.head.data = {
                type: "Number",
                loc: value.loc,
                value: "700"
            };
            break;
    }
};
var $a8848f9916d99690$var$List$5 = $a8848f9916d99690$var$csstree_min.exports.List;
var $a8848f9916d99690$var$background = function compressBackground(node4) {
    function lastType() {
        if (buffer.length) return buffer[buffer.length - 1].type;
    }
    function flush() {
        if (lastType() === "WhiteSpace") buffer.pop();
        if (!buffer.length) buffer.unshift({
            type: "Number",
            loc: null,
            value: "0"
        }, {
            type: "WhiteSpace",
            value: " "
        }, {
            type: "Number",
            loc: null,
            value: "0"
        });
        newValue.push.apply(newValue, buffer);
        buffer = [];
    }
    var newValue = [];
    var buffer = [];
    node4.children.each(function(node) {
        if (node.type === "Operator" && node.value === ",") {
            flush();
            newValue.push(node);
            return;
        }
        if (node.type === "Identifier") {
            if (node.name === "transparent" || node.name === "none" || node.name === "repeat" || node.name === "scroll") return;
        }
        if (node.type === "WhiteSpace" && (!buffer.length || lastType() === "WhiteSpace")) return;
        buffer.push(node);
    });
    flush();
    node4.children = (new $a8848f9916d99690$var$List$5).fromArray(newValue);
};
function $a8848f9916d99690$var$removeItemAndRedundantWhiteSpace(list, item) {
    var prev = item.prev;
    var next = item.next;
    if (next !== null) {
        if (next.data.type === "WhiteSpace" && (prev === null || prev.data.type === "WhiteSpace")) list.remove(next);
    } else if (prev !== null && prev.data.type === "WhiteSpace") list.remove(prev);
    list.remove(item);
}
var $a8848f9916d99690$var$border = function compressBorder(node5) {
    node5.children.each(function(node, item, list) {
        if (node.type === "Identifier" && node.name.toLowerCase() === "none") {
            if (list.head === list.tail) item.data = {
                type: "Number",
                loc: node.loc,
                value: "0"
            };
            else $a8848f9916d99690$var$removeItemAndRedundantWhiteSpace(list, item);
        }
    });
};
var $a8848f9916d99690$var$resolveName = $a8848f9916d99690$var$csstree_min.exports.property;
var $a8848f9916d99690$var$handlers$1 = {
    font: $a8848f9916d99690$var$font,
    "font-weight": $a8848f9916d99690$var$fontWeight,
    background: $a8848f9916d99690$var$background,
    border: $a8848f9916d99690$var$border,
    outline: $a8848f9916d99690$var$border
};
var $a8848f9916d99690$var$Value = function compressValue(node) {
    if (!this.declaration) return;
    var property = $a8848f9916d99690$var$resolveName(this.declaration.property);
    if ($a8848f9916d99690$var$handlers$1.hasOwnProperty(property.basename)) $a8848f9916d99690$var$handlers$1[property.basename](node);
};
var $a8848f9916d99690$var$_Number = {
    exports: {
    }
};
var $a8848f9916d99690$var$OMIT_PLUSSIGN = /^(?:\+|(-))?0*(\d*)(?:\.0*|(\.\d*?)0*)?$/;
var $a8848f9916d99690$var$KEEP_PLUSSIGN = /^([\+\-])?0*(\d*)(?:\.0*|(\.\d*?)0*)?$/;
var $a8848f9916d99690$var$unsafeToRemovePlusSignAfter = {
    Dimension: true,
    Hash: true,
    Identifier: true,
    Number: true,
    Raw: true,
    UnicodeRange: true
};
function $a8848f9916d99690$var$packNumber$3(value, item) {
    var regexp = item && item.prev !== null && $a8848f9916d99690$var$unsafeToRemovePlusSignAfter.hasOwnProperty(item.prev.data.type) ? $a8848f9916d99690$var$KEEP_PLUSSIGN : $a8848f9916d99690$var$OMIT_PLUSSIGN;
    value = String(value).replace(regexp, "$1$2$3");
    if (value === "" || value === "-") value = "0";
    return value;
}
$a8848f9916d99690$var$_Number.exports = function(node, item) {
    node.value = $a8848f9916d99690$var$packNumber$3(node.value, item);
};
$a8848f9916d99690$var$_Number.exports.pack = $a8848f9916d99690$var$packNumber$3;
var $a8848f9916d99690$var$packNumber$2 = $a8848f9916d99690$var$_Number.exports.pack;
var $a8848f9916d99690$var$MATH_FUNCTIONS = {
    calc: true,
    min: true,
    max: true,
    clamp: true
};
var $a8848f9916d99690$var$LENGTH_UNIT = {
    px: true,
    mm: true,
    cm: true,
    in: true,
    pt: true,
    pc: true,
    em: true,
    ex: true,
    ch: true,
    rem: true,
    vh: true,
    vw: true,
    vmin: true,
    vmax: true,
    vm: true
};
var $a8848f9916d99690$var$Dimension = function compressDimension(node, item) {
    var value = $a8848f9916d99690$var$packNumber$2(node.value, item);
    node.value = value;
    if (value === "0" && this.declaration !== null && this.atrulePrelude === null) {
        var unit = node.unit.toLowerCase();
        if (!$a8848f9916d99690$var$LENGTH_UNIT.hasOwnProperty(unit)) return;
        if (this.declaration.property === "-ms-flex" || this.declaration.property === "flex") return;
        if (this.function && $a8848f9916d99690$var$MATH_FUNCTIONS.hasOwnProperty(this.function.name)) return;
        item.data = {
            type: "Number",
            loc: node.loc,
            value: value
        };
    }
};
var $a8848f9916d99690$var$lexer$1 = $a8848f9916d99690$var$csstree_min.exports.lexer;
var $a8848f9916d99690$var$packNumber$1 = $a8848f9916d99690$var$_Number.exports.pack;
var $a8848f9916d99690$var$blacklist = new Set([
    "width",
    "min-width",
    "max-width",
    "height",
    "min-height",
    "max-height",
    "flex",
    "-ms-flex"
]);
var $a8848f9916d99690$var$Percentage = function compressPercentage(node, item) {
    node.value = $a8848f9916d99690$var$packNumber$1(node.value, item);
    if (node.value === "0" && this.declaration && !$a8848f9916d99690$var$blacklist.has(this.declaration.property)) {
        item.data = {
            type: "Number",
            loc: node.loc,
            value: node.value
        };
        if (!$a8848f9916d99690$var$lexer$1.matchDeclaration(this.declaration).isType(item.data, "length")) item.data = node;
    }
};
var $a8848f9916d99690$var$_String = function(node) {
    var value = node.value;
    value = value.replace(/\\(\r\n|\r|\n|\f)/g, "");
    node.value = value;
};
var $a8848f9916d99690$var$UNICODE = "\\\\[0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?";
var $a8848f9916d99690$var$ESCAPE = "(" + $a8848f9916d99690$var$UNICODE + "|\\\\[^\\n\\r\\f0-9a-fA-F])";
var $a8848f9916d99690$var$NONPRINTABLE = "\0\b\v-";
var $a8848f9916d99690$var$SAFE_URL = new RegExp("^(" + $a8848f9916d99690$var$ESCAPE + "|[^\"'\\(\\)\\\\\\s" + $a8848f9916d99690$var$NONPRINTABLE + "])*$", "i");
var $a8848f9916d99690$var$Url = function(node) {
    var value = node.value;
    if (value.type !== "String") return;
    var quote = value.value[0];
    var url = value.value.substr(1, value.value.length - 2);
    url = url.replace(/\\\\/g, "/");
    if ($a8848f9916d99690$var$SAFE_URL.test(url)) node.value = {
        type: "Raw",
        loc: node.value.loc,
        value: url
    };
    else node.value.value = url.indexOf('"') === -1 ? '"' + url + '"' : quote + url + quote;
};
var $a8848f9916d99690$var$lexer = $a8848f9916d99690$var$csstree_min.exports.lexer;
var $a8848f9916d99690$var$packNumber = $a8848f9916d99690$var$_Number.exports.pack;
var $a8848f9916d99690$var$NAME_TO_HEX = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgrey: "a9a9a9",
    darkgreen: "006400",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    grey: "808080",
    green: "008000",
    greenyellow: "adff2f",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgrey: "d3d3d3",
    lightgreen: "90ee90",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "639",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
};
var $a8848f9916d99690$var$HEX_TO_NAME = {
    800000: "maroon",
    800080: "purple",
    808000: "olive",
    808080: "gray",
    "00ffff": "cyan",
    f0ffff: "azure",
    f5f5dc: "beige",
    ffe4c4: "bisque",
    "000000": "black",
    "0000ff": "blue",
    a52a2a: "brown",
    ff7f50: "coral",
    ffd700: "gold",
    "008000": "green",
    "4b0082": "indigo",
    fffff0: "ivory",
    f0e68c: "khaki",
    "00ff00": "lime",
    faf0e6: "linen",
    "000080": "navy",
    ffa500: "orange",
    da70d6: "orchid",
    cd853f: "peru",
    ffc0cb: "pink",
    dda0dd: "plum",
    f00: "red",
    ff0000: "red",
    fa8072: "salmon",
    a0522d: "sienna",
    c0c0c0: "silver",
    fffafa: "snow",
    d2b48c: "tan",
    "008080": "teal",
    ff6347: "tomato",
    ee82ee: "violet",
    f5deb3: "wheat",
    ffffff: "white",
    ffff00: "yellow"
};
function $a8848f9916d99690$var$hueToRgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 0.5) return q;
    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
    return p;
}
function $a8848f9916d99690$var$hslToRgb(h, s, l, a) {
    var r;
    var g;
    var b;
    if (s === 0) r = g = b = l;
    else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = $a8848f9916d99690$var$hueToRgb(p, q, h + 1 / 3);
        g = $a8848f9916d99690$var$hueToRgb(p, q, h);
        b = $a8848f9916d99690$var$hueToRgb(p, q, h - 1 / 3);
    }
    return [
        Math.round(r * 255),
        Math.round(g * 255),
        Math.round(b * 255),
        a
    ];
}
function $a8848f9916d99690$var$toHex(value) {
    value = value.toString(16);
    return value.length === 1 ? "0" + value : value;
}
function $a8848f9916d99690$var$parseFunctionArgs(functionArgs, count, rgb) {
    var cursor = functionArgs.head;
    var args = [];
    var wasValue = false;
    while(cursor !== null){
        var node = cursor.data;
        var type = node.type;
        switch(type){
            case "Number":
            case "Percentage":
                if (wasValue) return;
                wasValue = true;
                args.push({
                    type: type,
                    value: Number(node.value)
                });
                break;
            case "Operator":
                if (node.value === ",") {
                    if (!wasValue) return;
                    wasValue = false;
                } else if (wasValue || node.value !== "+") return;
                break;
            default:
                return;
        }
        cursor = cursor.next;
    }
    if (args.length !== count) return;
    if (args.length === 4) {
        if (args[3].type !== "Number") return;
        args[3].type = "Alpha";
    }
    if (rgb) {
        if (args[0].type !== args[1].type || args[0].type !== args[2].type) return;
    } else {
        if (args[0].type !== "Number" || args[1].type !== "Percentage" || args[2].type !== "Percentage") return;
        args[0].type = "Angle";
    }
    return args.map(function(arg) {
        var value = Math.max(0, arg.value);
        switch(arg.type){
            case "Number":
                value = Math.min(value, 255);
                break;
            case "Percentage":
                value = Math.min(value, 100) / 100;
                if (!rgb) return value;
                value = 255 * value;
                break;
            case "Angle":
                return (value % 360 + 360) % 360 / 360;
            case "Alpha":
                return Math.min(value, 1);
        }
        return Math.round(value);
    });
}
function $a8848f9916d99690$var$compressFunction(node6, item1, list1) {
    var functionName = node6.name;
    var args;
    if (functionName === "rgba" || functionName === "hsla") {
        args = $a8848f9916d99690$var$parseFunctionArgs(node6.children, 4, functionName === "rgba");
        if (!args) return;
        if (functionName === "hsla") {
            args = $a8848f9916d99690$var$hslToRgb.apply(null, args);
            node6.name = "rgba";
        }
        if (args[3] === 0) {
            var scopeFunctionName = this.function && this.function.name;
            if (args[0] === 0 && args[1] === 0 && args[2] === 0 || !/^(?:to|from|color-stop)$|gradient$/i.test(scopeFunctionName)) {
                item1.data = {
                    type: "Identifier",
                    loc: node6.loc,
                    name: "transparent"
                };
                return;
            }
        }
        if (args[3] !== 1) {
            node6.children.each(function(node, item, list) {
                if (node.type === "Operator") {
                    if (node.value !== ",") list.remove(item);
                    return;
                }
                item.data = {
                    type: "Number",
                    loc: node.loc,
                    value: $a8848f9916d99690$var$packNumber(args.shift(), null)
                };
            });
            return;
        }
        functionName = "rgb";
    }
    if (functionName === "hsl") {
        args = args || $a8848f9916d99690$var$parseFunctionArgs(node6.children, 3, false);
        if (!args) return;
        args = $a8848f9916d99690$var$hslToRgb.apply(null, args);
        functionName = "rgb";
    }
    if (functionName === "rgb") {
        args = args || $a8848f9916d99690$var$parseFunctionArgs(node6.children, 3, true);
        if (!args) return;
        var next = item1.next;
        if (next && next.data.type !== "WhiteSpace") list1.insert(list1.createItem({
            type: "WhiteSpace",
            value: " "
        }), next);
        item1.data = {
            type: "Hash",
            loc: node6.loc,
            value: $a8848f9916d99690$var$toHex(args[0]) + $a8848f9916d99690$var$toHex(args[1]) + $a8848f9916d99690$var$toHex(args[2])
        };
        $a8848f9916d99690$var$compressHex(item1.data, item1);
    }
}
function $a8848f9916d99690$var$compressIdent(node, item) {
    if (this.declaration === null) return;
    var color = node.name.toLowerCase();
    if ($a8848f9916d99690$var$NAME_TO_HEX.hasOwnProperty(color) && $a8848f9916d99690$var$lexer.matchDeclaration(this.declaration).isType(node, "color")) {
        var hex = $a8848f9916d99690$var$NAME_TO_HEX[color];
        if (hex.length + 1 <= color.length) item.data = {
            type: "Hash",
            loc: node.loc,
            value: hex
        };
        else {
            if (color === "grey") color = "gray";
            node.name = color;
        }
    }
}
function $a8848f9916d99690$var$compressHex(node, item) {
    var color = node.value.toLowerCase();
    if (color.length === 6 && color[0] === color[1] && color[2] === color[3] && color[4] === color[5]) color = color[0] + color[2] + color[4];
    if ($a8848f9916d99690$var$HEX_TO_NAME[color]) item.data = {
        type: "Identifier",
        loc: node.loc,
        name: $a8848f9916d99690$var$HEX_TO_NAME[color]
    };
    else node.value = color;
}
var $a8848f9916d99690$var$color = {
    compressFunction: $a8848f9916d99690$var$compressFunction,
    compressIdent: $a8848f9916d99690$var$compressIdent,
    compressHex: $a8848f9916d99690$var$compressHex
};
var $a8848f9916d99690$var$walk$9 = $a8848f9916d99690$var$csstree_min.exports.walk;
var $a8848f9916d99690$var$handlers = {
    Atrule: $a8848f9916d99690$var$Atrule,
    AttributeSelector: $a8848f9916d99690$var$AttributeSelector,
    Value: $a8848f9916d99690$var$Value,
    Dimension: $a8848f9916d99690$var$Dimension,
    Percentage: $a8848f9916d99690$var$Percentage,
    Number: $a8848f9916d99690$var$_Number.exports,
    String: $a8848f9916d99690$var$_String,
    Url: $a8848f9916d99690$var$Url,
    Hash: $a8848f9916d99690$var$color.compressHex,
    Identifier: $a8848f9916d99690$var$color.compressIdent,
    Function: $a8848f9916d99690$var$color.compressFunction
};
var $a8848f9916d99690$var$replace$1 = function(ast) {
    $a8848f9916d99690$var$walk$9(ast, {
        leave: function(node, item, list) {
            if ($a8848f9916d99690$var$handlers.hasOwnProperty(node.type)) $a8848f9916d99690$var$handlers[node.type].call(this, node, item, list);
        }
    });
};
var $a8848f9916d99690$var$generate$5 = $a8848f9916d99690$var$csstree_min.exports.generate;
function $a8848f9916d99690$var$Index() {
    this.seed = 0;
    this.map = Object.create(null);
}
$a8848f9916d99690$var$Index.prototype.resolve = function(str) {
    var index = this.map[str];
    if (!index) {
        index = ++this.seed;
        this.map[str] = index;
    }
    return index;
};
var $a8848f9916d99690$var$createDeclarationIndexer$1 = function createDeclarationIndexer() {
    var ids = new $a8848f9916d99690$var$Index;
    return function markDeclaration(node) {
        var id = $a8848f9916d99690$var$generate$5(node);
        node.id = ids.resolve(id);
        node.length = id.length;
        node.fingerprint = null;
        return node;
    };
};
var $a8848f9916d99690$var$generate$4 = $a8848f9916d99690$var$csstree_min.exports.generate;
var $a8848f9916d99690$var$specificity$1 = $a8848f9916d99690$var$specificity$4;
var $a8848f9916d99690$var$nonFreezePseudoElements = {
    "first-letter": true,
    "first-line": true,
    after: true,
    before: true
};
var $a8848f9916d99690$var$nonFreezePseudoClasses = {
    link: true,
    visited: true,
    hover: true,
    active: true,
    "first-letter": true,
    "first-line": true,
    after: true,
    before: true
};
var $a8848f9916d99690$var$processSelector$1 = function freeze(node7, usageData) {
    var pseudos = Object.create(null);
    var hasPseudo = false;
    node7.prelude.children.each(function(simpleSelector) {
        var tagName = "*";
        var scope = 0;
        simpleSelector.children.each(function(node) {
            switch(node.type){
                case "ClassSelector":
                    if (usageData && usageData.scopes) {
                        var classScope = usageData.scopes[node.name] || 0;
                        if (scope !== 0 && classScope !== scope) throw new Error("Selector can't has classes from different scopes: " + $a8848f9916d99690$var$generate$4(simpleSelector));
                        scope = classScope;
                    }
                    break;
                case "PseudoClassSelector":
                    var name36 = node.name.toLowerCase();
                    if (!$a8848f9916d99690$var$nonFreezePseudoClasses.hasOwnProperty(name36)) {
                        pseudos[":" + name36] = true;
                        hasPseudo = true;
                    }
                    break;
                case "PseudoElementSelector":
                    var name36 = node.name.toLowerCase();
                    if (!$a8848f9916d99690$var$nonFreezePseudoElements.hasOwnProperty(name36)) {
                        pseudos["::" + name36] = true;
                        hasPseudo = true;
                    }
                    break;
                case "TypeSelector":
                    tagName = node.name.toLowerCase();
                    break;
                case "AttributeSelector":
                    if (node.flags) {
                        pseudos["[" + node.flags.toLowerCase() + "]"] = true;
                        hasPseudo = true;
                    }
                    break;
                case "WhiteSpace":
                case "Combinator":
                    tagName = "*";
                    break;
            }
        });
        simpleSelector.compareMarker = $a8848f9916d99690$var$specificity$1(simpleSelector).toString();
        simpleSelector.id = null;
        simpleSelector.id = $a8848f9916d99690$var$generate$4(simpleSelector);
        if (scope) simpleSelector.compareMarker += ":" + scope;
        if (tagName !== "*") simpleSelector.compareMarker += "," + tagName;
    });
    node7.pseudoSignature = hasPseudo && Object.keys(pseudos).sort().join(",");
};
var $a8848f9916d99690$var$resolveKeyword$2 = $a8848f9916d99690$var$csstree_min.exports.keyword;
var $a8848f9916d99690$var$walk$8 = $a8848f9916d99690$var$csstree_min.exports.walk;
var $a8848f9916d99690$var$generate$3 = $a8848f9916d99690$var$csstree_min.exports.generate;
var $a8848f9916d99690$var$createDeclarationIndexer = $a8848f9916d99690$var$createDeclarationIndexer$1;
var $a8848f9916d99690$var$processSelector = $a8848f9916d99690$var$processSelector$1;
var $a8848f9916d99690$var$prepare$1 = function prepare(ast, options) {
    var markDeclaration = $a8848f9916d99690$var$createDeclarationIndexer();
    $a8848f9916d99690$var$walk$8(ast, {
        visit: "Rule",
        enter: function processRule(node) {
            node.block.children.each(markDeclaration);
            $a8848f9916d99690$var$processSelector(node, options.usage);
        }
    });
    $a8848f9916d99690$var$walk$8(ast, {
        visit: "Atrule",
        enter: function(node) {
            if (node.prelude) {
                node.prelude.id = null;
                node.prelude.id = $a8848f9916d99690$var$generate$3(node.prelude);
            }
            if ($a8848f9916d99690$var$resolveKeyword$2(node.name).basename === "keyframes") {
                node.block.avoidRulesMerge = true;
                node.block.children.each(function(rule) {
                    rule.prelude.children.each(function(simpleselector) {
                        simpleselector.compareMarker = simpleselector.id;
                    });
                });
            }
        }
    });
    return {
        declaration: markDeclaration
    };
};
var $a8848f9916d99690$var$List$4 = $a8848f9916d99690$var$csstree_min.exports.List;
var $a8848f9916d99690$var$resolveKeyword$1 = $a8848f9916d99690$var$csstree_min.exports.keyword;
var $a8848f9916d99690$var$hasOwnProperty$1 = Object.prototype.hasOwnProperty;
var $a8848f9916d99690$var$walk$7 = $a8848f9916d99690$var$csstree_min.exports.walk;
function $a8848f9916d99690$var$addRuleToMap(map, item, list, single) {
    var node = item.data;
    var name37 = $a8848f9916d99690$var$resolveKeyword$1(node.name).basename;
    var id = node.name.toLowerCase() + "/" + (node.prelude ? node.prelude.id : null);
    if (!$a8848f9916d99690$var$hasOwnProperty$1.call(map, name37)) map[name37] = Object.create(null);
    if (single) delete map[name37][id];
    if (!$a8848f9916d99690$var$hasOwnProperty$1.call(map[name37], id)) map[name37][id] = new $a8848f9916d99690$var$List$4;
    map[name37][id].append(list.remove(item));
}
function $a8848f9916d99690$var$relocateAtrules(ast, options) {
    var collected = Object.create(null);
    var topInjectPoint = null;
    ast.children.each(function(node, item, list) {
        if (node.type === "Atrule") {
            var name38 = $a8848f9916d99690$var$resolveKeyword$1(node.name).basename;
            switch(name38){
                case "keyframes":
                    $a8848f9916d99690$var$addRuleToMap(collected, item, list, true);
                    return;
                case "media":
                    if (options.forceMediaMerge) {
                        $a8848f9916d99690$var$addRuleToMap(collected, item, list, false);
                        return;
                    }
                    break;
            }
            if (topInjectPoint === null && name38 !== "charset" && name38 !== "import") topInjectPoint = item;
        } else if (topInjectPoint === null) topInjectPoint = item;
    });
    for(var atrule in collected)for(var id in collected[atrule])ast.children.insertList(collected[atrule][id], atrule === "media" ? null : topInjectPoint);
}
function $a8848f9916d99690$var$isMediaRule(node) {
    return node.type === "Atrule" && node.name === "media";
}
function $a8848f9916d99690$var$processAtrule(node, item, list) {
    if (!$a8848f9916d99690$var$isMediaRule(node)) return;
    var prev = item.prev && item.prev.data;
    if (!prev || !$a8848f9916d99690$var$isMediaRule(prev)) return;
    if (node.prelude && prev.prelude && node.prelude.id === prev.prelude.id) {
        prev.block.children.appendList(node.block.children);
        list.remove(item);
    }
}
var $a8848f9916d99690$var$_1MergeAtrule = function rejoinAtrule(ast, options) {
    $a8848f9916d99690$var$relocateAtrules(ast, options);
    $a8848f9916d99690$var$walk$7(ast, {
        visit: "Atrule",
        reverse: true,
        enter: $a8848f9916d99690$var$processAtrule
    });
};
var $a8848f9916d99690$var$hasOwnProperty = Object.prototype.hasOwnProperty;
function $a8848f9916d99690$var$isEqualSelectors(a, b) {
    var cursor1 = a.head;
    var cursor2 = b.head;
    while(cursor1 !== null && cursor2 !== null && cursor1.data.id === cursor2.data.id){
        cursor1 = cursor1.next;
        cursor2 = cursor2.next;
    }
    return cursor1 === null && cursor2 === null;
}
function $a8848f9916d99690$var$isEqualDeclarations(a, b) {
    var cursor1 = a.head;
    var cursor2 = b.head;
    while(cursor1 !== null && cursor2 !== null && cursor1.data.id === cursor2.data.id){
        cursor1 = cursor1.next;
        cursor2 = cursor2.next;
    }
    return cursor1 === null && cursor2 === null;
}
function $a8848f9916d99690$var$compareDeclarations(declarations1, declarations2) {
    var result = {
        eq: [],
        ne1: [],
        ne2: [],
        ne2overrided: []
    };
    var fingerprints = Object.create(null);
    var declarations2hash = Object.create(null);
    for(var cursor = declarations2.head; cursor; cursor = cursor.next)declarations2hash[cursor.data.id] = true;
    for(var cursor = declarations1.head; cursor; cursor = cursor.next){
        var data = cursor.data;
        if (data.fingerprint) fingerprints[data.fingerprint] = data.important;
        if (declarations2hash[data.id]) {
            declarations2hash[data.id] = false;
            result.eq.push(data);
        } else result.ne1.push(data);
    }
    for(var cursor = declarations2.head; cursor; cursor = cursor.next){
        var data = cursor.data;
        if (declarations2hash[data.id]) {
            if (!$a8848f9916d99690$var$hasOwnProperty.call(fingerprints, data.fingerprint) || !fingerprints[data.fingerprint] && data.important) result.ne2.push(data);
            result.ne2overrided.push(data);
        }
    }
    return result;
}
function $a8848f9916d99690$var$addSelectors(dest, source) {
    source.each(function(sourceData) {
        var newStr = sourceData.id;
        var cursor = dest.head;
        while(cursor){
            var nextStr = cursor.data.id;
            if (nextStr === newStr) return;
            if (nextStr > newStr) break;
            cursor = cursor.next;
        }
        dest.insert(dest.createItem(sourceData), cursor);
    });
    return dest;
}
function $a8848f9916d99690$var$hasSimilarSelectors(selectors1, selectors2) {
    var cursor1 = selectors1.head;
    while(cursor1 !== null){
        var cursor2 = selectors2.head;
        while(cursor2 !== null){
            if (cursor1.data.compareMarker === cursor2.data.compareMarker) return true;
            cursor2 = cursor2.next;
        }
        cursor1 = cursor1.next;
    }
    return false;
}
function $a8848f9916d99690$var$unsafeToSkipNode(node) {
    switch(node.type){
        case "Rule":
            return $a8848f9916d99690$var$hasSimilarSelectors(node.prelude.children, this);
        case "Atrule":
            if (node.block) return node.block.children.some($a8848f9916d99690$var$unsafeToSkipNode, this);
            break;
        case "Declaration":
            return false;
    }
    return true;
}
var $a8848f9916d99690$var$utils$3 = {
    isEqualSelectors: $a8848f9916d99690$var$isEqualSelectors,
    isEqualDeclarations: $a8848f9916d99690$var$isEqualDeclarations,
    compareDeclarations: $a8848f9916d99690$var$compareDeclarations,
    addSelectors: $a8848f9916d99690$var$addSelectors,
    hasSimilarSelectors: $a8848f9916d99690$var$hasSimilarSelectors,
    unsafeToSkipNode: $a8848f9916d99690$var$unsafeToSkipNode
};
var $a8848f9916d99690$var$walk$6 = $a8848f9916d99690$var$csstree_min.exports.walk;
var $a8848f9916d99690$var$utils$2 = $a8848f9916d99690$var$utils$3;
function $a8848f9916d99690$var$processRule$5(node, item, list) {
    var selectors = node.prelude.children;
    var declarations = node.block.children;
    list.prevUntil(item.prev, function(prev) {
        if (prev.type !== "Rule") return $a8848f9916d99690$var$utils$2.unsafeToSkipNode.call(selectors, prev);
        var prevSelectors = prev.prelude.children;
        var prevDeclarations = prev.block.children;
        if (node.pseudoSignature === prev.pseudoSignature) {
            if ($a8848f9916d99690$var$utils$2.isEqualSelectors(prevSelectors, selectors)) {
                prevDeclarations.appendList(declarations);
                list.remove(item);
                return true;
            }
            if ($a8848f9916d99690$var$utils$2.isEqualDeclarations(declarations, prevDeclarations)) {
                $a8848f9916d99690$var$utils$2.addSelectors(prevSelectors, selectors);
                list.remove(item);
                return true;
            }
        }
        return $a8848f9916d99690$var$utils$2.hasSimilarSelectors(selectors, prevSelectors);
    });
}
var $a8848f9916d99690$var$_2InitialMergeRuleset = function initialMergeRule(ast) {
    $a8848f9916d99690$var$walk$6(ast, {
        visit: "Rule",
        enter: $a8848f9916d99690$var$processRule$5
    });
};
var $a8848f9916d99690$var$List$3 = $a8848f9916d99690$var$csstree_min.exports.List;
var $a8848f9916d99690$var$walk$5 = $a8848f9916d99690$var$csstree_min.exports.walk;
function $a8848f9916d99690$var$processRule$4(node, item, list) {
    var selectors = node.prelude.children;
    while(selectors.head !== selectors.tail){
        var newSelectors = new $a8848f9916d99690$var$List$3;
        newSelectors.insert(selectors.remove(selectors.head));
        list.insert(list.createItem({
            type: "Rule",
            loc: node.loc,
            prelude: {
                type: "SelectorList",
                loc: node.prelude.loc,
                children: newSelectors
            },
            block: {
                type: "Block",
                loc: node.block.loc,
                children: node.block.children.copy()
            },
            pseudoSignature: node.pseudoSignature
        }), item);
    }
}
var $a8848f9916d99690$var$_3DisjoinRuleset = function disjoinRule(ast) {
    $a8848f9916d99690$var$walk$5(ast, {
        visit: "Rule",
        reverse: true,
        enter: $a8848f9916d99690$var$processRule$4
    });
};
var $a8848f9916d99690$var$List$2 = $a8848f9916d99690$var$csstree_min.exports.List;
var $a8848f9916d99690$var$generate$2 = $a8848f9916d99690$var$csstree_min.exports.generate;
var $a8848f9916d99690$var$walk$4 = $a8848f9916d99690$var$csstree_min.exports.walk;
var $a8848f9916d99690$var$REPLACE = 1;
var $a8848f9916d99690$var$REMOVE = 2;
var $a8848f9916d99690$var$TOP = 0;
var $a8848f9916d99690$var$RIGHT = 1;
var $a8848f9916d99690$var$BOTTOM = 2;
var $a8848f9916d99690$var$LEFT = 3;
var $a8848f9916d99690$var$SIDES = [
    "top",
    "right",
    "bottom",
    "left"
];
var $a8848f9916d99690$var$SIDE = {
    "margin-top": "top",
    "margin-right": "right",
    "margin-bottom": "bottom",
    "margin-left": "left",
    "padding-top": "top",
    "padding-right": "right",
    "padding-bottom": "bottom",
    "padding-left": "left",
    "border-top-color": "top",
    "border-right-color": "right",
    "border-bottom-color": "bottom",
    "border-left-color": "left",
    "border-top-width": "top",
    "border-right-width": "right",
    "border-bottom-width": "bottom",
    "border-left-width": "left",
    "border-top-style": "top",
    "border-right-style": "right",
    "border-bottom-style": "bottom",
    "border-left-style": "left"
};
var $a8848f9916d99690$var$MAIN_PROPERTY = {
    margin: "margin",
    "margin-top": "margin",
    "margin-right": "margin",
    "margin-bottom": "margin",
    "margin-left": "margin",
    padding: "padding",
    "padding-top": "padding",
    "padding-right": "padding",
    "padding-bottom": "padding",
    "padding-left": "padding",
    "border-color": "border-color",
    "border-top-color": "border-color",
    "border-right-color": "border-color",
    "border-bottom-color": "border-color",
    "border-left-color": "border-color",
    "border-width": "border-width",
    "border-top-width": "border-width",
    "border-right-width": "border-width",
    "border-bottom-width": "border-width",
    "border-left-width": "border-width",
    "border-style": "border-style",
    "border-top-style": "border-style",
    "border-right-style": "border-style",
    "border-bottom-style": "border-style",
    "border-left-style": "border-style"
};
function $a8848f9916d99690$var$TRBL(name39) {
    this.name = name39;
    this.loc = null;
    this.iehack = undefined;
    this.sides = {
        top: null,
        right: null,
        bottom: null,
        left: null
    };
}
$a8848f9916d99690$var$TRBL.prototype.getValueSequence = function(declaration, count) {
    var values = [];
    var iehack = "";
    var hasBadValues = declaration.value.type !== "Value" || declaration.value.children.some(function(child) {
        var special = false;
        switch(child.type){
            case "Identifier":
                switch(child.name){
                    case "\\0":
                    case "\\9":
                        iehack = child.name;
                        return;
                    case "inherit":
                    case "initial":
                    case "unset":
                    case "revert":
                        special = child.name;
                        break;
                }
                break;
            case "Dimension":
                switch(child.unit){
                    case "rem":
                    case "vw":
                    case "vh":
                    case "vmin":
                    case "vmax":
                    case "vm":
                        special = child.unit;
                        break;
                }
                break;
            case "Hash":
            case "Number":
            case "Percentage":
                break;
            case "Function":
                if (child.name === "var") return true;
                special = child.name;
                break;
            case "WhiteSpace":
                return false;
            default:
                return true;
        }
        values.push({
            node: child,
            special: special,
            important: declaration.important
        });
    });
    if (hasBadValues || values.length > count) return false;
    if (typeof this.iehack === "string" && this.iehack !== iehack) return false;
    this.iehack = iehack;
    return values;
};
$a8848f9916d99690$var$TRBL.prototype.canOverride = function(side, value) {
    var currentValue = this.sides[side];
    return !currentValue || value.important && !currentValue.important;
};
$a8848f9916d99690$var$TRBL.prototype.add = function(name40, declaration) {
    function attemptToAdd() {
        var sides = this.sides;
        var side = $a8848f9916d99690$var$SIDE[name40];
        if (side) {
            if (side in sides === false) return false;
            var values = this.getValueSequence(declaration, 1);
            if (!values || !values.length) return false;
            for(var key in sides){
                if (sides[key] !== null && sides[key].special !== values[0].special) return false;
            }
            if (!this.canOverride(side, values[0])) return true;
            sides[side] = values[0];
            return true;
        } else if (name40 === this.name) {
            var values = this.getValueSequence(declaration, 4);
            if (!values || !values.length) return false;
            switch(values.length){
                case 1:
                    values[$a8848f9916d99690$var$RIGHT] = values[$a8848f9916d99690$var$TOP];
                    values[$a8848f9916d99690$var$BOTTOM] = values[$a8848f9916d99690$var$TOP];
                    values[$a8848f9916d99690$var$LEFT] = values[$a8848f9916d99690$var$TOP];
                    break;
                case 2:
                    values[$a8848f9916d99690$var$BOTTOM] = values[$a8848f9916d99690$var$TOP];
                    values[$a8848f9916d99690$var$LEFT] = values[$a8848f9916d99690$var$RIGHT];
                    break;
                case 3:
                    values[$a8848f9916d99690$var$LEFT] = values[$a8848f9916d99690$var$RIGHT];
                    break;
            }
            for(var i = 0; i < 4; i++)for(var key in sides){
                if (sides[key] !== null && sides[key].special !== values[i].special) return false;
            }
            for(var i = 0; i < 4; i++)if (this.canOverride($a8848f9916d99690$var$SIDES[i], values[i])) sides[$a8848f9916d99690$var$SIDES[i]] = values[i];
            return true;
        }
    }
    if (!attemptToAdd.call(this)) return false;
    if (!this.loc) this.loc = declaration.loc;
    return true;
};
$a8848f9916d99690$var$TRBL.prototype.isOkToMinimize = function() {
    var top = this.sides.top;
    var right = this.sides.right;
    var bottom = this.sides.bottom;
    var left = this.sides.left;
    if (top && right && bottom && left) {
        var important = top.important + right.important + bottom.important + left.important;
        return important === 0 || important === 4;
    }
    return false;
};
$a8848f9916d99690$var$TRBL.prototype.getValue = function() {
    var result = new $a8848f9916d99690$var$List$2;
    var sides = this.sides;
    var values = [
        sides.top,
        sides.right,
        sides.bottom,
        sides.left
    ];
    var stringValues = [
        $a8848f9916d99690$var$generate$2(sides.top.node),
        $a8848f9916d99690$var$generate$2(sides.right.node),
        $a8848f9916d99690$var$generate$2(sides.bottom.node),
        $a8848f9916d99690$var$generate$2(sides.left.node)
    ];
    if (stringValues[$a8848f9916d99690$var$LEFT] === stringValues[$a8848f9916d99690$var$RIGHT]) {
        values.pop();
        if (stringValues[$a8848f9916d99690$var$BOTTOM] === stringValues[$a8848f9916d99690$var$TOP]) {
            values.pop();
            if (stringValues[$a8848f9916d99690$var$RIGHT] === stringValues[$a8848f9916d99690$var$TOP]) values.pop();
        }
    }
    for(var i = 0; i < values.length; i++){
        if (i) result.appendData({
            type: "WhiteSpace",
            value: " "
        });
        result.appendData(values[i].node);
    }
    if (this.iehack) {
        result.appendData({
            type: "WhiteSpace",
            value: " "
        });
        result.appendData({
            type: "Identifier",
            loc: null,
            name: this.iehack
        });
    }
    return {
        type: "Value",
        loc: null,
        children: result
    };
};
$a8848f9916d99690$var$TRBL.prototype.getDeclaration = function() {
    return {
        type: "Declaration",
        loc: this.loc,
        important: this.sides.top.important,
        property: this.name,
        value: this.getValue()
    };
};
function $a8848f9916d99690$var$processRule$3(rule, shorts, shortDeclarations, lastShortSelector) {
    var declarations = rule.block.children;
    var selector = rule.prelude.children.first().id;
    rule.block.children.eachRight(function(declaration, item) {
        var property = declaration.property;
        if (!$a8848f9916d99690$var$MAIN_PROPERTY.hasOwnProperty(property)) return;
        var key = $a8848f9916d99690$var$MAIN_PROPERTY[property];
        var shorthand;
        var operation;
        if (!lastShortSelector || selector === lastShortSelector) {
            if (key in shorts) {
                operation = $a8848f9916d99690$var$REMOVE;
                shorthand = shorts[key];
            }
        }
        if (!shorthand || !shorthand.add(property, declaration)) {
            operation = $a8848f9916d99690$var$REPLACE;
            shorthand = new $a8848f9916d99690$var$TRBL(key);
            if (!shorthand.add(property, declaration)) {
                lastShortSelector = null;
                return;
            }
        }
        shorts[key] = shorthand;
        shortDeclarations.push({
            operation: operation,
            block: declarations,
            item: item,
            shorthand: shorthand
        });
        lastShortSelector = selector;
    });
    return lastShortSelector;
}
function $a8848f9916d99690$var$processShorthands(shortDeclarations, markDeclaration) {
    shortDeclarations.forEach(function(item) {
        var shorthand = item.shorthand;
        if (!shorthand.isOkToMinimize()) return;
        if (item.operation === $a8848f9916d99690$var$REPLACE) item.item.data = markDeclaration(shorthand.getDeclaration());
        else item.block.remove(item.item);
    });
}
var $a8848f9916d99690$var$_4RestructShorthand = function restructBlock(ast, indexer) {
    var stylesheetMap = {
    };
    var shortDeclarations = [];
    $a8848f9916d99690$var$walk$4(ast, {
        visit: "Rule",
        reverse: true,
        enter: function(node) {
            var stylesheet = this.block || this.stylesheet;
            var ruleId = (node.pseudoSignature || "") + "|" + node.prelude.children.first().id;
            var ruleMap;
            var shorts;
            if (!stylesheetMap.hasOwnProperty(stylesheet.id)) {
                ruleMap = {
                    lastShortSelector: null
                };
                stylesheetMap[stylesheet.id] = ruleMap;
            } else ruleMap = stylesheetMap[stylesheet.id];
            if (ruleMap.hasOwnProperty(ruleId)) shorts = ruleMap[ruleId];
            else {
                shorts = {
                };
                ruleMap[ruleId] = shorts;
            }
            ruleMap.lastShortSelector = $a8848f9916d99690$var$processRule$3.call(this, node, shorts, shortDeclarations, ruleMap.lastShortSelector);
        }
    });
    $a8848f9916d99690$var$processShorthands(shortDeclarations, indexer.declaration);
};
var $a8848f9916d99690$var$resolveProperty = $a8848f9916d99690$var$csstree_min.exports.property;
var $a8848f9916d99690$var$resolveKeyword = $a8848f9916d99690$var$csstree_min.exports.keyword;
var $a8848f9916d99690$var$walk$3 = $a8848f9916d99690$var$csstree_min.exports.walk;
var $a8848f9916d99690$var$generate$1 = $a8848f9916d99690$var$csstree_min.exports.generate;
var $a8848f9916d99690$var$fingerprintId = 1;
var $a8848f9916d99690$var$dontRestructure = {
    src: 1
};
var $a8848f9916d99690$var$DONT_MIX_VALUE = {
    display: /table|ruby|flex|-(flex)?box$|grid|contents|run-in/i,
    "text-align": /^(start|end|match-parent|justify-all)$/i
};
var $a8848f9916d99690$var$SAFE_VALUES = {
    cursor: [
        "auto",
        "crosshair",
        "default",
        "move",
        "text",
        "wait",
        "help",
        "n-resize",
        "e-resize",
        "s-resize",
        "w-resize",
        "ne-resize",
        "nw-resize",
        "se-resize",
        "sw-resize",
        "pointer",
        "progress",
        "not-allowed",
        "no-drop",
        "vertical-text",
        "all-scroll",
        "col-resize",
        "row-resize"
    ],
    overflow: [
        "hidden",
        "visible",
        "scroll",
        "auto"
    ],
    position: [
        "static",
        "relative",
        "absolute",
        "fixed"
    ]
};
var $a8848f9916d99690$var$NEEDLESS_TABLE = {
    "border-width": [
        "border"
    ],
    "border-style": [
        "border"
    ],
    "border-color": [
        "border"
    ],
    "border-top": [
        "border"
    ],
    "border-right": [
        "border"
    ],
    "border-bottom": [
        "border"
    ],
    "border-left": [
        "border"
    ],
    "border-top-width": [
        "border-top",
        "border-width",
        "border"
    ],
    "border-right-width": [
        "border-right",
        "border-width",
        "border"
    ],
    "border-bottom-width": [
        "border-bottom",
        "border-width",
        "border"
    ],
    "border-left-width": [
        "border-left",
        "border-width",
        "border"
    ],
    "border-top-style": [
        "border-top",
        "border-style",
        "border"
    ],
    "border-right-style": [
        "border-right",
        "border-style",
        "border"
    ],
    "border-bottom-style": [
        "border-bottom",
        "border-style",
        "border"
    ],
    "border-left-style": [
        "border-left",
        "border-style",
        "border"
    ],
    "border-top-color": [
        "border-top",
        "border-color",
        "border"
    ],
    "border-right-color": [
        "border-right",
        "border-color",
        "border"
    ],
    "border-bottom-color": [
        "border-bottom",
        "border-color",
        "border"
    ],
    "border-left-color": [
        "border-left",
        "border-color",
        "border"
    ],
    "margin-top": [
        "margin"
    ],
    "margin-right": [
        "margin"
    ],
    "margin-bottom": [
        "margin"
    ],
    "margin-left": [
        "margin"
    ],
    "padding-top": [
        "padding"
    ],
    "padding-right": [
        "padding"
    ],
    "padding-bottom": [
        "padding"
    ],
    "padding-left": [
        "padding"
    ],
    "font-style": [
        "font"
    ],
    "font-variant": [
        "font"
    ],
    "font-weight": [
        "font"
    ],
    "font-size": [
        "font"
    ],
    "font-family": [
        "font"
    ],
    "list-style-type": [
        "list-style"
    ],
    "list-style-position": [
        "list-style"
    ],
    "list-style-image": [
        "list-style"
    ]
};
function $a8848f9916d99690$var$getPropertyFingerprint(propertyName, declaration, fingerprints) {
    var realName = $a8848f9916d99690$var$resolveProperty(propertyName).basename;
    if (realName === "background") return propertyName + ":" + $a8848f9916d99690$var$generate$1(declaration.value);
    var declarationId = declaration.id;
    var fingerprint = fingerprints[declarationId];
    if (!fingerprint) {
        switch(declaration.value.type){
            case "Value":
                var vendorId = "";
                var iehack = "";
                var special = {
                };
                var raw = false;
                declaration.value.children.each(function walk(node8) {
                    switch(node8.type){
                        case "Value":
                        case "Brackets":
                        case "Parentheses":
                            node8.children.each(walk);
                            break;
                        case "Raw":
                            raw = true;
                            break;
                        case "Identifier":
                            var name41 = node8.name;
                            if (!vendorId) vendorId = $a8848f9916d99690$var$resolveKeyword(name41).vendor;
                            if (/\\[09]/.test(name41)) iehack = RegExp.lastMatch;
                            if ($a8848f9916d99690$var$SAFE_VALUES.hasOwnProperty(realName)) {
                                if ($a8848f9916d99690$var$SAFE_VALUES[realName].indexOf(name41) === -1) special[name41] = true;
                            } else if ($a8848f9916d99690$var$DONT_MIX_VALUE.hasOwnProperty(realName)) {
                                if ($a8848f9916d99690$var$DONT_MIX_VALUE[realName].test(name41)) special[name41] = true;
                            }
                            break;
                        case "Function":
                            var name41 = node8.name;
                            if (!vendorId) vendorId = $a8848f9916d99690$var$resolveKeyword(name41).vendor;
                            if (name41 === "rect") {
                                var hasComma = node8.children.some(function(node) {
                                    return node.type === "Operator" && node.value === ",";
                                });
                                if (!hasComma) name41 = "rect-backward";
                            }
                            special[name41 + "()"] = true;
                            node8.children.each(walk);
                            break;
                        case "Dimension":
                            var unit = node8.unit;
                            if (/\\[09]/.test(unit)) iehack = RegExp.lastMatch;
                            switch(unit){
                                case "rem":
                                case "vw":
                                case "vh":
                                case "vmin":
                                case "vmax":
                                case "vm":
                                    special[unit] = true;
                                    break;
                            }
                            break;
                    }
                });
                fingerprint = raw ? "!" + $a8848f9916d99690$var$fingerprintId++ : "!" + Object.keys(special).sort() + "|" + iehack + vendorId;
                break;
            case "Raw":
                fingerprint = "!" + declaration.value.value;
                break;
            default:
                fingerprint = $a8848f9916d99690$var$generate$1(declaration.value);
        }
        fingerprints[declarationId] = fingerprint;
    }
    return propertyName + fingerprint;
}
function $a8848f9916d99690$var$needless(props, declaration, fingerprints) {
    var property = $a8848f9916d99690$var$resolveProperty(declaration.property);
    if ($a8848f9916d99690$var$NEEDLESS_TABLE.hasOwnProperty(property.basename)) {
        var table = $a8848f9916d99690$var$NEEDLESS_TABLE[property.basename];
        for(var i = 0; i < table.length; i++){
            var ppre = $a8848f9916d99690$var$getPropertyFingerprint(property.prefix + table[i], declaration, fingerprints);
            var prev = props.hasOwnProperty(ppre) ? props[ppre] : null;
            if (prev && (!declaration.important || prev.item.data.important)) return prev;
        }
    }
}
function $a8848f9916d99690$var$processRule$2(rule, item, list, props, fingerprints) {
    var declarations = rule.block.children;
    declarations.eachRight(function(declaration, declarationItem) {
        var property = declaration.property;
        var fingerprint = $a8848f9916d99690$var$getPropertyFingerprint(property, declaration, fingerprints);
        var prev = props[fingerprint];
        if (prev && !$a8848f9916d99690$var$dontRestructure.hasOwnProperty(property)) {
            if (declaration.important && !prev.item.data.important) {
                props[fingerprint] = {
                    block: declarations,
                    item: declarationItem
                };
                prev.block.remove(prev.item);
            } else declarations.remove(declarationItem);
        } else {
            var prev = $a8848f9916d99690$var$needless(props, declaration, fingerprints);
            if (prev) declarations.remove(declarationItem);
            else {
                declaration.fingerprint = fingerprint;
                props[fingerprint] = {
                    block: declarations,
                    item: declarationItem
                };
            }
        }
    });
    if (declarations.isEmpty()) list.remove(item);
}
var $a8848f9916d99690$var$_6RestructBlock = function restructBlock(ast) {
    var stylesheetMap = {
    };
    var fingerprints = Object.create(null);
    $a8848f9916d99690$var$walk$3(ast, {
        visit: "Rule",
        reverse: true,
        enter: function(node, item, list) {
            var stylesheet = this.block || this.stylesheet;
            var ruleId = (node.pseudoSignature || "") + "|" + node.prelude.children.first().id;
            var ruleMap;
            var props;
            if (!stylesheetMap.hasOwnProperty(stylesheet.id)) {
                ruleMap = {
                };
                stylesheetMap[stylesheet.id] = ruleMap;
            } else ruleMap = stylesheetMap[stylesheet.id];
            if (ruleMap.hasOwnProperty(ruleId)) props = ruleMap[ruleId];
            else {
                props = {
                };
                ruleMap[ruleId] = props;
            }
            $a8848f9916d99690$var$processRule$2.call(this, node, item, list, props, fingerprints);
        }
    });
};
var $a8848f9916d99690$var$walk$2 = $a8848f9916d99690$var$csstree_min.exports.walk;
var $a8848f9916d99690$var$utils$1 = $a8848f9916d99690$var$utils$3;
function $a8848f9916d99690$var$processRule$1(node, item2, list) {
    var selectors = node.prelude.children;
    var declarations = node.block.children;
    var nodeCompareMarker = selectors.first().compareMarker;
    var skippedCompareMarkers = {
    };
    list.nextUntil(item2.next, function(next, nextItem) {
        if (next.type !== "Rule") return $a8848f9916d99690$var$utils$1.unsafeToSkipNode.call(selectors, next);
        if (node.pseudoSignature !== next.pseudoSignature) return true;
        var nextFirstSelector = next.prelude.children.head;
        var nextDeclarations = next.block.children;
        var nextCompareMarker = nextFirstSelector.data.compareMarker;
        if (nextCompareMarker in skippedCompareMarkers) return true;
        if (selectors.head === selectors.tail) {
            if (selectors.first().id === nextFirstSelector.data.id) {
                declarations.appendList(nextDeclarations);
                list.remove(nextItem);
                return;
            }
        }
        if ($a8848f9916d99690$var$utils$1.isEqualDeclarations(declarations, nextDeclarations)) {
            var nextStr = nextFirstSelector.data.id;
            selectors.some(function(data, item) {
                var curStr = data.id;
                if (nextStr < curStr) {
                    selectors.insert(nextFirstSelector, item);
                    return true;
                }
                if (!item.next) {
                    selectors.insert(nextFirstSelector);
                    return true;
                }
            });
            list.remove(nextItem);
            return;
        }
        if (nextCompareMarker === nodeCompareMarker) return true;
        skippedCompareMarkers[nextCompareMarker] = true;
    });
}
var $a8848f9916d99690$var$_7MergeRuleset = function mergeRule(ast) {
    $a8848f9916d99690$var$walk$2(ast, {
        visit: "Rule",
        enter: $a8848f9916d99690$var$processRule$1
    });
};
var $a8848f9916d99690$var$List$1 = $a8848f9916d99690$var$csstree_min.exports.List;
var $a8848f9916d99690$var$walk$1 = $a8848f9916d99690$var$csstree_min.exports.walk;
var $a8848f9916d99690$var$utils = $a8848f9916d99690$var$utils$3;
function $a8848f9916d99690$var$calcSelectorLength(list) {
    var length = 0;
    list.each(function(data) {
        length += data.id.length + 1;
    });
    return length - 1;
}
function $a8848f9916d99690$var$calcDeclarationsLength(tokens) {
    var length = 0;
    for(var i = 0; i < tokens.length; i++)length += tokens[i].length;
    return length + tokens.length - 1;
}
function $a8848f9916d99690$var$processRule(node9, item, list) {
    var avoidRulesMerge = this.block !== null ? this.block.avoidRulesMerge : false;
    var selectors = node9.prelude.children;
    var block = node9.block;
    var disallowDownMarkers = Object.create(null);
    var allowMergeUp = true;
    var allowMergeDown = true;
    list.prevUntil(item.prev, function(prev, prevItem) {
        var prevBlock = prev.block;
        var prevType = prev.type;
        if (prevType !== "Rule") {
            var unsafe = $a8848f9916d99690$var$utils.unsafeToSkipNode.call(selectors, prev);
            if (!unsafe && prevType === "Atrule" && prevBlock) $a8848f9916d99690$var$walk$1(prevBlock, {
                visit: "Rule",
                enter: function(node) {
                    node.prelude.children.each(function(data) {
                        disallowDownMarkers[data.compareMarker] = true;
                    });
                }
            });
            return unsafe;
        }
        var prevSelectors = prev.prelude.children;
        if (node9.pseudoSignature !== prev.pseudoSignature) return true;
        allowMergeDown = !prevSelectors.some(function(selector) {
            return selector.compareMarker in disallowDownMarkers;
        });
        if (!allowMergeDown && !allowMergeUp) return true;
        if (allowMergeUp && $a8848f9916d99690$var$utils.isEqualSelectors(prevSelectors, selectors)) {
            prevBlock.children.appendList(block.children);
            list.remove(item);
            return true;
        }
        var diff = $a8848f9916d99690$var$utils.compareDeclarations(block.children, prevBlock.children);
        if (diff.eq.length) {
            if (!diff.ne1.length && !diff.ne2.length) {
                if (allowMergeDown) {
                    $a8848f9916d99690$var$utils.addSelectors(selectors, prevSelectors);
                    list.remove(prevItem);
                }
                return true;
            } else if (!avoidRulesMerge) {
                if (diff.ne1.length && !diff.ne2.length) {
                    var selectorLength = $a8848f9916d99690$var$calcSelectorLength(selectors);
                    var blockLength = $a8848f9916d99690$var$calcDeclarationsLength(diff.eq);
                    if (allowMergeUp && selectorLength < blockLength) {
                        $a8848f9916d99690$var$utils.addSelectors(prevSelectors, selectors);
                        block.children = (new $a8848f9916d99690$var$List$1).fromArray(diff.ne1);
                    }
                } else if (!diff.ne1.length && diff.ne2.length) {
                    var selectorLength = $a8848f9916d99690$var$calcSelectorLength(prevSelectors);
                    var blockLength = $a8848f9916d99690$var$calcDeclarationsLength(diff.eq);
                    if (allowMergeDown && selectorLength < blockLength) {
                        $a8848f9916d99690$var$utils.addSelectors(selectors, prevSelectors);
                        prevBlock.children = (new $a8848f9916d99690$var$List$1).fromArray(diff.ne2);
                    }
                } else {
                    var newSelector = {
                        type: "SelectorList",
                        loc: null,
                        children: $a8848f9916d99690$var$utils.addSelectors(prevSelectors.copy(), selectors)
                    };
                    var newBlockLength = $a8848f9916d99690$var$calcSelectorLength(newSelector.children) + 2;
                    var blockLength = $a8848f9916d99690$var$calcDeclarationsLength(diff.eq);
                    if (blockLength >= newBlockLength) {
                        var newItem = list.createItem({
                            type: "Rule",
                            loc: null,
                            prelude: newSelector,
                            block: {
                                type: "Block",
                                loc: null,
                                children: (new $a8848f9916d99690$var$List$1).fromArray(diff.eq)
                            },
                            pseudoSignature: node9.pseudoSignature
                        });
                        block.children = (new $a8848f9916d99690$var$List$1).fromArray(diff.ne1);
                        prevBlock.children = (new $a8848f9916d99690$var$List$1).fromArray(diff.ne2overrided);
                        if (allowMergeUp) list.insert(newItem, prevItem);
                        else list.insert(newItem, item);
                        return true;
                    }
                }
            }
        }
        if (allowMergeUp) allowMergeUp = !prevSelectors.some(function(prevSelector) {
            return selectors.some(function(selector) {
                return selector.compareMarker === prevSelector.compareMarker;
            });
        });
        prevSelectors.each(function(data) {
            disallowDownMarkers[data.compareMarker] = true;
        });
    });
}
var $a8848f9916d99690$var$_8RestructRuleset = function restructRule(ast) {
    $a8848f9916d99690$var$walk$1(ast, {
        visit: "Rule",
        reverse: true,
        enter: $a8848f9916d99690$var$processRule
    });
};
var $a8848f9916d99690$var$prepare = $a8848f9916d99690$var$prepare$1;
var $a8848f9916d99690$var$mergeAtrule = $a8848f9916d99690$var$_1MergeAtrule;
var $a8848f9916d99690$var$initialMergeRuleset = $a8848f9916d99690$var$_2InitialMergeRuleset;
var $a8848f9916d99690$var$disjoinRuleset = $a8848f9916d99690$var$_3DisjoinRuleset;
var $a8848f9916d99690$var$restructShorthand = $a8848f9916d99690$var$_4RestructShorthand;
var $a8848f9916d99690$var$restructBlock = $a8848f9916d99690$var$_6RestructBlock;
var $a8848f9916d99690$var$mergeRuleset = $a8848f9916d99690$var$_7MergeRuleset;
var $a8848f9916d99690$var$restructRuleset = $a8848f9916d99690$var$_8RestructRuleset;
var $a8848f9916d99690$var$restructure$1 = function(ast, options) {
    var indexer = $a8848f9916d99690$var$prepare(ast, options);
    options.logger("prepare", ast);
    $a8848f9916d99690$var$mergeAtrule(ast, options);
    options.logger("mergeAtrule", ast);
    $a8848f9916d99690$var$initialMergeRuleset(ast);
    options.logger("initialMergeRuleset", ast);
    $a8848f9916d99690$var$disjoinRuleset(ast);
    options.logger("disjoinRuleset", ast);
    $a8848f9916d99690$var$restructShorthand(ast, indexer);
    options.logger("restructShorthand", ast);
    $a8848f9916d99690$var$restructBlock(ast);
    options.logger("restructBlock", ast);
    $a8848f9916d99690$var$mergeRuleset(ast);
    options.logger("mergeRuleset", ast);
    $a8848f9916d99690$var$restructRuleset(ast);
    options.logger("restructRuleset", ast);
};
var $a8848f9916d99690$var$List = $a8848f9916d99690$var$csstree_min.exports.List;
var $a8848f9916d99690$var$clone = $a8848f9916d99690$var$csstree_min.exports.clone;
var $a8848f9916d99690$var$usageUtils = $a8848f9916d99690$var$usage;
var $a8848f9916d99690$var$clean = $a8848f9916d99690$var$clean$1;
var $a8848f9916d99690$var$replace = $a8848f9916d99690$var$replace$1;
var $a8848f9916d99690$var$restructure = $a8848f9916d99690$var$restructure$1;
var $a8848f9916d99690$var$walk = $a8848f9916d99690$var$csstree_min.exports.walk;
function $a8848f9916d99690$var$readChunk(children, specialComments) {
    var buffer = new $a8848f9916d99690$var$List;
    var nonSpaceTokenInBuffer = false;
    var protectedComment;
    children.nextUntil(children.head, function(node, item, list) {
        if (node.type === "Comment") {
            if (!specialComments || node.value.charAt(0) !== "!") {
                list.remove(item);
                return;
            }
            if (nonSpaceTokenInBuffer || protectedComment) return true;
            list.remove(item);
            protectedComment = node;
            return;
        }
        if (node.type !== "WhiteSpace") nonSpaceTokenInBuffer = true;
        buffer.insert(list.remove(item));
    });
    return {
        comment: protectedComment,
        stylesheet: {
            type: "StyleSheet",
            loc: null,
            children: buffer
        }
    };
}
function $a8848f9916d99690$var$compressChunk(ast, firstAtrulesAllowed, num, options) {
    options.logger("Compress block #" + num, null, true);
    var seed = 1;
    if (ast.type === "StyleSheet") {
        ast.firstAtrulesAllowed = firstAtrulesAllowed;
        ast.id = seed++;
    }
    $a8848f9916d99690$var$walk(ast, {
        visit: "Atrule",
        enter: function markScopes(node) {
            if (node.block !== null) node.block.id = seed++;
        }
    });
    options.logger("init", ast);
    $a8848f9916d99690$var$clean(ast, options);
    options.logger("clean", ast);
    $a8848f9916d99690$var$replace(ast);
    options.logger("replace", ast);
    if (options.restructuring) $a8848f9916d99690$var$restructure(ast, options);
    return ast;
}
function $a8848f9916d99690$var$getCommentsOption(options) {
    var comments = "comments" in options ? options.comments : "exclamation";
    if (typeof comments === "boolean") comments = comments ? "exclamation" : false;
    else if (comments !== "exclamation" && comments !== "first-exclamation") comments = false;
    return comments;
}
function $a8848f9916d99690$var$getRestructureOption(options) {
    if ("restructure" in options) return options.restructure;
    return "restructuring" in options ? options.restructuring : true;
}
function $a8848f9916d99690$var$wrapBlock(block) {
    return (new $a8848f9916d99690$var$List).appendData({
        type: "Rule",
        loc: null,
        prelude: {
            type: "SelectorList",
            loc: null,
            children: (new $a8848f9916d99690$var$List).appendData({
                type: "Selector",
                loc: null,
                children: (new $a8848f9916d99690$var$List).appendData({
                    type: "TypeSelector",
                    loc: null,
                    name: "x"
                })
            })
        },
        block: block
    });
}
var $a8848f9916d99690$var$compress$1 = function compress(ast, options) {
    ast = ast || {
        type: "StyleSheet",
        loc: null,
        children: new $a8848f9916d99690$var$List
    };
    options = options || {
    };
    var compressOptions = {
        logger: typeof options.logger === "function" ? options.logger : function() {
        },
        restructuring: $a8848f9916d99690$var$getRestructureOption(options),
        forceMediaMerge: Boolean(options.forceMediaMerge),
        usage: options.usage ? $a8848f9916d99690$var$usageUtils.buildIndex(options.usage) : false
    };
    var specialComments = $a8848f9916d99690$var$getCommentsOption(options);
    var firstAtrulesAllowed = true;
    var input;
    var output = new $a8848f9916d99690$var$List;
    var chunk;
    var chunkNum = 1;
    var chunkChildren;
    if (options.clone) ast = $a8848f9916d99690$var$clone(ast);
    if (ast.type === "StyleSheet") {
        input = ast.children;
        ast.children = output;
    } else input = $a8848f9916d99690$var$wrapBlock(ast);
    do {
        chunk = $a8848f9916d99690$var$readChunk(input, Boolean(specialComments));
        $a8848f9916d99690$var$compressChunk(chunk.stylesheet, firstAtrulesAllowed, chunkNum++, compressOptions);
        chunkChildren = chunk.stylesheet.children;
        if (chunk.comment) {
            if (!output.isEmpty()) output.insert($a8848f9916d99690$var$List.createItem({
                type: "Raw",
                value: "\n"
            }));
            output.insert($a8848f9916d99690$var$List.createItem(chunk.comment));
            if (!chunkChildren.isEmpty()) output.insert($a8848f9916d99690$var$List.createItem({
                type: "Raw",
                value: "\n"
            }));
        }
        if (firstAtrulesAllowed && !chunkChildren.isEmpty()) {
            var lastRule = chunkChildren.last();
            if (lastRule.type !== "Atrule" || lastRule.name !== "import" && lastRule.name !== "charset") firstAtrulesAllowed = false;
        }
        if (specialComments !== "exclamation") specialComments = false;
        output.appendList(chunkChildren);
    }while (!input.isEmpty())
    return {
        ast: ast
    };
};
var $a8848f9916d99690$var$name = "csso";
var $a8848f9916d99690$var$version = "4.2.0";
var $a8848f9916d99690$var$description = "CSS minifier with structural optimisations";
var $a8848f9916d99690$var$homepage = "https://github.com/css/csso";
var $a8848f9916d99690$var$author = "Sergey Kryzhanovsky <skryzhanovsky@ya.ru> (https://github.com/afelix)";
var $a8848f9916d99690$var$maintainers = [
    {
        name: "Roman Dvornov",
        email: "rdvornov@gmail.com",
        "github-username": "lahmatiy"
    }
];
var $a8848f9916d99690$var$license = "MIT";
var $a8848f9916d99690$var$repository = "css/csso";
var $a8848f9916d99690$var$bugs = {
    url: "https://github.com/css/csso/issues"
};
var $a8848f9916d99690$var$keywords = [
    "css",
    "compress",
    "minifier",
    "minify",
    "optimise",
    "optimisation",
    "csstree"
];
var $a8848f9916d99690$var$main = "./lib/index";
var $a8848f9916d99690$var$scripts = {
    test: "mocha --reporter dot",
    lint: "eslint lib test",
    "lint-and-test": "npm run lint && npm test",
    build: "rollup --config && terser dist/csso.js --compress --mangle -o dist/csso.min.js",
    coverage: "nyc npm test",
    coveralls: "nyc report --reporter=text-lcov | coveralls",
    travis: "nyc npm run lint-and-test && npm run coveralls",
    hydrogen: "node --trace-hydrogen --trace-phase=Z --trace-deopt --code-comments --hydrogen-track-positions --redirect-code-traces --redirect-code-traces-to=code.asm --trace_hydrogen_file=code.cfg --print-opt-code bin/csso --stat -o /dev/null",
    prepublishOnly: "npm run build"
};
var $a8848f9916d99690$var$dependencies = {
    "css-tree": "^1.1.2"
};
var $a8848f9916d99690$var$browser = {
    "css-tree": "css-tree/dist/csstree.min.js"
};
var $a8848f9916d99690$var$devDependencies = {
    "@rollup/plugin-commonjs": "^11.0.1",
    "@rollup/plugin-json": "^4.0.1",
    "@rollup/plugin-node-resolve": "^7.0.0",
    coveralls: "^3.0.11",
    eslint: "^6.8.0",
    mocha: "^7.1.1",
    nyc: "^15.0.0",
    rollup: "^1.29.0",
    "source-map": "^0.6.1",
    terser: "^4.6.3"
};
var $a8848f9916d99690$var$engines = {
    node: ">=8.0.0"
};
var $a8848f9916d99690$var$files = [
    "dist",
    "lib"
];
var $a8848f9916d99690$var$require$$2 = {
    name: $a8848f9916d99690$var$name,
    version: $a8848f9916d99690$var$version,
    description: $a8848f9916d99690$var$description,
    homepage: $a8848f9916d99690$var$homepage,
    author: $a8848f9916d99690$var$author,
    maintainers: $a8848f9916d99690$var$maintainers,
    license: $a8848f9916d99690$var$license,
    repository: $a8848f9916d99690$var$repository,
    bugs: $a8848f9916d99690$var$bugs,
    keywords: $a8848f9916d99690$var$keywords,
    main: $a8848f9916d99690$var$main,
    scripts: $a8848f9916d99690$var$scripts,
    dependencies: $a8848f9916d99690$var$dependencies,
    browser: $a8848f9916d99690$var$browser,
    devDependencies: $a8848f9916d99690$var$devDependencies,
    engines: $a8848f9916d99690$var$engines,
    files: $a8848f9916d99690$var$files
};
var $a8848f9916d99690$var$csstree$2 = $a8848f9916d99690$var$csstree_min.exports;
var $a8848f9916d99690$var$parse = $a8848f9916d99690$var$csstree$2.parse;
var $a8848f9916d99690$var$compress = $a8848f9916d99690$var$compress$1;
var $a8848f9916d99690$var$generate = $a8848f9916d99690$var$csstree$2.generate;
function $a8848f9916d99690$var$debugOutput(name42, options, startTime, data) {
    if (options.debug) console.error("## " + name42 + " done in %d ms\n", Date.now() - startTime);
    return data;
}
function $a8848f9916d99690$var$createDefaultLogger(level) {
    var lastDebug;
    return function logger(title, ast) {
        var line = title;
        if (ast) line = "[" + ((Date.now() - lastDebug) / 1000).toFixed(3) + "s] " + line;
        if (level > 1 && ast) {
            var css = $a8848f9916d99690$var$generate(ast);
            if (level === 2 && css.length > 256) css = css.substr(0, 256) + "...";
            line += "\n  " + css + "\n";
        }
        console.error(line);
        lastDebug = Date.now();
    };
}
function $a8848f9916d99690$var$copy(obj) {
    var result = {
    };
    for(var key in obj)result[key] = obj[key];
    return result;
}
function $a8848f9916d99690$var$buildCompressOptions(options) {
    options = $a8848f9916d99690$var$copy(options);
    if (typeof options.logger !== "function" && options.debug) options.logger = $a8848f9916d99690$var$createDefaultLogger(options.debug);
    return options;
}
function $a8848f9916d99690$var$runHandler(ast, options, handlers) {
    if (!Array.isArray(handlers)) handlers = [
        handlers
    ];
    handlers.forEach(function(fn) {
        fn(ast, options);
    });
}
function $a8848f9916d99690$var$minify(context, source, options) {
    options = options || {
    };
    var filename = options.filename || "<unknown>";
    var result;
    var ast = $a8848f9916d99690$var$debugOutput("parsing", options, Date.now(), $a8848f9916d99690$var$parse(source, {
        context: context,
        filename: filename,
        positions: Boolean(options.sourceMap)
    }));
    if (options.beforeCompress) $a8848f9916d99690$var$debugOutput("beforeCompress", options, Date.now(), $a8848f9916d99690$var$runHandler(ast, options, options.beforeCompress));
    var compressResult = $a8848f9916d99690$var$debugOutput("compress", options, Date.now(), $a8848f9916d99690$var$compress(ast, $a8848f9916d99690$var$buildCompressOptions(options)));
    if (options.afterCompress) $a8848f9916d99690$var$debugOutput("afterCompress", options, Date.now(), $a8848f9916d99690$var$runHandler(compressResult, options, options.afterCompress));
    if (options.sourceMap) result = $a8848f9916d99690$var$debugOutput("generate(sourceMap: true)", options, Date.now(), function() {
        var tmp = $a8848f9916d99690$var$generate(compressResult.ast, {
            sourceMap: true
        });
        tmp.map._file = filename;
        tmp.map.setSourceContent(filename, source);
        return tmp;
    }());
    else result = $a8848f9916d99690$var$debugOutput("generate", options, Date.now(), {
        css: $a8848f9916d99690$var$generate(compressResult.ast),
        map: null
    });
    return result;
}
function $a8848f9916d99690$var$minifyStylesheet(source, options) {
    return $a8848f9916d99690$var$minify("stylesheet", source, options);
}
function $a8848f9916d99690$var$minifyBlock(source, options) {
    return $a8848f9916d99690$var$minify("declarationList", source, options);
}
var $a8848f9916d99690$var$lib = {
    version: $a8848f9916d99690$var$require$$2.version,
    minify: $a8848f9916d99690$var$minifyStylesheet,
    minifyBlock: $a8848f9916d99690$var$minifyBlock,
    syntax: Object.assign({
        compress: $a8848f9916d99690$var$compress
    }, $a8848f9916d99690$var$csstree$2)
};
const $a8848f9916d99690$var$csso = $a8848f9916d99690$var$lib;
$a8848f9916d99690$var$minifyStyles$1.type = "visitor";
$a8848f9916d99690$var$minifyStyles$1.name = "minifyStyles";
$a8848f9916d99690$var$minifyStyles$1.active = true;
$a8848f9916d99690$var$minifyStyles$1.description = "minifies styles and removes unused styles based on usage data";
$a8848f9916d99690$var$minifyStyles$1.fn = (_root, { usage: usage , ...params })=>{
    let enableTagsUsage = true;
    let enableIdsUsage = true;
    let enableClassesUsage = true;
    let forceUsageDeoptimized = false;
    if (typeof usage === "boolean") {
        enableTagsUsage = usage;
        enableIdsUsage = usage;
        enableClassesUsage = usage;
    } else if (usage) {
        enableTagsUsage = usage.tags == null ? true : usage.tags;
        enableIdsUsage = usage.ids == null ? true : usage.ids;
        enableClassesUsage = usage.classes == null ? true : usage.classes;
        forceUsageDeoptimized = usage.force == null ? false : usage.force;
    }
    const styleElements = [];
    const elementsWithStyleAttributes = [];
    let deoptimized = false;
    const tagsUsage = new Set;
    const idsUsage = new Set;
    const classesUsage = new Set;
    return {
        element: {
            enter: (node)=>{
                if (node.name === "script") deoptimized = true;
                for (const name43 of Object.keys(node.attributes))if (name43.startsWith("on")) deoptimized = true;
                tagsUsage.add(node.name);
                if (node.attributes.id != null) idsUsage.add(node.attributes.id);
                if (node.attributes.class != null) for (const className of node.attributes.class.split(/\s+/))classesUsage.add(className);
                if (node.name === "style" && node.children.length !== 0) styleElements.push(node);
                else if (node.attributes.style != null) elementsWithStyleAttributes.push(node);
            }
        },
        root: {
            exit: ()=>{
                const cssoUsage = {
                };
                if (deoptimized === false || forceUsageDeoptimized === true) {
                    if (enableTagsUsage && tagsUsage.size !== 0) cssoUsage.tags = Array.from(tagsUsage);
                    if (enableIdsUsage && idsUsage.size !== 0) cssoUsage.ids = Array.from(idsUsage);
                    if (enableClassesUsage && classesUsage.size !== 0) cssoUsage.classes = Array.from(classesUsage);
                }
                for (const node of styleElements)if (node.children[0].type === "text" || node.children[0].type === "cdata") {
                    const cssText = node.children[0].value;
                    const minified = $a8848f9916d99690$var$csso.minify(cssText, {
                        ...params,
                        usage: cssoUsage
                    }).css;
                    if (cssText.indexOf(">") >= 0 || cssText.indexOf("<") >= 0) {
                        node.children[0].type = "cdata";
                        node.children[0].value = minified;
                    } else {
                        node.children[0].type = "text";
                        node.children[0].value = minified;
                    }
                }
                for (const node10 of elementsWithStyleAttributes){
                    const elemStyle = node10.attributes.style;
                    node10.attributes.style = $a8848f9916d99690$var$csso.minifyBlock(elemStyle, {
                        ...params
                    }).css;
                }
            }
        }
    };
};
var $a8848f9916d99690$var$cleanupIDs$1 = {
};
const { visitSkip: $a8848f9916d99690$var$visitSkip$3  } = $a8848f9916d99690$var$xast;
const { referencesProps: $a8848f9916d99690$var$referencesProps$3  } = $a8848f9916d99690$var$_collections;
$a8848f9916d99690$var$cleanupIDs$1.type = "visitor";
$a8848f9916d99690$var$cleanupIDs$1.name = "cleanupIDs";
$a8848f9916d99690$var$cleanupIDs$1.active = true;
$a8848f9916d99690$var$cleanupIDs$1.description = "removes unused IDs and minifies used";
const $a8848f9916d99690$var$regReferencesUrl = /\burl\(("|')?#(.+?)\1\)/;
const $a8848f9916d99690$var$regReferencesHref = /^#(.+?)$/;
const $a8848f9916d99690$var$regReferencesBegin = /(\w+)\./;
const $a8848f9916d99690$var$generateIDchars = [
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "g",
    "h",
    "i",
    "j",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z",
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z"
];
const $a8848f9916d99690$var$maxIDindex = $a8848f9916d99690$var$generateIDchars.length - 1;
const $a8848f9916d99690$var$hasStringPrefix = (string, prefixes)=>{
    for (const prefix of prefixes){
        if (string.startsWith(prefix)) return true;
    }
    return false;
};
const $a8848f9916d99690$var$generateID = (currentID)=>{
    if (currentID == null) return [
        0
    ];
    currentID[currentID.length - 1] += 1;
    for(let i = currentID.length - 1; i > 0; i--)if (currentID[i] > $a8848f9916d99690$var$maxIDindex) {
        currentID[i] = 0;
        if (currentID[i - 1] !== undefined) currentID[i - 1]++;
    }
    if (currentID[0] > $a8848f9916d99690$var$maxIDindex) {
        currentID[0] = 0;
        currentID.unshift(0);
    }
    return currentID;
};
const $a8848f9916d99690$var$getIDstring = (arr, prefix)=>prefix + arr.map((i)=>$a8848f9916d99690$var$generateIDchars[i]
    ).join("")
;
$a8848f9916d99690$var$cleanupIDs$1.fn = (_root, params)=>{
    const { remove: remove = true , minify: minify = true , prefix: prefix = "" , preserve: preserve = [] , preservePrefixes: preservePrefixes = [] , force: force = false  } = params;
    const preserveIDs = new Set(Array.isArray(preserve) ? preserve : preserve ? [
        preserve
    ] : []);
    const preserveIDPrefixes = Array.isArray(preservePrefixes) ? preservePrefixes : preservePrefixes ? [
        preservePrefixes
    ] : [];
    const nodeById = new Map;
    const referencesById = new Map;
    let deoptimized = false;
    return {
        element: {
            enter: (node)=>{
                if (force == false) {
                    if ((node.name === "style" || node.name === "script") && node.children.length !== 0) {
                        deoptimized = true;
                        return;
                    }
                    if (node.name === "svg") {
                        let hasDefsOnly = true;
                        for (const child of node.children)if (child.type !== "element" || child.name !== "defs") {
                            hasDefsOnly = false;
                            break;
                        }
                        if (hasDefsOnly) return $a8848f9916d99690$var$visitSkip$3;
                    }
                }
                for (const [name44, value] of Object.entries(node.attributes))if (name44 === "id") {
                    const id = value;
                    if (nodeById.has(id)) delete node.attributes.id;
                    else nodeById.set(id, node);
                } else {
                    let id = null;
                    if ($a8848f9916d99690$var$referencesProps$3.includes(name44)) {
                        const match = value.match($a8848f9916d99690$var$regReferencesUrl);
                        if (match != null) id = match[2];
                    }
                    if (name44 === "href" || name44.endsWith(":href")) {
                        const match = value.match($a8848f9916d99690$var$regReferencesHref);
                        if (match != null) id = match[1];
                    }
                    if (name44 === "begin") {
                        const match = value.match($a8848f9916d99690$var$regReferencesBegin);
                        if (match != null) id = match[1];
                    }
                    if (id != null) {
                        let refs = referencesById.get(id);
                        if (refs == null) {
                            refs = [];
                            referencesById.set(id, refs);
                        }
                        refs.push({
                            element: node,
                            name: name44,
                            value: value
                        });
                    }
                }
            }
        },
        root: {
            exit: ()=>{
                if (deoptimized) return;
                const isIdPreserved = (id)=>preserveIDs.has(id) || $a8848f9916d99690$var$hasStringPrefix(id, preserveIDPrefixes)
                ;
                let currentID = null;
                for (const [id1, refs] of referencesById){
                    const node = nodeById.get(id1);
                    if (node != null) {
                        if (minify && isIdPreserved(id1) === false) {
                            let currentIDString = null;
                            do {
                                currentID = $a8848f9916d99690$var$generateID(currentID);
                                currentIDString = $a8848f9916d99690$var$getIDstring(currentID, prefix);
                            }while (isIdPreserved(currentIDString))
                            node.attributes.id = currentIDString;
                            for (const { element: element , name: name , value: value  } of refs)if (value.includes("#")) element.attributes[name] = value.replace(`#${id1}`, `#${currentIDString}`);
                            else element.attributes[name] = value.replace(`${id1}.`, `${currentIDString}.`);
                        }
                        nodeById.delete(id1);
                    }
                }
                if (remove) {
                    for (const [id, node] of nodeById)if (isIdPreserved(id) === false) delete node.attributes.id;
                }
            }
        }
    };
};
var $a8848f9916d99690$var$removeUselessDefs$1 = {
};
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$e  } = $a8848f9916d99690$var$xast;
const { elemsGroups: $a8848f9916d99690$var$elemsGroups$4  } = $a8848f9916d99690$var$_collections;
$a8848f9916d99690$var$removeUselessDefs$1.type = "visitor";
$a8848f9916d99690$var$removeUselessDefs$1.name = "removeUselessDefs";
$a8848f9916d99690$var$removeUselessDefs$1.active = true;
$a8848f9916d99690$var$removeUselessDefs$1.description = "removes elements in <defs> without id";
$a8848f9916d99690$var$removeUselessDefs$1.fn = ()=>({
        element: {
            enter: (node, parentNode)=>{
                if (node.name === "defs") {
                    const usefulNodes = [];
                    $a8848f9916d99690$var$collectUsefulNodes(node, usefulNodes);
                    if (usefulNodes.length === 0) $a8848f9916d99690$var$detachNodeFromParent$e(node, parentNode);
                    for (const usefulNode of usefulNodes)usefulNode.parentNode = node;
                    node.children = usefulNodes;
                } else if ($a8848f9916d99690$var$elemsGroups$4.nonRendering.includes(node.name) && node.attributes.id == null) $a8848f9916d99690$var$detachNodeFromParent$e(node, parentNode);
            }
        }
    })
;
const $a8848f9916d99690$var$collectUsefulNodes = (node, usefulNodes)=>{
    for (const child of node.children)if (child.type === "element") {
        if (child.attributes.id != null || child.name === "style") usefulNodes.push(child);
        else $a8848f9916d99690$var$collectUsefulNodes(child, usefulNodes);
    }
};
var $a8848f9916d99690$var$cleanupNumericValues$1 = {
};
var $a8848f9916d99690$var$tools = {
};
$a8848f9916d99690$var$tools.encodeSVGDatauri = (str, type)=>{
    var prefix = "data:image/svg+xml";
    if (!type || type === "base64") {
        prefix += ";base64,";
        str = prefix + $a8848f9916d99690$require$Buffer.from(str).toString("base64");
    } else if (type === "enc") str = prefix + "," + encodeURIComponent(str);
    else if (type === "unenc") str = prefix + "," + str;
    return str;
};
$a8848f9916d99690$var$tools.decodeSVGDatauri = (str)=>{
    var regexp = /data:image\/svg\+xml(;charset=[^;,]*)?(;base64)?,(.*)/;
    var match = regexp.exec(str);
    if (!match) return str;
    var data = match[3];
    if (match[2]) str = $a8848f9916d99690$require$Buffer.from(data, "base64").toString("utf8");
    else if (data.charAt(0) === "%") str = decodeURIComponent(data);
    else if (data.charAt(0) === "<") str = data;
    return str;
};
$a8848f9916d99690$var$tools.cleanupOutData = (data, params, command)=>{
    let str = "";
    let delimiter;
    let prev;
    data.forEach((item, i)=>{
        delimiter = " ";
        if (i == 0) delimiter = "";
        if (params.noSpaceAfterFlags && (command == "A" || command == "a")) {
            var pos = i % 7;
            if (pos == 4 || pos == 5) delimiter = "";
        }
        const itemStr = params.leadingZero ? $a8848f9916d99690$var$removeLeadingZero$3(item) : item.toString();
        if (params.negativeExtraSpace && delimiter != "" && (item < 0 || itemStr.charAt(0) === "." && prev % 1 !== 0)) delimiter = "";
        prev = item;
        str += delimiter + itemStr;
    });
    return str;
};
const $a8848f9916d99690$var$removeLeadingZero$3 = (num)=>{
    var strNum = num.toString();
    if (0 < num && num < 1 && strNum.charAt(0) === "0") strNum = strNum.slice(1);
    else if (-1 < num && num < 0 && strNum.charAt(1) === "0") strNum = strNum.charAt(0) + strNum.slice(2);
    return strNum;
};
$a8848f9916d99690$var$tools.removeLeadingZero = $a8848f9916d99690$var$removeLeadingZero$3;
const { removeLeadingZero: $a8848f9916d99690$var$removeLeadingZero$2  } = $a8848f9916d99690$var$tools;
$a8848f9916d99690$var$cleanupNumericValues$1.name = "cleanupNumericValues";
$a8848f9916d99690$var$cleanupNumericValues$1.type = "visitor";
$a8848f9916d99690$var$cleanupNumericValues$1.active = true;
$a8848f9916d99690$var$cleanupNumericValues$1.description = "rounds numeric values to the fixed precision, removes default ‘px’ units";
const $a8848f9916d99690$var$regNumericValues$3 = /^([-+]?\d*\.?\d+([eE][-+]?\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/;
const $a8848f9916d99690$var$absoluteLengths$1 = {
    cm: 96 / 2.54,
    mm: 96 / 25.4,
    in: 96,
    pt: 4 / 3,
    pc: 16,
    px: 1
};
$a8848f9916d99690$var$cleanupNumericValues$1.fn = (_root, params)=>{
    const { floatPrecision: floatPrecision = 3 , leadingZero: leadingZero = true , defaultPx: defaultPx = true , convertToPx: convertToPx = true  } = params;
    return {
        element: {
            enter: (node)=>{
                if (node.attributes.viewBox != null) {
                    const nums = node.attributes.viewBox.split(/\s,?\s*|,\s*/g);
                    node.attributes.viewBox = nums.map((value)=>{
                        const num = Number(value);
                        return Number.isNaN(num) ? value : Number(num.toFixed(floatPrecision));
                    }).join(" ");
                }
                for (const [name45, value1] of Object.entries(node.attributes)){
                    if (name45 === "version") continue;
                    const match = value1.match($a8848f9916d99690$var$regNumericValues$3);
                    if (match) {
                        let num = Number(Number(match[1]).toFixed(floatPrecision));
                        let matchedUnit = match[3] || "";
                        let units = matchedUnit;
                        if (convertToPx && units !== "" && units in $a8848f9916d99690$var$absoluteLengths$1) {
                            const pxNum = Number(($a8848f9916d99690$var$absoluteLengths$1[units] * Number(match[1])).toFixed(floatPrecision));
                            if (pxNum.toString().length < match[0].length) {
                                num = pxNum;
                                units = "px";
                            }
                        }
                        let str;
                        if (leadingZero) str = $a8848f9916d99690$var$removeLeadingZero$2(num);
                        else str = num.toString();
                        if (defaultPx && units === "px") units = "";
                        node.attributes[name45] = str + units;
                    }
                }
            }
        }
    };
};
var $a8848f9916d99690$var$convertColors$1 = {
};
const $a8848f9916d99690$var$collections = $a8848f9916d99690$var$_collections;
$a8848f9916d99690$var$convertColors$1.type = "visitor";
$a8848f9916d99690$var$convertColors$1.name = "convertColors";
$a8848f9916d99690$var$convertColors$1.active = true;
$a8848f9916d99690$var$convertColors$1.description = "converts colors: rgb() to #rrggbb and #rrggbb to #rgb";
const $a8848f9916d99690$var$rNumber = "([+-]?(?:\\d*\\.\\d+|\\d+\\.?)%?)";
const $a8848f9916d99690$var$rComma = "\\s*,\\s*";
const $a8848f9916d99690$var$regRGB = new RegExp("^rgb\\(\\s*" + $a8848f9916d99690$var$rNumber + $a8848f9916d99690$var$rComma + $a8848f9916d99690$var$rNumber + $a8848f9916d99690$var$rComma + $a8848f9916d99690$var$rNumber + "\\s*\\)$");
const $a8848f9916d99690$var$regHEX = /^#(([a-fA-F0-9])\2){3}$/;
const $a8848f9916d99690$var$convertRgbToHex = ([r, g, b])=>{
    const hexNumber = (256 + r << 8 | g) << 8 | b;
    return "#" + hexNumber.toString(16).slice(1).toUpperCase();
};
$a8848f9916d99690$var$convertColors$1.fn = (_root, params)=>{
    const { currentColor: currentColor = false , names2hex: names2hex = true , rgb2hex: rgb2hex = true , shorthex: shorthex = true , shortname: shortname = true  } = params;
    return {
        element: {
            enter: (node)=>{
                for (const [name46, value] of Object.entries(node.attributes))if ($a8848f9916d99690$var$collections.colorsProps.includes(name46)) {
                    let val = value;
                    if (currentColor) {
                        let matched;
                        if (typeof currentColor === "string") matched = val === currentColor;
                        else if (currentColor instanceof RegExp) matched = currentColor.exec(val) != null;
                        else matched = val !== "none";
                        if (matched) val = "currentColor";
                    }
                    if (names2hex) {
                        const colorName = val.toLowerCase();
                        if ($a8848f9916d99690$var$collections.colorsNames[colorName] != null) val = $a8848f9916d99690$var$collections.colorsNames[colorName];
                    }
                    if (rgb2hex) {
                        let match = val.match($a8848f9916d99690$var$regRGB);
                        if (match != null) {
                            let nums = match.slice(1, 4).map((m)=>{
                                let n;
                                if (m.indexOf("%") > -1) n = Math.round(parseFloat(m) * 2.55);
                                else n = Number(m);
                                return Math.max(0, Math.min(n, 255));
                            });
                            val = $a8848f9916d99690$var$convertRgbToHex(nums);
                        }
                    }
                    if (shorthex) {
                        let match = val.match($a8848f9916d99690$var$regHEX);
                        if (match != null) val = "#" + match[0][1] + match[0][3] + match[0][5];
                    }
                    if (shortname) {
                        const colorName = val.toLowerCase();
                        if ($a8848f9916d99690$var$collections.colorsShortNames[colorName] != null) val = $a8848f9916d99690$var$collections.colorsShortNames[colorName];
                    }
                    node.attributes[name46] = val;
                }
            }
        }
    };
};
var $a8848f9916d99690$var$removeUnknownsAndDefaults$1 = {
};
var $a8848f9916d99690$var$style = {
};
const $a8848f9916d99690$var$stable = $a8848f9916d99690$var$stable$3.exports;
const $a8848f9916d99690$var$csstree$1 = $a8848f9916d99690$var$csstree_min.exports;
const $a8848f9916d99690$var$specificity = $a8848f9916d99690$var$specificity$4;
const { visit: $a8848f9916d99690$var$visit$3 , matches: $a8848f9916d99690$var$matches  } = $a8848f9916d99690$var$xast;
const { attrsGroups: $a8848f9916d99690$var$attrsGroups$3 , inheritableAttrs: $a8848f9916d99690$var$inheritableAttrs$3 , presentationNonInheritableGroupAttrs: $a8848f9916d99690$var$presentationNonInheritableGroupAttrs$2  } = $a8848f9916d99690$var$_collections;
const $a8848f9916d99690$var$csstreeWalkSkip = $a8848f9916d99690$var$csstree$1.walk.skip;
const $a8848f9916d99690$var$parseRule = (ruleNode, dynamic)=>{
    let selectors;
    let selectorsSpecificity;
    const declarations = [];
    $a8848f9916d99690$var$csstree$1.walk(ruleNode, (cssNode)=>{
        if (cssNode.type === "SelectorList") {
            selectorsSpecificity = $a8848f9916d99690$var$specificity(cssNode);
            const newSelectorsNode = $a8848f9916d99690$var$csstree$1.clone(cssNode);
            $a8848f9916d99690$var$csstree$1.walk(newSelectorsNode, (pseudoClassNode, item, list)=>{
                if (pseudoClassNode.type === "PseudoClassSelector") {
                    dynamic = true;
                    list.remove(item);
                }
            });
            selectors = $a8848f9916d99690$var$csstree$1.generate(newSelectorsNode);
            return $a8848f9916d99690$var$csstreeWalkSkip;
        }
        if (cssNode.type === "Declaration") {
            declarations.push({
                name: cssNode.property,
                value: $a8848f9916d99690$var$csstree$1.generate(cssNode.value),
                important: cssNode.important === true
            });
            return $a8848f9916d99690$var$csstreeWalkSkip;
        }
    });
    if (selectors == null || selectorsSpecificity == null) throw Error("assert");
    return {
        dynamic: dynamic,
        selectors: selectors,
        specificity: selectorsSpecificity,
        declarations: declarations
    };
};
const $a8848f9916d99690$var$parseStylesheet = (css, dynamic)=>{
    const rules = [];
    const ast = $a8848f9916d99690$var$csstree$1.parse(css, {
        parseValue: false,
        parseAtrulePrelude: false
    });
    $a8848f9916d99690$var$csstree$1.walk(ast, (cssNode)=>{
        if (cssNode.type === "Rule") {
            rules.push($a8848f9916d99690$var$parseRule(cssNode, dynamic || false));
            return $a8848f9916d99690$var$csstreeWalkSkip;
        }
        if (cssNode.type === "Atrule") {
            if (cssNode.name === "keyframes") return $a8848f9916d99690$var$csstreeWalkSkip;
            $a8848f9916d99690$var$csstree$1.walk(cssNode, (ruleNode)=>{
                if (ruleNode.type === "Rule") {
                    rules.push($a8848f9916d99690$var$parseRule(ruleNode, dynamic || true));
                    return $a8848f9916d99690$var$csstreeWalkSkip;
                }
            });
            return $a8848f9916d99690$var$csstreeWalkSkip;
        }
    });
    return rules;
};
const $a8848f9916d99690$var$parseStyleDeclarations = (css)=>{
    const declarations = [];
    const ast = $a8848f9916d99690$var$csstree$1.parse(css, {
        context: "declarationList",
        parseValue: false
    });
    $a8848f9916d99690$var$csstree$1.walk(ast, (cssNode)=>{
        if (cssNode.type === "Declaration") declarations.push({
            name: cssNode.property,
            value: $a8848f9916d99690$var$csstree$1.generate(cssNode.value),
            important: cssNode.important === true
        });
    });
    return declarations;
};
const $a8848f9916d99690$var$computeOwnStyle = (stylesheet, node)=>{
    const computedStyle = {
    };
    const importantStyles = new Map;
    for (const [name48, value] of Object.entries(node.attributes))if ($a8848f9916d99690$var$attrsGroups$3.presentation.includes(name48)) {
        computedStyle[name48] = {
            type: "static",
            inherited: false,
            value: value
        };
        importantStyles.set(name48, false);
    }
    for (const { selectors: selectors , declarations: declarations , dynamic: dynamic  } of stylesheet.rules){
        if ($a8848f9916d99690$var$matches(node, selectors)) for (const { name: name49 , value: value , important: important  } of declarations){
            const computed = computedStyle[name49];
            if (computed && computed.type === "dynamic") continue;
            if (dynamic) {
                computedStyle[name49] = {
                    type: "dynamic",
                    inherited: false
                };
                continue;
            }
            if (computed == null || important === true || importantStyles.get(name49) === false) {
                computedStyle[name49] = {
                    type: "static",
                    inherited: false,
                    value: value
                };
                importantStyles.set(name49, important);
            }
        }
    }
    const styleDeclarations = node.attributes.style == null ? [] : $a8848f9916d99690$var$parseStyleDeclarations(node.attributes.style);
    for (const { name: name47 , value: value2 , important: important  } of styleDeclarations){
        const computed = computedStyle[name47];
        if (computed && computed.type === "dynamic") continue;
        if (computed == null || important === true || importantStyles.get(name47) === false) {
            computedStyle[name47] = {
                type: "static",
                inherited: false,
                value: value2
            };
            importantStyles.set(name47, important);
        }
    }
    return computedStyle;
};
const $a8848f9916d99690$var$compareSpecificity = (a, b)=>{
    for(var i = 0; i < 4; i += 1){
        if (a[i] < b[i]) return -1;
        else if (a[i] > b[i]) return 1;
    }
    return 0;
};
const $a8848f9916d99690$var$collectStylesheet$5 = (root)=>{
    const rules = [];
    const parents = new Map;
    $a8848f9916d99690$var$visit$3(root, {
        element: {
            enter: (node, parentNode)=>{
                parents.set(node, parentNode);
                if (node.name === "style") {
                    const dynamic = node.attributes.media != null && node.attributes.media !== "all";
                    if (node.attributes.type == null || node.attributes.type === "" || node.attributes.type === "text/css") {
                        const children = node.children;
                        for (const child of children)if (child.type === "text" || child.type === "cdata") rules.push(...$a8848f9916d99690$var$parseStylesheet(child.value, dynamic));
                    }
                }
            }
        }
    });
    $a8848f9916d99690$var$stable.inplace(rules, (a, b)=>$a8848f9916d99690$var$compareSpecificity(a.specificity, b.specificity)
    );
    return {
        rules: rules,
        parents: parents
    };
};
$a8848f9916d99690$var$style.collectStylesheet = $a8848f9916d99690$var$collectStylesheet$5;
const $a8848f9916d99690$var$computeStyle$5 = (stylesheet, node)=>{
    const { parents: parents  } = stylesheet;
    const computedStyles = $a8848f9916d99690$var$computeOwnStyle(stylesheet, node);
    let parent = parents.get(node);
    while(parent != null && parent.type !== "root"){
        const inheritedStyles = $a8848f9916d99690$var$computeOwnStyle(stylesheet, parent);
        for (const [name50, computed] of Object.entries(inheritedStyles))if (computedStyles[name50] == null && $a8848f9916d99690$var$inheritableAttrs$3.includes(name50) === true && $a8848f9916d99690$var$presentationNonInheritableGroupAttrs$2.includes(name50) === false) computedStyles[name50] = {
            ...computed,
            inherited: true
        };
        parent = parents.get(parent);
    }
    return computedStyles;
};
$a8848f9916d99690$var$style.computeStyle = $a8848f9916d99690$var$computeStyle$5;
const { visitSkip: $a8848f9916d99690$var$visitSkip$2 , detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$d  } = $a8848f9916d99690$var$xast;
const { collectStylesheet: $a8848f9916d99690$var$collectStylesheet$4 , computeStyle: $a8848f9916d99690$var$computeStyle$4  } = $a8848f9916d99690$var$style;
const { elems: $a8848f9916d99690$var$elems , attrsGroups: $a8848f9916d99690$var$attrsGroups$2 , elemsGroups: $a8848f9916d99690$var$elemsGroups$3 , attrsGroupsDefaults: $a8848f9916d99690$var$attrsGroupsDefaults$1 , presentationNonInheritableGroupAttrs: $a8848f9916d99690$var$presentationNonInheritableGroupAttrs$1  } = $a8848f9916d99690$var$_collections;
$a8848f9916d99690$var$removeUnknownsAndDefaults$1.type = "visitor";
$a8848f9916d99690$var$removeUnknownsAndDefaults$1.name = "removeUnknownsAndDefaults";
$a8848f9916d99690$var$removeUnknownsAndDefaults$1.active = true;
$a8848f9916d99690$var$removeUnknownsAndDefaults$1.description = "removes unknown elements content and attributes, removes attrs with default values";
const $a8848f9916d99690$var$allowedChildrenPerElement = new Map;
const $a8848f9916d99690$var$allowedAttributesPerElement = new Map;
const $a8848f9916d99690$var$attributesDefaultsPerElement = new Map;
for (const [name, config] of Object.entries($a8848f9916d99690$var$elems)){
    const allowedChildren = new Set;
    if (config.content) for (const elementName of config.content)allowedChildren.add(elementName);
    if (config.contentGroups) for (const contentGroupName of config.contentGroups){
        const elemsGroup = $a8848f9916d99690$var$elemsGroups$3[contentGroupName];
        if (elemsGroup) for (const elementName of elemsGroup)allowedChildren.add(elementName);
    }
    const allowedAttributes = new Set;
    if (config.attrs) for (const attrName of config.attrs)allowedAttributes.add(attrName);
    const attributesDefaults = new Map;
    if (config.defaults) for (const [attrName1, defaultValue] of Object.entries(config.defaults))attributesDefaults.set(attrName1, defaultValue);
    for (const attrsGroupName of config.attrsGroups){
        const attrsGroup = $a8848f9916d99690$var$attrsGroups$2[attrsGroupName];
        if (attrsGroup) for (const attrName of attrsGroup)allowedAttributes.add(attrName);
        const groupDefaults = $a8848f9916d99690$var$attrsGroupsDefaults$1[attrsGroupName];
        if (groupDefaults) for (const [attrName2, defaultValue] of Object.entries(groupDefaults))attributesDefaults.set(attrName2, defaultValue);
    }
    $a8848f9916d99690$var$allowedChildrenPerElement.set(name, allowedChildren);
    $a8848f9916d99690$var$allowedAttributesPerElement.set(name, allowedAttributes);
    $a8848f9916d99690$var$attributesDefaultsPerElement.set(name, attributesDefaults);
}
$a8848f9916d99690$var$removeUnknownsAndDefaults$1.fn = (root, params)=>{
    const { unknownContent: unknownContent = true , unknownAttrs: unknownAttrs = true , defaultAttrs: defaultAttrs = true , uselessOverrides: uselessOverrides = true , keepDataAttrs: keepDataAttrs = true , keepAriaAttrs: keepAriaAttrs = true , keepRoleAttr: keepRoleAttr = false  } = params;
    const stylesheet = $a8848f9916d99690$var$collectStylesheet$4(root);
    return {
        element: {
            enter: (node, parentNode)=>{
                if (node.name.includes(":")) return;
                if (node.name === "foreignObject") return $a8848f9916d99690$var$visitSkip$2;
                if (unknownContent && parentNode.type === "element") {
                    const allowedChildren = $a8848f9916d99690$var$allowedChildrenPerElement.get(parentNode.name);
                    if (allowedChildren == null || allowedChildren.size === 0) {
                        if ($a8848f9916d99690$var$allowedChildrenPerElement.get(node.name) == null) {
                            $a8848f9916d99690$var$detachNodeFromParent$d(node, parentNode);
                            return;
                        }
                    } else if (allowedChildren.has(node.name) === false) {
                        $a8848f9916d99690$var$detachNodeFromParent$d(node, parentNode);
                        return;
                    }
                }
                const allowedAttributes = $a8848f9916d99690$var$allowedAttributesPerElement.get(node.name);
                const attributesDefaults = $a8848f9916d99690$var$attributesDefaultsPerElement.get(node.name);
                const computedParentStyle = parentNode.type === "element" ? $a8848f9916d99690$var$computeStyle$4(stylesheet, parentNode) : null;
                for (const [name51, value] of Object.entries(node.attributes)){
                    if (keepDataAttrs && name51.startsWith("data-")) continue;
                    if (keepAriaAttrs && name51.startsWith("aria-")) continue;
                    if (keepRoleAttr && name51 === "role") continue;
                    if (name51 === "xmlns") continue;
                    if (name51.includes(":")) {
                        const [prefix] = name51.split(":");
                        if (prefix !== "xml" && prefix !== "xlink") continue;
                    }
                    if (unknownAttrs && allowedAttributes && allowedAttributes.has(name51) === false) delete node.attributes[name51];
                    if (defaultAttrs && node.attributes.id == null && attributesDefaults && attributesDefaults.get(name51) === value) {
                        if (computedParentStyle == null || computedParentStyle[name51] == null) delete node.attributes[name51];
                    }
                    if (uselessOverrides && node.attributes.id == null) {
                        const style = computedParentStyle == null ? null : computedParentStyle[name51];
                        if ($a8848f9916d99690$var$presentationNonInheritableGroupAttrs$1.includes(name51) === false && style != null && style.type === "static" && style.value === value) delete node.attributes[name51];
                    }
                }
            }
        }
    };
};
var $a8848f9916d99690$var$removeNonInheritableGroupAttrs$1 = {
};
$a8848f9916d99690$var$removeNonInheritableGroupAttrs$1.name = "removeNonInheritableGroupAttrs";
$a8848f9916d99690$var$removeNonInheritableGroupAttrs$1.type = "perItem";
$a8848f9916d99690$var$removeNonInheritableGroupAttrs$1.active = true;
$a8848f9916d99690$var$removeNonInheritableGroupAttrs$1.description = "removes non-inheritable group’s presentational attributes";
const { inheritableAttrs: $a8848f9916d99690$var$inheritableAttrs$2 , attrsGroups: $a8848f9916d99690$var$attrsGroups$1 , presentationNonInheritableGroupAttrs: $a8848f9916d99690$var$presentationNonInheritableGroupAttrs  } = $a8848f9916d99690$var$_collections;
$a8848f9916d99690$var$removeNonInheritableGroupAttrs$1.fn = function(item) {
    if (item.type === "element" && item.name === "g") {
        for (const name52 of Object.keys(item.attributes))if ($a8848f9916d99690$var$attrsGroups$1.presentation.includes(name52) === true && $a8848f9916d99690$var$inheritableAttrs$2.includes(name52) === false && $a8848f9916d99690$var$presentationNonInheritableGroupAttrs.includes(name52) === false) delete item.attributes[name52];
    }
};
var $a8848f9916d99690$var$removeUselessStrokeAndFill$1 = {
};
const { visit: $a8848f9916d99690$var$visit$2 , visitSkip: $a8848f9916d99690$var$visitSkip$1 , detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$c  } = $a8848f9916d99690$var$xast;
const { collectStylesheet: $a8848f9916d99690$var$collectStylesheet$3 , computeStyle: $a8848f9916d99690$var$computeStyle$3  } = $a8848f9916d99690$var$style;
const { elemsGroups: $a8848f9916d99690$var$elemsGroups$2  } = $a8848f9916d99690$var$_collections;
$a8848f9916d99690$var$removeUselessStrokeAndFill$1.type = "visitor";
$a8848f9916d99690$var$removeUselessStrokeAndFill$1.name = "removeUselessStrokeAndFill";
$a8848f9916d99690$var$removeUselessStrokeAndFill$1.active = true;
$a8848f9916d99690$var$removeUselessStrokeAndFill$1.description = "removes useless stroke and fill attributes";
$a8848f9916d99690$var$removeUselessStrokeAndFill$1.fn = (root, params)=>{
    const { stroke: removeStroke = true , fill: removeFill = true , removeNone: removeNone = false  } = params;
    let hasStyleOrScript = false;
    $a8848f9916d99690$var$visit$2(root, {
        element: {
            enter: (node)=>{
                if (node.name === "style" || node.name === "script") hasStyleOrScript = true;
            }
        }
    });
    if (hasStyleOrScript) return null;
    const stylesheet = $a8848f9916d99690$var$collectStylesheet$3(root);
    return {
        element: {
            enter: (node, parentNode)=>{
                if (node.attributes.id != null) return $a8848f9916d99690$var$visitSkip$1;
                if ($a8848f9916d99690$var$elemsGroups$2.shape.includes(node.name) == false) return;
                const computedStyle = $a8848f9916d99690$var$computeStyle$3(stylesheet, node);
                const stroke = computedStyle.stroke;
                const strokeOpacity = computedStyle["stroke-opacity"];
                const strokeWidth = computedStyle["stroke-width"];
                const markerEnd = computedStyle["marker-end"];
                const fill = computedStyle.fill;
                const fillOpacity = computedStyle["fill-opacity"];
                const computedParentStyle = parentNode.type === "element" ? $a8848f9916d99690$var$computeStyle$3(stylesheet, parentNode) : null;
                const parentStroke = computedParentStyle == null ? null : computedParentStyle.stroke;
                if (removeStroke) {
                    if (stroke == null || stroke.type === "static" && stroke.value == "none" || strokeOpacity != null && strokeOpacity.type === "static" && strokeOpacity.value === "0" || strokeWidth != null && strokeWidth.type === "static" && strokeWidth.value === "0") {
                        if (strokeWidth != null && strokeWidth.type === "static" && strokeWidth.value === "0" || markerEnd == null) {
                            for (const name53 of Object.keys(node.attributes))if (name53.startsWith("stroke")) delete node.attributes[name53];
                            if (parentStroke != null && parentStroke.type === "static" && parentStroke.value !== "none") node.attributes.stroke = "none";
                        }
                    }
                }
                if (removeFill) {
                    if (fill != null && fill.type === "static" && fill.value === "none" || fillOpacity != null && fillOpacity.type === "static" && fillOpacity.value === "0") {
                        for (const name54 of Object.keys(node.attributes))if (name54.startsWith("fill-")) delete node.attributes[name54];
                        if (fill == null || fill.type === "static" && fill.value !== "none") node.attributes.fill = "none";
                    }
                }
                if (removeNone) {
                    if ((stroke == null || node.attributes.stroke === "none") && (fill != null && fill.type === "static" && fill.value === "none" || node.attributes.fill === "none")) $a8848f9916d99690$var$detachNodeFromParent$c(node, parentNode);
                }
            }
        }
    };
};
var $a8848f9916d99690$var$removeViewBox$1 = {
};
$a8848f9916d99690$var$removeViewBox$1.type = "visitor";
$a8848f9916d99690$var$removeViewBox$1.name = "removeViewBox";
$a8848f9916d99690$var$removeViewBox$1.active = true;
$a8848f9916d99690$var$removeViewBox$1.description = "removes viewBox attribute when possible";
const $a8848f9916d99690$var$viewBoxElems = [
    "svg",
    "pattern",
    "symbol"
];
$a8848f9916d99690$var$removeViewBox$1.fn = ()=>({
        element: {
            enter: (node, parentNode)=>{
                if ($a8848f9916d99690$var$viewBoxElems.includes(node.name) && node.attributes.viewBox != null && node.attributes.width != null && node.attributes.height != null) {
                    if (node.name === "svg" && parentNode.type !== "root") return;
                    const nums = node.attributes.viewBox.split(/[ ,]+/g);
                    if (nums[0] === "0" && nums[1] === "0" && node.attributes.width.replace(/px$/, "") === nums[2] && node.attributes.height.replace(/px$/, "") === nums[3]) delete node.attributes.viewBox;
                }
            }
        }
    })
;
var $a8848f9916d99690$var$cleanupEnableBackground$1 = {
};
const { visit: $a8848f9916d99690$var$visit$1  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$cleanupEnableBackground$1.type = "visitor";
$a8848f9916d99690$var$cleanupEnableBackground$1.name = "cleanupEnableBackground";
$a8848f9916d99690$var$cleanupEnableBackground$1.active = true;
$a8848f9916d99690$var$cleanupEnableBackground$1.description = "remove or cleanup enable-background attribute when possible";
$a8848f9916d99690$var$cleanupEnableBackground$1.fn = (root)=>{
    const regEnableBackground = /^new\s0\s0\s([-+]?\d*\.?\d+([eE][-+]?\d+)?)\s([-+]?\d*\.?\d+([eE][-+]?\d+)?)$/;
    let hasFilter = false;
    $a8848f9916d99690$var$visit$1(root, {
        element: {
            enter: (node)=>{
                if (node.name === "filter") hasFilter = true;
            }
        }
    });
    return {
        element: {
            enter: (node)=>{
                if (node.attributes["enable-background"] == null) return;
                if (hasFilter) {
                    if ((node.name === "svg" || node.name === "mask" || node.name === "pattern") && node.attributes.width != null && node.attributes.height != null) {
                        const match = node.attributes["enable-background"].match(regEnableBackground);
                        if (match != null && node.attributes.width === match[1] && node.attributes.height === match[3]) {
                            if (node.name === "svg") delete node.attributes["enable-background"];
                            else node.attributes["enable-background"] = "new";
                        }
                    }
                } else delete node.attributes["enable-background"];
            }
        }
    };
};
var $a8848f9916d99690$var$removeHiddenElems$1 = {
};
var $a8848f9916d99690$var$path = {
};
const $a8848f9916d99690$var$argsCountPerCommand = {
    M: 2,
    m: 2,
    Z: 0,
    z: 0,
    L: 2,
    l: 2,
    H: 1,
    h: 1,
    V: 1,
    v: 1,
    C: 6,
    c: 6,
    S: 4,
    s: 4,
    Q: 4,
    q: 4,
    T: 2,
    t: 2,
    A: 7,
    a: 7
};
const $a8848f9916d99690$var$isCommand = (c)=>c in $a8848f9916d99690$var$argsCountPerCommand
;
const $a8848f9916d99690$var$isWsp = (c)=>{
    const codePoint = c.codePointAt(0);
    return codePoint === 32 || codePoint === 9 || codePoint === 13 || codePoint === 10;
};
const $a8848f9916d99690$var$isDigit = (c)=>{
    const codePoint = c.codePointAt(0);
    if (codePoint == null) return false;
    return 48 <= codePoint && codePoint <= 57;
};
const $a8848f9916d99690$var$readNumber = (string, cursor)=>{
    let i = cursor;
    let value = "";
    let state = "none";
    for(; i < string.length; i += 1){
        const c = string[i];
        if (c === "+" || c === "-") {
            if (state === "none") {
                state = "sign";
                value += c;
                continue;
            }
            if (state === "e") {
                state = "exponent_sign";
                value += c;
                continue;
            }
        }
        if ($a8848f9916d99690$var$isDigit(c)) {
            if (state === "none" || state === "sign" || state === "whole") {
                state = "whole";
                value += c;
                continue;
            }
            if (state === "decimal_point" || state === "decimal") {
                state = "decimal";
                value += c;
                continue;
            }
            if (state === "e" || state === "exponent_sign" || state === "exponent") {
                state = "exponent";
                value += c;
                continue;
            }
        }
        if (c === ".") {
            if (state === "none" || state === "sign" || state === "whole") {
                state = "decimal_point";
                value += c;
                continue;
            }
        }
        if (c === "E" || c == "e") {
            if (state === "whole" || state === "decimal_point" || state === "decimal") {
                state = "e";
                value += c;
                continue;
            }
        }
        break;
    }
    const number = Number.parseFloat(value);
    if (Number.isNaN(number)) return [
        cursor,
        null
    ];
    else return [
        i - 1,
        number
    ];
};
const $a8848f9916d99690$var$parsePathData$3 = (string)=>{
    const pathData = [];
    let command = null;
    let args = [];
    let argsCount = 0;
    let canHaveComma = false;
    let hadComma = false;
    for(let i = 0; i < string.length; i += 1){
        const c = string.charAt(i);
        if ($a8848f9916d99690$var$isWsp(c)) continue;
        if (canHaveComma && c === ",") {
            if (hadComma) break;
            hadComma = true;
            continue;
        }
        if ($a8848f9916d99690$var$isCommand(c)) {
            if (hadComma) return pathData;
            if (command == null) {
                if (c !== "M" && c !== "m") return pathData;
            } else {
                if (args.length !== 0) return pathData;
            }
            command = c;
            args = [];
            argsCount = $a8848f9916d99690$var$argsCountPerCommand[command];
            canHaveComma = false;
            if (argsCount === 0) pathData.push({
                command: command,
                args: args
            });
            continue;
        }
        if (command == null) return pathData;
        let newCursor = i;
        let number = null;
        if (command === "A" || command === "a") {
            const position = args.length;
            if (position === 0 || position === 1) {
                if (c !== "+" && c !== "-") [newCursor, number] = $a8848f9916d99690$var$readNumber(string, i);
            }
            if (position === 2 || position === 5 || position === 6) [newCursor, number] = $a8848f9916d99690$var$readNumber(string, i);
            if (position === 3 || position === 4) {
                if (c === "0") number = 0;
                if (c === "1") number = 1;
            }
        } else [newCursor, number] = $a8848f9916d99690$var$readNumber(string, i);
        if (number == null) return pathData;
        args.push(number);
        canHaveComma = true;
        hadComma = false;
        i = newCursor;
        if (args.length === argsCount) {
            pathData.push({
                command: command,
                args: args
            });
            if (command === "M") command = "L";
            if (command === "m") command = "l";
            args = [];
        }
    }
    return pathData;
};
$a8848f9916d99690$var$path.parsePathData = $a8848f9916d99690$var$parsePathData$3;
const $a8848f9916d99690$var$stringifyNumber = (number, precision)=>{
    if (precision != null) {
        const ratio = 10 ** precision;
        number = Math.round(number * ratio) / ratio;
    }
    return number.toString().replace(/^0\./, ".").replace(/^-0\./, "-.");
};
const $a8848f9916d99690$var$stringifyArgs = (command, args, precision, disableSpaceAfterFlags)=>{
    let result = "";
    let prev = "";
    for(let i = 0; i < args.length; i += 1){
        const number = args[i];
        const numberString = $a8848f9916d99690$var$stringifyNumber(number, precision);
        if (disableSpaceAfterFlags && (command === "A" || command === "a") && (i % 7 === 4 || i % 7 === 5)) result += numberString;
        else if (i === 0 || numberString.startsWith("-")) result += numberString;
        else if (prev.includes(".") && numberString.startsWith(".")) result += numberString;
        else result += ` ${numberString}`;
        prev = numberString;
    }
    return result;
};
const $a8848f9916d99690$var$stringifyPathData$2 = ({ pathData: pathData , precision: precision , disableSpaceAfterFlags: disableSpaceAfterFlags  })=>{
    let combined = [];
    for(let i = 0; i < pathData.length; i += 1){
        const { command: command , args: args  } = pathData[i];
        if (i === 0) combined.push({
            command: command,
            args: args
        });
        else {
            const last = combined[combined.length - 1];
            if (i === 1) {
                if (command === "L") last.command = "M";
                if (command === "l") last.command = "m";
            }
            if (last.command === command && last.command !== "M" && last.command !== "m" || last.command === "M" && command === "L" || last.command === "m" && command === "l") last.args = [
                ...last.args,
                ...args
            ];
            else combined.push({
                command: command,
                args: args
            });
        }
    }
    let result = "";
    for (const { command: command , args: args  } of combined)result += command + $a8848f9916d99690$var$stringifyArgs(command, args, precision, disableSpaceAfterFlags);
    return result;
};
$a8848f9916d99690$var$path.stringifyPathData = $a8848f9916d99690$var$stringifyPathData$2;
const { querySelector: $a8848f9916d99690$var$querySelector , closestByName: $a8848f9916d99690$var$closestByName , detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$b  } = $a8848f9916d99690$var$xast;
const { collectStylesheet: $a8848f9916d99690$var$collectStylesheet$2 , computeStyle: $a8848f9916d99690$var$computeStyle$2  } = $a8848f9916d99690$var$style;
const { parsePathData: $a8848f9916d99690$var$parsePathData$2  } = $a8848f9916d99690$var$path;
$a8848f9916d99690$var$removeHiddenElems$1.name = "removeHiddenElems";
$a8848f9916d99690$var$removeHiddenElems$1.type = "visitor";
$a8848f9916d99690$var$removeHiddenElems$1.active = true;
$a8848f9916d99690$var$removeHiddenElems$1.description = "removes hidden elements (zero sized, with absent attributes)";
$a8848f9916d99690$var$removeHiddenElems$1.fn = (root, params)=>{
    const { isHidden: isHidden = true , displayNone: displayNone = true , opacity0: opacity0 = true , circleR0: circleR0 = true , ellipseRX0: ellipseRX0 = true , ellipseRY0: ellipseRY0 = true , rectWidth0: rectWidth0 = true , rectHeight0: rectHeight0 = true , patternWidth0: patternWidth0 = true , patternHeight0: patternHeight0 = true , imageWidth0: imageWidth0 = true , imageHeight0: imageHeight0 = true , pathEmptyD: pathEmptyD = true , polylineEmptyPoints: polylineEmptyPoints = true , polygonEmptyPoints: polygonEmptyPoints = true  } = params;
    const stylesheet = $a8848f9916d99690$var$collectStylesheet$2(root);
    return {
        element: {
            enter: (node, parentNode)=>{
                const computedStyle = $a8848f9916d99690$var$computeStyle$2(stylesheet, node);
                if (isHidden && computedStyle.visibility && computedStyle.visibility.type === "static" && computedStyle.visibility.value === "hidden" && $a8848f9916d99690$var$querySelector(node, "[visibility=visible]") == null) {
                    $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                    return;
                }
                if (displayNone && computedStyle.display && computedStyle.display.type === "static" && computedStyle.display.value === "none" && node.name !== "marker") {
                    $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                    return;
                }
                if (opacity0 && computedStyle.opacity && computedStyle.opacity.type === "static" && computedStyle.opacity.value === "0" && $a8848f9916d99690$var$closestByName(node, "clipPath") == null) {
                    $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                    return;
                }
                if (circleR0 && node.name === "circle" && node.children.length === 0 && node.attributes.r === "0") {
                    $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                    return;
                }
                if (ellipseRX0 && node.name === "ellipse" && node.children.length === 0 && node.attributes.rx === "0") {
                    $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                    return;
                }
                if (ellipseRY0 && node.name === "ellipse" && node.children.length === 0 && node.attributes.ry === "0") {
                    $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                    return;
                }
                if (rectWidth0 && node.name === "rect" && node.children.length === 0 && node.attributes.width === "0") {
                    $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                    return;
                }
                if (rectHeight0 && rectWidth0 && node.name === "rect" && node.children.length === 0 && node.attributes.height === "0") {
                    $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                    return;
                }
                if (patternWidth0 && node.name === "pattern" && node.attributes.width === "0") {
                    $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                    return;
                }
                if (patternHeight0 && node.name === "pattern" && node.attributes.height === "0") {
                    $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                    return;
                }
                if (imageWidth0 && node.name === "image" && node.attributes.width === "0") {
                    $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                    return;
                }
                if (imageHeight0 && node.name === "image" && node.attributes.height === "0") {
                    $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                    return;
                }
                if (pathEmptyD && node.name === "path") {
                    if (node.attributes.d == null) {
                        $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                        return;
                    }
                    const pathData = $a8848f9916d99690$var$parsePathData$2(node.attributes.d);
                    if (pathData.length === 0) {
                        $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                        return;
                    }
                    if (pathData.length === 1 && computedStyle["marker-start"] == null && computedStyle["marker-end"] == null) {
                        $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                        return;
                    }
                    return;
                }
                if (polylineEmptyPoints && node.name === "polyline" && node.attributes.points == null) {
                    $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                    return;
                }
                if (polygonEmptyPoints && node.name === "polygon" && node.attributes.points == null) {
                    $a8848f9916d99690$var$detachNodeFromParent$b(node, parentNode);
                    return;
                }
            }
        }
    };
};
var $a8848f9916d99690$var$removeEmptyText$1 = {
};
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$a  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$removeEmptyText$1.name = "removeEmptyText";
$a8848f9916d99690$var$removeEmptyText$1.type = "visitor";
$a8848f9916d99690$var$removeEmptyText$1.active = true;
$a8848f9916d99690$var$removeEmptyText$1.description = "removes empty <text> elements";
$a8848f9916d99690$var$removeEmptyText$1.fn = (root, params)=>{
    const { text: text = true , tspan: tspan = true , tref: tref = true  } = params;
    return {
        element: {
            enter: (node, parentNode)=>{
                if (text && node.name === "text" && node.children.length === 0) $a8848f9916d99690$var$detachNodeFromParent$a(node, parentNode);
                if (tspan && node.name === "tspan" && node.children.length === 0) $a8848f9916d99690$var$detachNodeFromParent$a(node, parentNode);
                if (tref && node.name === "tref" && node.attributes["xlink:href"] == null) $a8848f9916d99690$var$detachNodeFromParent$a(node, parentNode);
            }
        }
    };
};
var $a8848f9916d99690$var$convertShapeToPath$1 = {
};
const { stringifyPathData: $a8848f9916d99690$var$stringifyPathData$1  } = $a8848f9916d99690$var$path;
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$9  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$convertShapeToPath$1.name = "convertShapeToPath";
$a8848f9916d99690$var$convertShapeToPath$1.type = "visitor";
$a8848f9916d99690$var$convertShapeToPath$1.active = true;
$a8848f9916d99690$var$convertShapeToPath$1.description = "converts basic shapes to more compact path form";
const $a8848f9916d99690$var$regNumber = /[-+]?(?:\d*\.\d+|\d+\.?)(?:[eE][-+]?\d+)?/g;
$a8848f9916d99690$var$convertShapeToPath$1.fn = (root, params)=>{
    const { convertArcs: convertArcs = false , floatPrecision: precision  } = params;
    return {
        element: {
            enter: (node, parentNode)=>{
                if (node.name === "rect" && node.attributes.width != null && node.attributes.height != null && node.attributes.rx == null && node.attributes.ry == null) {
                    const x = Number(node.attributes.x || "0");
                    const y = Number(node.attributes.y || "0");
                    const width = Number(node.attributes.width);
                    const height = Number(node.attributes.height);
                    if (Number.isNaN(x - y + width - height)) return;
                    const pathData = [
                        {
                            command: "M",
                            args: [
                                x,
                                y
                            ]
                        },
                        {
                            command: "H",
                            args: [
                                x + width
                            ]
                        },
                        {
                            command: "V",
                            args: [
                                y + height
                            ]
                        },
                        {
                            command: "H",
                            args: [
                                x
                            ]
                        },
                        {
                            command: "z",
                            args: []
                        }
                    ];
                    node.name = "path";
                    node.attributes.d = $a8848f9916d99690$var$stringifyPathData$1({
                        pathData: pathData,
                        precision: precision
                    });
                    delete node.attributes.x;
                    delete node.attributes.y;
                    delete node.attributes.width;
                    delete node.attributes.height;
                }
                if (node.name === "line") {
                    const x1 = Number(node.attributes.x1 || "0");
                    const y1 = Number(node.attributes.y1 || "0");
                    const x2 = Number(node.attributes.x2 || "0");
                    const y2 = Number(node.attributes.y2 || "0");
                    if (Number.isNaN(x1 - y1 + x2 - y2)) return;
                    const pathData = [
                        {
                            command: "M",
                            args: [
                                x1,
                                y1
                            ]
                        },
                        {
                            command: "L",
                            args: [
                                x2,
                                y2
                            ]
                        }
                    ];
                    node.name = "path";
                    node.attributes.d = $a8848f9916d99690$var$stringifyPathData$1({
                        pathData: pathData,
                        precision: precision
                    });
                    delete node.attributes.x1;
                    delete node.attributes.y1;
                    delete node.attributes.x2;
                    delete node.attributes.y2;
                }
                if ((node.name === "polyline" || node.name === "polygon") && node.attributes.points != null) {
                    const coords = (node.attributes.points.match($a8848f9916d99690$var$regNumber) || []).map(Number);
                    if (coords.length < 4) {
                        $a8848f9916d99690$var$detachNodeFromParent$9(node, parentNode);
                        return;
                    }
                    const pathData = [];
                    for(let i = 0; i < coords.length; i += 2)pathData.push({
                        command: i === 0 ? "M" : "L",
                        args: coords.slice(i, i + 2)
                    });
                    if (node.name === "polygon") pathData.push({
                        command: "z",
                        args: []
                    });
                    node.name = "path";
                    node.attributes.d = $a8848f9916d99690$var$stringifyPathData$1({
                        pathData: pathData,
                        precision: precision
                    });
                    delete node.attributes.points;
                }
                if (node.name === "circle" && convertArcs) {
                    const cx = Number(node.attributes.cx || "0");
                    const cy = Number(node.attributes.cy || "0");
                    const r = Number(node.attributes.r || "0");
                    if (Number.isNaN(cx - cy + r)) return;
                    const pathData = [
                        {
                            command: "M",
                            args: [
                                cx,
                                cy - r
                            ]
                        },
                        {
                            command: "A",
                            args: [
                                r,
                                r,
                                0,
                                1,
                                0,
                                cx,
                                cy + r
                            ]
                        },
                        {
                            command: "A",
                            args: [
                                r,
                                r,
                                0,
                                1,
                                0,
                                cx,
                                cy - r
                            ]
                        },
                        {
                            command: "z",
                            args: []
                        }
                    ];
                    node.name = "path";
                    node.attributes.d = $a8848f9916d99690$var$stringifyPathData$1({
                        pathData: pathData,
                        precision: precision
                    });
                    delete node.attributes.cx;
                    delete node.attributes.cy;
                    delete node.attributes.r;
                }
                if (node.name === "ellipse" && convertArcs) {
                    const ecx = Number(node.attributes.cx || "0");
                    const ecy = Number(node.attributes.cy || "0");
                    const rx = Number(node.attributes.rx || "0");
                    const ry = Number(node.attributes.ry || "0");
                    if (Number.isNaN(ecx - ecy + rx - ry)) return;
                    const pathData = [
                        {
                            command: "M",
                            args: [
                                ecx,
                                ecy - ry
                            ]
                        },
                        {
                            command: "A",
                            args: [
                                rx,
                                ry,
                                0,
                                1,
                                0,
                                ecx,
                                ecy + ry
                            ]
                        },
                        {
                            command: "A",
                            args: [
                                rx,
                                ry,
                                0,
                                1,
                                0,
                                ecx,
                                ecy - ry
                            ]
                        },
                        {
                            command: "z",
                            args: []
                        }
                    ];
                    node.name = "path";
                    node.attributes.d = $a8848f9916d99690$var$stringifyPathData$1({
                        pathData: pathData,
                        precision: precision
                    });
                    delete node.attributes.cx;
                    delete node.attributes.cy;
                    delete node.attributes.rx;
                    delete node.attributes.ry;
                }
            }
        }
    };
};
var $a8848f9916d99690$var$convertEllipseToCircle$1 = {
};
$a8848f9916d99690$var$convertEllipseToCircle$1.name = "convertEllipseToCircle";
$a8848f9916d99690$var$convertEllipseToCircle$1.type = "visitor";
$a8848f9916d99690$var$convertEllipseToCircle$1.active = true;
$a8848f9916d99690$var$convertEllipseToCircle$1.description = "converts non-eccentric <ellipse>s to <circle>s";
$a8848f9916d99690$var$convertEllipseToCircle$1.fn = ()=>({
        element: {
            enter: (node)=>{
                if (node.name === "ellipse") {
                    const rx = node.attributes.rx || "0";
                    const ry = node.attributes.ry || "0";
                    if (rx === ry || rx === "auto" || ry === "auto") {
                        node.name = "circle";
                        const radius = rx === "auto" ? ry : rx;
                        delete node.attributes.rx;
                        delete node.attributes.ry;
                        node.attributes.r = radius;
                    }
                }
            }
        }
    })
;
var $a8848f9916d99690$var$moveElemsAttrsToGroup$1 = {
};
const { visit: $a8848f9916d99690$var$visit  } = $a8848f9916d99690$var$xast;
const { inheritableAttrs: $a8848f9916d99690$var$inheritableAttrs$1 , pathElems: $a8848f9916d99690$var$pathElems$2  } = $a8848f9916d99690$var$_collections;
$a8848f9916d99690$var$moveElemsAttrsToGroup$1.type = "visitor";
$a8848f9916d99690$var$moveElemsAttrsToGroup$1.name = "moveElemsAttrsToGroup";
$a8848f9916d99690$var$moveElemsAttrsToGroup$1.active = true;
$a8848f9916d99690$var$moveElemsAttrsToGroup$1.description = "Move common attributes of group children to the group";
$a8848f9916d99690$var$moveElemsAttrsToGroup$1.fn = (root)=>{
    let deoptimizedWithStyles = false;
    $a8848f9916d99690$var$visit(root, {
        element: {
            enter: (node)=>{
                if (node.name === "style") deoptimizedWithStyles = true;
            }
        }
    });
    return {
        element: {
            exit: (node)=>{
                if (node.name !== "g" || node.children.length <= 1) return;
                if (deoptimizedWithStyles) return;
                const commonAttributes = new Map;
                let initial = true;
                let everyChildIsPath = true;
                for (const child of node.children)if (child.type === "element") {
                    if ($a8848f9916d99690$var$pathElems$2.includes(child.name) === false) everyChildIsPath = false;
                    if (initial) {
                        initial = false;
                        for (const [name55, value] of Object.entries(child.attributes))if ($a8848f9916d99690$var$inheritableAttrs$1.includes(name55)) commonAttributes.set(name55, value);
                    } else {
                        for (const [name56, value] of commonAttributes)if (child.attributes[name56] !== value) commonAttributes.delete(name56);
                    }
                }
                if (node.attributes["clip-path"] != null || node.attributes.mask != null) commonAttributes.delete("transform");
                if (everyChildIsPath) commonAttributes.delete("transform");
                for (const [name57, value] of commonAttributes)if (name57 === "transform") {
                    if (node.attributes.transform != null) node.attributes.transform = `${node.attributes.transform} ${value}`;
                    else node.attributes.transform = value;
                } else node.attributes[name57] = value;
                for (const child1 of node.children){
                    if (child1.type === "element") for (const [name] of commonAttributes)delete child1.attributes[name];
                }
            }
        }
    };
};
var $a8848f9916d99690$var$moveGroupAttrsToElems$1 = {
};
const { pathElems: $a8848f9916d99690$var$pathElems$1 , referencesProps: $a8848f9916d99690$var$referencesProps$2  } = $a8848f9916d99690$var$_collections;
$a8848f9916d99690$var$moveGroupAttrsToElems$1.name = "moveGroupAttrsToElems";
$a8848f9916d99690$var$moveGroupAttrsToElems$1.type = "perItem";
$a8848f9916d99690$var$moveGroupAttrsToElems$1.active = true;
$a8848f9916d99690$var$moveGroupAttrsToElems$1.description = "moves some group attributes to the content elements";
const $a8848f9916d99690$var$pathElemsWithGroupsAndText = [
    ...$a8848f9916d99690$var$pathElems$1,
    "g",
    "text"
];
$a8848f9916d99690$var$moveGroupAttrsToElems$1.fn = function(item) {
    if (item.type === "element" && item.name === "g" && item.children.length !== 0 && item.attributes.transform != null && Object.entries(item.attributes).some(([name58, value])=>$a8848f9916d99690$var$referencesProps$2.includes(name58) && value.includes("url(")
    ) === false && item.children.every((inner)=>$a8848f9916d99690$var$pathElemsWithGroupsAndText.includes(inner.name) && inner.attributes.id == null
    )) {
        for (const inner of item.children){
            const value = item.attributes.transform;
            if (inner.attributes.transform != null) inner.attributes.transform = value + " " + inner.attributes.transform;
            else inner.attributes.transform = value;
        }
        delete item.attributes.transform;
    }
};
var $a8848f9916d99690$var$collapseGroups$1 = {
};
const { inheritableAttrs: $a8848f9916d99690$var$inheritableAttrs , elemsGroups: $a8848f9916d99690$var$elemsGroups$1  } = $a8848f9916d99690$var$_collections;
$a8848f9916d99690$var$collapseGroups$1.type = "visitor";
$a8848f9916d99690$var$collapseGroups$1.name = "collapseGroups";
$a8848f9916d99690$var$collapseGroups$1.active = true;
$a8848f9916d99690$var$collapseGroups$1.description = "collapses useless groups";
const $a8848f9916d99690$var$hasAnimatedAttr = (node, name59)=>{
    if (node.type === "element") {
        if ($a8848f9916d99690$var$elemsGroups$1.animation.includes(node.name) && node.attributes.attributeName === name59) return true;
        for (const child of node.children){
            if ($a8848f9916d99690$var$hasAnimatedAttr(child, name59)) return true;
        }
    }
    return false;
};
$a8848f9916d99690$var$collapseGroups$1.fn = ()=>({
        element: {
            exit: (node, parentNode)=>{
                if (parentNode.type === "root" || parentNode.name === "switch") return;
                if (node.name !== "g" || node.children.length === 0) return;
                if (Object.keys(node.attributes).length !== 0 && node.children.length === 1) {
                    const firstChild = node.children[0];
                    if (firstChild.type === "element" && firstChild.attributes.id == null && node.attributes.filter == null && (node.attributes.class == null || firstChild.attributes.class == null) && (node.attributes["clip-path"] == null && node.attributes.mask == null || firstChild.name === "g" && node.attributes.transform == null && firstChild.attributes.transform == null)) for (const [name60, value] of Object.entries(node.attributes)){
                        if ($a8848f9916d99690$var$hasAnimatedAttr(firstChild, name60)) return;
                        if (firstChild.attributes[name60] == null) firstChild.attributes[name60] = value;
                        else if (name60 === "transform") firstChild.attributes[name60] = value + " " + firstChild.attributes[name60];
                        else if (firstChild.attributes[name60] === "inherit") firstChild.attributes[name60] = value;
                        else if ($a8848f9916d99690$var$inheritableAttrs.includes(name60) === false && firstChild.attributes[name60] !== value) return;
                        delete node.attributes[name60];
                    }
                }
                if (Object.keys(node.attributes).length === 0) {
                    for (const child of node.children){
                        if (child.type === "element" && $a8848f9916d99690$var$elemsGroups$1.animation.includes(child.name)) return;
                    }
                    const index = parentNode.children.indexOf(node);
                    parentNode.children.splice(index, 1, ...node.children);
                    for (const child2 of node.children)child2.parentNode = parentNode;
                }
            }
        }
    })
;
var $a8848f9916d99690$var$convertPathData$1 = {
};
var $a8848f9916d99690$var$_path = {
};
const { parsePathData: $a8848f9916d99690$var$parsePathData$1 , stringifyPathData: $a8848f9916d99690$var$stringifyPathData  } = $a8848f9916d99690$var$path;
var $a8848f9916d99690$var$prevCtrlPoint;
const $a8848f9916d99690$var$path2js$2 = (path)=>{
    if (path.pathJS) return path.pathJS;
    const pathData = [];
    const newPathData = $a8848f9916d99690$var$parsePathData$1(path.attributes.d);
    for (const { command: command , args: args  } of newPathData)pathData.push({
        command: command,
        args: args
    });
    if (pathData.length && pathData[0].command == "m") pathData[0].command = "M";
    path.pathJS = pathData;
    return pathData;
};
$a8848f9916d99690$var$_path.path2js = $a8848f9916d99690$var$path2js$2;
const $a8848f9916d99690$var$convertRelativeToAbsolute = (data)=>{
    const newData = [];
    let start = [
        0,
        0
    ];
    let cursor = [
        0,
        0
    ];
    for (let { command: command , args: args  } of data){
        args = args.slice();
        if (command === "m") {
            args[0] += cursor[0];
            args[1] += cursor[1];
            command = "M";
        }
        if (command === "M") {
            cursor[0] = args[0];
            cursor[1] = args[1];
            start[0] = cursor[0];
            start[1] = cursor[1];
        }
        if (command === "h") {
            args[0] += cursor[0];
            command = "H";
        }
        if (command === "H") cursor[0] = args[0];
        if (command === "v") {
            args[0] += cursor[1];
            command = "V";
        }
        if (command === "V") cursor[1] = args[0];
        if (command === "l") {
            args[0] += cursor[0];
            args[1] += cursor[1];
            command = "L";
        }
        if (command === "L") {
            cursor[0] = args[0];
            cursor[1] = args[1];
        }
        if (command === "c") {
            args[0] += cursor[0];
            args[1] += cursor[1];
            args[2] += cursor[0];
            args[3] += cursor[1];
            args[4] += cursor[0];
            args[5] += cursor[1];
            command = "C";
        }
        if (command === "C") {
            cursor[0] = args[4];
            cursor[1] = args[5];
        }
        if (command === "s") {
            args[0] += cursor[0];
            args[1] += cursor[1];
            args[2] += cursor[0];
            args[3] += cursor[1];
            command = "S";
        }
        if (command === "S") {
            cursor[0] = args[2];
            cursor[1] = args[3];
        }
        if (command === "q") {
            args[0] += cursor[0];
            args[1] += cursor[1];
            args[2] += cursor[0];
            args[3] += cursor[1];
            command = "Q";
        }
        if (command === "Q") {
            cursor[0] = args[2];
            cursor[1] = args[3];
        }
        if (command === "t") {
            args[0] += cursor[0];
            args[1] += cursor[1];
            command = "T";
        }
        if (command === "T") {
            cursor[0] = args[0];
            cursor[1] = args[1];
        }
        if (command === "a") {
            args[5] += cursor[0];
            args[6] += cursor[1];
            command = "A";
        }
        if (command === "A") {
            cursor[0] = args[5];
            cursor[1] = args[6];
        }
        if (command === "z" || command === "Z") {
            cursor[0] = start[0];
            cursor[1] = start[1];
            command = "z";
        }
        newData.push({
            command: command,
            args: args
        });
    }
    return newData;
};
$a8848f9916d99690$var$_path.js2path = function(path, data, params) {
    path.pathJS = data;
    const pathData = [];
    for (const item of data){
        if (pathData.length !== 0 && (item.command === "M" || item.command === "m")) {
            const last = pathData[pathData.length - 1];
            if (last.command === "M" || last.command === "m") pathData.pop();
        }
        pathData.push({
            command: item.command,
            args: item.args
        });
    }
    path.attributes.d = $a8848f9916d99690$var$stringifyPathData({
        pathData: pathData,
        precision: params.floatPrecision,
        disableSpaceAfterFlags: params.noSpaceAfterFlags
    });
};
function $a8848f9916d99690$var$set(dest, source) {
    dest[0] = source[source.length - 2];
    dest[1] = source[source.length - 1];
    return dest;
}
$a8848f9916d99690$var$_path.intersects = function(path1, path2) {
    const points1 = $a8848f9916d99690$var$gatherPoints($a8848f9916d99690$var$convertRelativeToAbsolute(path1));
    const points2 = $a8848f9916d99690$var$gatherPoints($a8848f9916d99690$var$convertRelativeToAbsolute(path2));
    if (points1.maxX <= points2.minX || points2.maxX <= points1.minX || points1.maxY <= points2.minY || points2.maxY <= points1.minY || points1.list.every((set1)=>points2.list.every((set2)=>set1.list[set1.maxX][0] <= set2.list[set2.minX][0] || set2.list[set2.maxX][0] <= set1.list[set1.minX][0] || set1.list[set1.maxY][1] <= set2.list[set2.minY][1] || set2.list[set2.maxY][1] <= set1.list[set1.minY][1]
        )
    )) return false;
    const hullNest1 = points1.list.map($a8848f9916d99690$var$convexHull);
    const hullNest2 = points2.list.map($a8848f9916d99690$var$convexHull);
    function getSupport(a, b, direction) {
        return $a8848f9916d99690$var$sub(supportPoint(a, direction), supportPoint(b, $a8848f9916d99690$var$minus(direction)));
    }
    function supportPoint(polygon, direction) {
        var index = direction[1] >= 0 ? direction[0] < 0 ? polygon.maxY : polygon.maxX : direction[0] < 0 ? polygon.minX : polygon.minY, max = -Infinity, value;
        while((value = $a8848f9916d99690$var$dot(polygon.list[index], direction)) > max){
            max = value;
            index = ++index % polygon.list.length;
        }
        return polygon.list[(index || polygon.list.length) - 1];
    }
    return hullNest1.some(function(hull1) {
        if (hull1.list.length < 3) return false;
        return hullNest2.some(function(hull2) {
            if (hull2.list.length < 3) return false;
            var simplex = [
                getSupport(hull1, hull2, [
                    1,
                    0
                ])
            ], direction = $a8848f9916d99690$var$minus(simplex[0]);
            var iterations = 10000;
            while(true){
                if ((iterations--) == 0) {
                    console.error("Error: infinite loop while processing mergePaths plugin.");
                    return true;
                }
                simplex.push(getSupport(hull1, hull2, direction));
                if ($a8848f9916d99690$var$dot(direction, simplex[simplex.length - 1]) <= 0) return false;
                if ($a8848f9916d99690$var$processSimplex(simplex, direction)) return true;
            }
        });
    });
};
function $a8848f9916d99690$var$processSimplex(simplex, direction) {
    if (simplex.length == 2) {
        let a = simplex[1], b = simplex[0], AO = $a8848f9916d99690$var$minus(simplex[1]), AB = $a8848f9916d99690$var$sub(b, a);
        if ($a8848f9916d99690$var$dot(AO, AB) > 0) $a8848f9916d99690$var$set(direction, $a8848f9916d99690$var$orth(AB, a));
        else {
            $a8848f9916d99690$var$set(direction, AO);
            simplex.shift();
        }
    } else {
        let a = simplex[2], b = simplex[1], c = simplex[0], AB = $a8848f9916d99690$var$sub(b, a), AC = $a8848f9916d99690$var$sub(c, a), AO = $a8848f9916d99690$var$minus(a), ACB = $a8848f9916d99690$var$orth(AB, AC), ABC = $a8848f9916d99690$var$orth(AC, AB);
        if ($a8848f9916d99690$var$dot(ACB, AO) > 0) {
            if ($a8848f9916d99690$var$dot(AB, AO) > 0) {
                $a8848f9916d99690$var$set(direction, ACB);
                simplex.shift();
            } else {
                $a8848f9916d99690$var$set(direction, AO);
                simplex.splice(0, 2);
            }
        } else if ($a8848f9916d99690$var$dot(ABC, AO) > 0) {
            if ($a8848f9916d99690$var$dot(AC, AO) > 0) {
                $a8848f9916d99690$var$set(direction, ABC);
                simplex.splice(1, 1);
            } else {
                $a8848f9916d99690$var$set(direction, AO);
                simplex.splice(0, 2);
            }
        } else return true;
    }
    return false;
}
function $a8848f9916d99690$var$minus(v) {
    return [
        -v[0],
        -v[1]
    ];
}
function $a8848f9916d99690$var$sub(v1, v2) {
    return [
        v1[0] - v2[0],
        v1[1] - v2[1]
    ];
}
function $a8848f9916d99690$var$dot(v1, v2) {
    return v1[0] * v2[0] + v1[1] * v2[1];
}
function $a8848f9916d99690$var$orth(v, from) {
    var o = [
        -v[1],
        v[0]
    ];
    return $a8848f9916d99690$var$dot(o, $a8848f9916d99690$var$minus(from)) < 0 ? $a8848f9916d99690$var$minus(o) : o;
}
function $a8848f9916d99690$var$gatherPoints(pathData) {
    const points = {
        list: [],
        minX: 0,
        minY: 0,
        maxX: 0,
        maxY: 0
    };
    const addPoint = (path, point)=>{
        if (!path.list.length || point[1] > path.list[path.maxY][1]) {
            path.maxY = path.list.length;
            points.maxY = points.list.length ? Math.max(point[1], points.maxY) : point[1];
        }
        if (!path.list.length || point[0] > path.list[path.maxX][0]) {
            path.maxX = path.list.length;
            points.maxX = points.list.length ? Math.max(point[0], points.maxX) : point[0];
        }
        if (!path.list.length || point[1] < path.list[path.minY][1]) {
            path.minY = path.list.length;
            points.minY = points.list.length ? Math.min(point[1], points.minY) : point[1];
        }
        if (!path.list.length || point[0] < path.list[path.minX][0]) {
            path.minX = path.list.length;
            points.minX = points.list.length ? Math.min(point[0], points.minX) : point[0];
        }
        path.list.push(point);
    };
    for(let i = 0; i < pathData.length; i += 1){
        const pathDataItem = pathData[i];
        let subPath = points.list.length === 0 ? {
            list: [],
            minX: 0,
            minY: 0,
            maxX: 0,
            maxY: 0
        } : points.list[points.list.length - 1];
        let prev = i === 0 ? null : pathData[i - 1];
        let basePoint = subPath.list.length === 0 ? null : subPath.list[subPath.list.length - 1];
        let data = pathDataItem.args;
        let ctrlPoint = basePoint;
        const toAbsolute = (n, i)=>n + (basePoint == null ? 0 : basePoint[i % 2])
        ;
        switch(pathDataItem.command){
            case "M":
                subPath = {
                    list: [],
                    minX: 0,
                    minY: 0,
                    maxX: 0,
                    maxY: 0
                };
                points.list.push(subPath);
                break;
            case "H":
                if (basePoint != null) addPoint(subPath, [
                    data[0],
                    basePoint[1]
                ]);
                break;
            case "V":
                if (basePoint != null) addPoint(subPath, [
                    basePoint[0],
                    data[0]
                ]);
                break;
            case "Q":
                addPoint(subPath, data.slice(0, 2));
                $a8848f9916d99690$var$prevCtrlPoint = [
                    data[2] - data[0],
                    data[3] - data[1]
                ];
                break;
            case "T":
                if (basePoint != null && prev != null && (prev.command == "Q" || prev.command == "T")) {
                    ctrlPoint = [
                        basePoint[0] + $a8848f9916d99690$var$prevCtrlPoint[0],
                        basePoint[1] + $a8848f9916d99690$var$prevCtrlPoint[1]
                    ];
                    addPoint(subPath, ctrlPoint);
                    $a8848f9916d99690$var$prevCtrlPoint = [
                        data[0] - ctrlPoint[0],
                        data[1] - ctrlPoint[1]
                    ];
                }
                break;
            case "C":
                if (basePoint != null) addPoint(subPath, [
                    0.5 * (basePoint[0] + data[0]),
                    0.5 * (basePoint[1] + data[1])
                ]);
                addPoint(subPath, [
                    0.5 * (data[0] + data[2]),
                    0.5 * (data[1] + data[3])
                ]);
                addPoint(subPath, [
                    0.5 * (data[2] + data[4]),
                    0.5 * (data[3] + data[5])
                ]);
                $a8848f9916d99690$var$prevCtrlPoint = [
                    data[4] - data[2],
                    data[5] - data[3]
                ];
                break;
            case "S":
                if (basePoint != null && prev != null && (prev.command == "C" || prev.command == "S")) {
                    addPoint(subPath, [
                        basePoint[0] + 0.5 * $a8848f9916d99690$var$prevCtrlPoint[0],
                        basePoint[1] + 0.5 * $a8848f9916d99690$var$prevCtrlPoint[1]
                    ]);
                    ctrlPoint = [
                        basePoint[0] + $a8848f9916d99690$var$prevCtrlPoint[0],
                        basePoint[1] + $a8848f9916d99690$var$prevCtrlPoint[1]
                    ];
                }
                if (ctrlPoint != null) addPoint(subPath, [
                    0.5 * (ctrlPoint[0] + data[0]),
                    0.5 * (ctrlPoint[1] + data[1])
                ]);
                addPoint(subPath, [
                    0.5 * (data[0] + data[2]),
                    0.5 * (data[1] + data[3])
                ]);
                $a8848f9916d99690$var$prevCtrlPoint = [
                    data[2] - data[0],
                    data[3] - data[1]
                ];
                break;
            case "A":
                if (basePoint != null) {
                    var curves = $a8848f9916d99690$var$a2c.apply(0, basePoint.concat(data));
                    for(var cData; (cData = curves.splice(0, 6).map(toAbsolute)).length;){
                        if (basePoint != null) addPoint(subPath, [
                            0.5 * (basePoint[0] + cData[0]),
                            0.5 * (basePoint[1] + cData[1])
                        ]);
                        addPoint(subPath, [
                            0.5 * (cData[0] + cData[2]),
                            0.5 * (cData[1] + cData[3])
                        ]);
                        addPoint(subPath, [
                            0.5 * (cData[2] + cData[4]),
                            0.5 * (cData[3] + cData[5])
                        ]);
                        if (curves.length) addPoint(subPath, basePoint = cData.slice(-2));
                    }
                }
                break;
        }
        if (data.length >= 2) addPoint(subPath, data.slice(-2));
    }
    return points;
}
function $a8848f9916d99690$var$convexHull(points) {
    points.list.sort(function(a, b) {
        return a[0] == b[0] ? a[1] - b[1] : a[0] - b[0];
    });
    var lower = [], minY = 0, bottom = 0;
    for(let i = 0; i < points.list.length; i++){
        while(lower.length >= 2 && $a8848f9916d99690$var$cross(lower[lower.length - 2], lower[lower.length - 1], points.list[i]) <= 0)lower.pop();
        if (points.list[i][1] < points.list[minY][1]) {
            minY = i;
            bottom = lower.length;
        }
        lower.push(points.list[i]);
    }
    var upper = [], maxY = points.list.length - 1, top = 0;
    for(let i8 = points.list.length; i8--;){
        while(upper.length >= 2 && $a8848f9916d99690$var$cross(upper[upper.length - 2], upper[upper.length - 1], points.list[i8]) <= 0)upper.pop();
        if (points.list[i8][1] > points.list[maxY][1]) {
            maxY = i8;
            top = upper.length;
        }
        upper.push(points.list[i8]);
    }
    upper.pop();
    lower.pop();
    const hullList = lower.concat(upper);
    const hull = {
        list: hullList,
        minX: 0,
        maxX: lower.length,
        minY: bottom,
        maxY: (lower.length + top) % hullList.length
    };
    return hull;
}
function $a8848f9916d99690$var$cross(o, a, b) {
    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]);
}
const $a8848f9916d99690$var$a2c = (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive)=>{
    const _120 = Math.PI * 120 / 180;
    const rad1 = Math.PI / 180 * (+angle || 0);
    let res = [];
    const rotateX = (x, y, rad)=>x * Math.cos(rad) - y * Math.sin(rad)
    ;
    const rotateY = (x, y, rad)=>x * Math.sin(rad) + y * Math.cos(rad)
    ;
    if (!recursive) {
        x1 = rotateX(x1, y1, -rad1);
        y1 = rotateY(x1, y1, -rad1);
        x2 = rotateX(x2, y2, -rad1);
        y2 = rotateY(x2, y2, -rad1);
        var x3 = (x1 - x2) / 2, y3 = (y1 - y2) / 2;
        var h = x3 * x3 / (rx * rx) + y3 * y3 / (ry * ry);
        if (h > 1) {
            h = Math.sqrt(h);
            rx = h * rx;
            ry = h * ry;
        }
        var rx2 = rx * rx;
        var ry2 = ry * ry;
        var k = (large_arc_flag == sweep_flag ? -1 : 1) * Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y3 * y3 - ry2 * x3 * x3) / (rx2 * y3 * y3 + ry2 * x3 * x3)));
        var cx = k * rx * y3 / ry + (x1 + x2) / 2;
        var cy = k * -ry * x3 / rx + (y1 + y2) / 2;
        var f1 = Math.asin(Number(((y1 - cy) / ry).toFixed(9)));
        var f2 = Math.asin(Number(((y2 - cy) / ry).toFixed(9)));
        f1 = x1 < cx ? Math.PI - f1 : f1;
        f2 = x2 < cx ? Math.PI - f2 : f2;
        f1 < 0 && (f1 = Math.PI * 2 + f1);
        f2 < 0 && (f2 = Math.PI * 2 + f2);
        if (sweep_flag && f1 > f2) f1 = f1 - Math.PI * 2;
        if (!sweep_flag && f2 > f1) f2 = f2 - Math.PI * 2;
    } else {
        f1 = recursive[0];
        f2 = recursive[1];
        cx = recursive[2];
        cy = recursive[3];
    }
    var df = f2 - f1;
    if (Math.abs(df) > _120) {
        var f2old = f2, x2old = x2, y2old = y2;
        f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
        x2 = cx + rx * Math.cos(f2);
        y2 = cy + ry * Math.sin(f2);
        res = $a8848f9916d99690$var$a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [
            f2,
            f2old,
            cx,
            cy
        ]);
    }
    df = f2 - f1;
    var c1 = Math.cos(f1), s1 = Math.sin(f1), c2 = Math.cos(f2), s2 = Math.sin(f2), t = Math.tan(df / 4), hx = 4 / 3 * rx * t, hy = 4 / 3 * ry * t, m = [
        -hx * s1,
        hy * c1,
        x2 + hx * s2 - x1,
        y2 - hy * c2 - y1,
        x2 - x1,
        y2 - y1
    ];
    if (recursive) return m.concat(res);
    else {
        res = m.concat(res);
        var newres = [];
        for(var i = 0, n = res.length; i < n; i++)newres[i] = i % 2 ? rotateY(res[i - 1], res[i], rad1) : rotateX(res[i], res[i + 1], rad1);
        return newres;
    }
};
var $a8848f9916d99690$var$_applyTransforms = {
};
var $a8848f9916d99690$var$_transforms = {
};
const $a8848f9916d99690$var$regTransformTypes = /matrix|translate|scale|rotate|skewX|skewY/;
const $a8848f9916d99690$var$regTransformSplit = /\s*(matrix|translate|scale|rotate|skewX|skewY)\s*\(\s*(.+?)\s*\)[\s,]*/;
const $a8848f9916d99690$var$regNumericValues$2 = /[-+]?(?:\d*\.\d+|\d+\.?)(?:[eE][-+]?\d+)?/g;
$a8848f9916d99690$var$_transforms.transform2js = (transformString)=>{
    const transforms = [];
    let current = null;
    for (const item of transformString.split($a8848f9916d99690$var$regTransformSplit)){
        var num;
        if (item) {
            if ($a8848f9916d99690$var$regTransformTypes.test(item)) {
                current = {
                    name: item,
                    data: []
                };
                transforms.push(current);
            } else while(num = $a8848f9916d99690$var$regNumericValues$2.exec(item)){
                num = Number(num);
                if (current != null) current.data.push(num);
            }
        }
    }
    return current == null || current.data.length == 0 ? [] : transforms;
};
$a8848f9916d99690$var$_transforms.transformsMultiply = (transforms)=>{
    const matrixData = transforms.map((transform)=>{
        if (transform.name === "matrix") return transform.data;
        return $a8848f9916d99690$var$transformToMatrix(transform);
    });
    const matrixTransform = {
        name: "matrix",
        data: matrixData.length > 0 ? matrixData.reduce($a8848f9916d99690$var$multiplyTransformMatrices) : []
    };
    return matrixTransform;
};
const $a8848f9916d99690$var$mth = {
    rad: (deg)=>deg * Math.PI / 180
    ,
    deg: (rad)=>rad * 180 / Math.PI
    ,
    cos: (deg)=>Math.cos($a8848f9916d99690$var$mth.rad(deg))
    ,
    acos: (val, floatPrecision)=>Number($a8848f9916d99690$var$mth.deg(Math.acos(val)).toFixed(floatPrecision))
    ,
    sin: (deg)=>Math.sin($a8848f9916d99690$var$mth.rad(deg))
    ,
    asin: (val, floatPrecision)=>Number($a8848f9916d99690$var$mth.deg(Math.asin(val)).toFixed(floatPrecision))
    ,
    tan: (deg)=>Math.tan($a8848f9916d99690$var$mth.rad(deg))
    ,
    atan: (val, floatPrecision)=>Number($a8848f9916d99690$var$mth.deg(Math.atan(val)).toFixed(floatPrecision))
};
$a8848f9916d99690$var$_transforms.matrixToTransform = (transform, params)=>{
    let floatPrecision = params.floatPrecision;
    let data = transform.data;
    let transforms = [];
    let sx = Number(Math.hypot(data[0], data[1]).toFixed(params.transformPrecision));
    let sy = Number(((data[0] * data[3] - data[1] * data[2]) / sx).toFixed(params.transformPrecision));
    let colsSum = data[0] * data[2] + data[1] * data[3];
    let rowsSum = data[0] * data[1] + data[2] * data[3];
    let scaleBefore = rowsSum != 0 || sx == sy;
    if (data[4] || data[5]) transforms.push({
        name: "translate",
        data: data.slice(4, data[5] ? 6 : 5)
    });
    if (!data[1] && data[2]) transforms.push({
        name: "skewX",
        data: [
            $a8848f9916d99690$var$mth.atan(data[2] / sy, floatPrecision)
        ]
    });
    else if (data[1] && !data[2]) {
        transforms.push({
            name: "skewY",
            data: [
                $a8848f9916d99690$var$mth.atan(data[1] / data[0], floatPrecision)
            ]
        });
        sx = data[0];
        sy = data[3];
    } else if (!colsSum || sx == 1 && sy == 1 || !scaleBefore) {
        if (!scaleBefore) {
            sx = (data[0] < 0 ? -1 : 1) * Math.hypot(data[0], data[2]);
            sy = (data[3] < 0 ? -1 : 1) * Math.hypot(data[1], data[3]);
            transforms.push({
                name: "scale",
                data: [
                    sx,
                    sy
                ]
            });
        }
        var angle = Math.min(Math.max(-1, data[0] / sx), 1), rotate = [
            $a8848f9916d99690$var$mth.acos(angle, floatPrecision) * ((scaleBefore ? 1 : sy) * data[1] < 0 ? -1 : 1)
        ];
        if (rotate[0]) transforms.push({
            name: "rotate",
            data: rotate
        });
        if (rowsSum && colsSum) transforms.push({
            name: "skewX",
            data: [
                $a8848f9916d99690$var$mth.atan(colsSum / (sx * sx), floatPrecision)
            ]
        });
        if (rotate[0] && (data[4] || data[5])) {
            transforms.shift();
            var cos = data[0] / sx, sin = data[1] / (scaleBefore ? sx : sy), x = data[4] * (scaleBefore ? 1 : sy), y = data[5] * (scaleBefore ? 1 : sx), denom = (Math.pow(1 - cos, 2) + Math.pow(sin, 2)) * (scaleBefore ? 1 : sx * sy);
            rotate.push(((1 - cos) * x - sin * y) / denom);
            rotate.push(((1 - cos) * y + sin * x) / denom);
        }
    } else if (data[1] || data[2]) return [
        transform
    ];
    if (scaleBefore && (sx != 1 || sy != 1) || !transforms.length) transforms.push({
        name: "scale",
        data: sx == sy ? [
            sx
        ] : [
            sx,
            sy
        ]
    });
    return transforms;
};
const $a8848f9916d99690$var$transformToMatrix = (transform)=>{
    if (transform.name === "matrix") return transform.data;
    switch(transform.name){
        case "translate":
            return [
                1,
                0,
                0,
                1,
                transform.data[0],
                transform.data[1] || 0
            ];
        case "scale":
            return [
                transform.data[0],
                0,
                0,
                transform.data[1] || transform.data[0],
                0,
                0
            ];
        case "rotate":
            var cos = $a8848f9916d99690$var$mth.cos(transform.data[0]), sin = $a8848f9916d99690$var$mth.sin(transform.data[0]), cx = transform.data[1] || 0, cy = transform.data[2] || 0;
            return [
                cos,
                sin,
                -sin,
                cos,
                (1 - cos) * cx + sin * cy,
                (1 - cos) * cy - sin * cx
            ];
        case "skewX":
            return [
                1,
                0,
                $a8848f9916d99690$var$mth.tan(transform.data[0]),
                1,
                0,
                0
            ];
        case "skewY":
            return [
                1,
                $a8848f9916d99690$var$mth.tan(transform.data[0]),
                0,
                1,
                0,
                0
            ];
        default:
            throw Error(`Unknown transform ${transform.name}`);
    }
};
$a8848f9916d99690$var$_transforms.transformArc = (cursor, arc, transform)=>{
    const x = arc[5] - cursor[0];
    const y = arc[6] - cursor[1];
    let a = arc[0];
    let b = arc[1];
    const rot = arc[2] * Math.PI / 180;
    const cos = Math.cos(rot);
    const sin = Math.sin(rot);
    if (a > 0 && b > 0) {
        let h = Math.pow(x * cos + y * sin, 2) / (4 * a * a) + Math.pow(y * cos - x * sin, 2) / (4 * b * b);
        if (h > 1) {
            h = Math.sqrt(h);
            a *= h;
            b *= h;
        }
    }
    const ellipse = [
        a * cos,
        a * sin,
        -b * sin,
        b * cos,
        0,
        0
    ];
    const m = $a8848f9916d99690$var$multiplyTransformMatrices(transform, ellipse);
    const lastCol = m[2] * m[2] + m[3] * m[3];
    const squareSum = m[0] * m[0] + m[1] * m[1] + lastCol;
    const root = Math.hypot(m[0] - m[3], m[1] + m[2]) * Math.hypot(m[0] + m[3], m[1] - m[2]);
    if (!root) {
        arc[0] = arc[1] = Math.sqrt(squareSum / 2);
        arc[2] = 0;
    } else {
        const majorAxisSqr = (squareSum + root) / 2;
        const minorAxisSqr = (squareSum - root) / 2;
        const major = Math.abs(majorAxisSqr - lastCol) > 0.000001;
        const sub = (major ? majorAxisSqr : minorAxisSqr) - lastCol;
        const rowsSum = m[0] * m[2] + m[1] * m[3];
        const term1 = m[0] * sub + m[2] * rowsSum;
        const term2 = m[1] * sub + m[3] * rowsSum;
        arc[0] = Math.sqrt(majorAxisSqr);
        arc[1] = Math.sqrt(minorAxisSqr);
        arc[2] = ((major ? term2 < 0 : term1 > 0) ? -1 : 1) * Math.acos((major ? term1 : term2) / Math.hypot(term1, term2)) * 180 / Math.PI;
    }
    if (transform[0] < 0 !== transform[3] < 0) arc[4] = 1 - arc[4];
    return arc;
};
const $a8848f9916d99690$var$multiplyTransformMatrices = (a, b)=>[
        a[0] * b[0] + a[2] * b[1],
        a[1] * b[0] + a[3] * b[1],
        a[0] * b[2] + a[2] * b[3],
        a[1] * b[2] + a[3] * b[3],
        a[0] * b[4] + a[2] * b[5] + a[4],
        a[1] * b[4] + a[3] * b[5] + a[5]
    ]
;
const { transformsMultiply: $a8848f9916d99690$var$transformsMultiply$1 , transform2js: $a8848f9916d99690$var$transform2js$1 , transformArc: $a8848f9916d99690$var$transformArc  } = $a8848f9916d99690$var$_transforms;
const { removeLeadingZero: $a8848f9916d99690$var$removeLeadingZero$1  } = $a8848f9916d99690$var$tools;
const { referencesProps: $a8848f9916d99690$var$referencesProps$1 , attrsGroupsDefaults: $a8848f9916d99690$var$attrsGroupsDefaults  } = $a8848f9916d99690$var$_collections;
const $a8848f9916d99690$var$regNumericValues$1 = /[-+]?(\d*\.\d+|\d+\.?)(?:[eE][-+]?\d+)?/g;
const $a8848f9916d99690$var$defaultStrokeWidth = $a8848f9916d99690$var$attrsGroupsDefaults.presentation["stroke-width"];
const $a8848f9916d99690$var$applyTransforms$1 = (elem, pathData, params)=>{
    if (elem.attributes.transform == null || elem.attributes.transform === "" || elem.attributes.style != null || Object.entries(elem.attributes).some(([name61, value])=>$a8848f9916d99690$var$referencesProps$1.includes(name61) && value.includes("url(")
    )) return;
    const matrix = $a8848f9916d99690$var$transformsMultiply$1($a8848f9916d99690$var$transform2js$1(elem.attributes.transform));
    const stroke = elem.computedAttr("stroke");
    const id = elem.computedAttr("id");
    const transformPrecision = params.transformPrecision;
    if (stroke && stroke != "none") {
        if (!params.applyTransformsStroked || (matrix.data[0] != matrix.data[3] || matrix.data[1] != -matrix.data[2]) && (matrix.data[0] != -matrix.data[3] || matrix.data[1] != matrix.data[2])) return;
        if (id) {
            let idElem = elem;
            let hasStrokeWidth = false;
            do if (idElem.attributes["stroke-width"]) hasStrokeWidth = true;
            while (idElem.attributes.id !== id && !hasStrokeWidth && (idElem = idElem.parentNode))
            if (!hasStrokeWidth) return;
        }
        const scale = +Math.sqrt(matrix.data[0] * matrix.data[0] + matrix.data[1] * matrix.data[1]).toFixed(transformPrecision);
        if (scale !== 1) {
            const strokeWidth = elem.computedAttr("stroke-width") || $a8848f9916d99690$var$defaultStrokeWidth;
            if (elem.attributes["vector-effect"] == null || elem.attributes["vector-effect"] !== "non-scaling-stroke") {
                if (elem.attributes["stroke-width"] != null) elem.attributes["stroke-width"] = elem.attributes["stroke-width"].trim().replace($a8848f9916d99690$var$regNumericValues$1, (num)=>$a8848f9916d99690$var$removeLeadingZero$1(num * scale)
                );
                else elem.attributes["stroke-width"] = strokeWidth.replace($a8848f9916d99690$var$regNumericValues$1, (num)=>$a8848f9916d99690$var$removeLeadingZero$1(num * scale)
                );
                if (elem.attributes["stroke-dashoffset"] != null) elem.attributes["stroke-dashoffset"] = elem.attributes["stroke-dashoffset"].trim().replace($a8848f9916d99690$var$regNumericValues$1, (num)=>$a8848f9916d99690$var$removeLeadingZero$1(num * scale)
                );
                if (elem.attributes["stroke-dasharray"] != null) elem.attributes["stroke-dasharray"] = elem.attributes["stroke-dasharray"].trim().replace($a8848f9916d99690$var$regNumericValues$1, (num)=>$a8848f9916d99690$var$removeLeadingZero$1(num * scale)
                );
            }
        }
    } else if (id) return;
    $a8848f9916d99690$var$applyMatrixToPathData(pathData, matrix.data);
    delete elem.attributes.transform;
    return;
};
$a8848f9916d99690$var$_applyTransforms.applyTransforms = $a8848f9916d99690$var$applyTransforms$1;
const $a8848f9916d99690$var$transformAbsolutePoint = (matrix, x, y)=>{
    const newX = matrix[0] * x + matrix[2] * y + matrix[4];
    const newY = matrix[1] * x + matrix[3] * y + matrix[5];
    return [
        newX,
        newY
    ];
};
const $a8848f9916d99690$var$transformRelativePoint = (matrix, x, y)=>{
    const newX = matrix[0] * x + matrix[2] * y;
    const newY = matrix[1] * x + matrix[3] * y;
    return [
        newX,
        newY
    ];
};
const $a8848f9916d99690$var$applyMatrixToPathData = (pathData, matrix)=>{
    const start = [
        0,
        0
    ];
    const cursor = [
        0,
        0
    ];
    for (const pathItem of pathData){
        let { command: command , args: args  } = pathItem;
        if (command === "M") {
            cursor[0] = args[0];
            cursor[1] = args[1];
            start[0] = cursor[0];
            start[1] = cursor[1];
            const [x, y] = $a8848f9916d99690$var$transformAbsolutePoint(matrix, args[0], args[1]);
            args[0] = x;
            args[1] = y;
        }
        if (command === "m") {
            cursor[0] += args[0];
            cursor[1] += args[1];
            start[0] = cursor[0];
            start[1] = cursor[1];
            const [x, y] = $a8848f9916d99690$var$transformRelativePoint(matrix, args[0], args[1]);
            args[0] = x;
            args[1] = y;
        }
        if (command === "H") {
            command = "L";
            args = [
                args[0],
                cursor[1]
            ];
        }
        if (command === "h") {
            command = "l";
            args = [
                args[0],
                0
            ];
        }
        if (command === "V") {
            command = "L";
            args = [
                cursor[0],
                args[0]
            ];
        }
        if (command === "v") {
            command = "l";
            args = [
                0,
                args[0]
            ];
        }
        if (command === "L") {
            cursor[0] = args[0];
            cursor[1] = args[1];
            const [x, y] = $a8848f9916d99690$var$transformAbsolutePoint(matrix, args[0], args[1]);
            args[0] = x;
            args[1] = y;
        }
        if (command === "l") {
            cursor[0] += args[0];
            cursor[1] += args[1];
            const [x, y] = $a8848f9916d99690$var$transformRelativePoint(matrix, args[0], args[1]);
            args[0] = x;
            args[1] = y;
        }
        if (command === "C") {
            cursor[0] = args[4];
            cursor[1] = args[5];
            const [x1, y1] = $a8848f9916d99690$var$transformAbsolutePoint(matrix, args[0], args[1]);
            const [x2, y2] = $a8848f9916d99690$var$transformAbsolutePoint(matrix, args[2], args[3]);
            const [x, y] = $a8848f9916d99690$var$transformAbsolutePoint(matrix, args[4], args[5]);
            args[0] = x1;
            args[1] = y1;
            args[2] = x2;
            args[3] = y2;
            args[4] = x;
            args[5] = y;
        }
        if (command === "c") {
            cursor[0] += args[4];
            cursor[1] += args[5];
            const [x1, y1] = $a8848f9916d99690$var$transformRelativePoint(matrix, args[0], args[1]);
            const [x2, y2] = $a8848f9916d99690$var$transformRelativePoint(matrix, args[2], args[3]);
            const [x, y] = $a8848f9916d99690$var$transformRelativePoint(matrix, args[4], args[5]);
            args[0] = x1;
            args[1] = y1;
            args[2] = x2;
            args[3] = y2;
            args[4] = x;
            args[5] = y;
        }
        if (command === "S") {
            cursor[0] = args[2];
            cursor[1] = args[3];
            const [x2, y2] = $a8848f9916d99690$var$transformAbsolutePoint(matrix, args[0], args[1]);
            const [x, y] = $a8848f9916d99690$var$transformAbsolutePoint(matrix, args[2], args[3]);
            args[0] = x2;
            args[1] = y2;
            args[2] = x;
            args[3] = y;
        }
        if (command === "s") {
            cursor[0] += args[2];
            cursor[1] += args[3];
            const [x2, y2] = $a8848f9916d99690$var$transformRelativePoint(matrix, args[0], args[1]);
            const [x, y] = $a8848f9916d99690$var$transformRelativePoint(matrix, args[2], args[3]);
            args[0] = x2;
            args[1] = y2;
            args[2] = x;
            args[3] = y;
        }
        if (command === "Q") {
            cursor[0] = args[2];
            cursor[1] = args[3];
            const [x1, y1] = $a8848f9916d99690$var$transformAbsolutePoint(matrix, args[0], args[1]);
            const [x, y] = $a8848f9916d99690$var$transformAbsolutePoint(matrix, args[2], args[3]);
            args[0] = x1;
            args[1] = y1;
            args[2] = x;
            args[3] = y;
        }
        if (command === "q") {
            cursor[0] += args[2];
            cursor[1] += args[3];
            const [x1, y1] = $a8848f9916d99690$var$transformRelativePoint(matrix, args[0], args[1]);
            const [x, y] = $a8848f9916d99690$var$transformRelativePoint(matrix, args[2], args[3]);
            args[0] = x1;
            args[1] = y1;
            args[2] = x;
            args[3] = y;
        }
        if (command === "T") {
            cursor[0] = args[0];
            cursor[1] = args[1];
            const [x, y] = $a8848f9916d99690$var$transformAbsolutePoint(matrix, args[0], args[1]);
            args[0] = x;
            args[1] = y;
        }
        if (command === "t") {
            cursor[0] += args[0];
            cursor[1] += args[1];
            const [x, y] = $a8848f9916d99690$var$transformRelativePoint(matrix, args[0], args[1]);
            args[0] = x;
            args[1] = y;
        }
        if (command === "A") {
            $a8848f9916d99690$var$transformArc(cursor, args, matrix);
            cursor[0] = args[5];
            cursor[1] = args[6];
            if (Math.abs(args[2]) > 80) {
                const a = args[0];
                const rotation = args[2];
                args[0] = args[1];
                args[1] = a;
                args[2] = rotation + (rotation > 0 ? -90 : 90);
            }
            const [x, y] = $a8848f9916d99690$var$transformAbsolutePoint(matrix, args[5], args[6]);
            args[5] = x;
            args[6] = y;
        }
        if (command === "a") {
            $a8848f9916d99690$var$transformArc([
                0,
                0
            ], args, matrix);
            cursor[0] += args[5];
            cursor[1] += args[6];
            if (Math.abs(args[2]) > 80) {
                const a = args[0];
                const rotation = args[2];
                args[0] = args[1];
                args[1] = a;
                args[2] = rotation + (rotation > 0 ? -90 : 90);
            }
            const [x, y] = $a8848f9916d99690$var$transformRelativePoint(matrix, args[5], args[6]);
            args[5] = x;
            args[6] = y;
        }
        if (command === "z" || command === "Z") {
            cursor[0] = start[0];
            cursor[1] = start[1];
        }
        pathItem.command = command;
        pathItem.args = args;
    }
};
const { collectStylesheet: $a8848f9916d99690$var$collectStylesheet$1 , computeStyle: $a8848f9916d99690$var$computeStyle$1  } = $a8848f9916d99690$var$style;
const { pathElems: $a8848f9916d99690$var$pathElems  } = $a8848f9916d99690$var$_collections;
const { path2js: $a8848f9916d99690$var$path2js$1 , js2path: $a8848f9916d99690$var$js2path$1  } = $a8848f9916d99690$var$_path;
const { applyTransforms: $a8848f9916d99690$var$applyTransforms  } = $a8848f9916d99690$var$_applyTransforms;
const { cleanupOutData: $a8848f9916d99690$var$cleanupOutData$1  } = $a8848f9916d99690$var$tools;
$a8848f9916d99690$var$convertPathData$1.name = "convertPathData";
$a8848f9916d99690$var$convertPathData$1.type = "visitor";
$a8848f9916d99690$var$convertPathData$1.active = true;
$a8848f9916d99690$var$convertPathData$1.description = "optimizes path data: writes in shorter form, applies transformations";
$a8848f9916d99690$var$convertPathData$1.params = {
    applyTransforms: true,
    applyTransformsStroked: true,
    makeArcs: {
        threshold: 2.5,
        tolerance: 0.5
    },
    straightCurves: true,
    lineShorthands: true,
    curveSmoothShorthands: true,
    floatPrecision: 3,
    transformPrecision: 5,
    removeUseless: true,
    collapseRepeated: true,
    utilizeAbsolute: true,
    leadingZero: true,
    negativeExtraSpace: true,
    noSpaceAfterFlags: false,
    forceAbsolutePath: false
};
let $a8848f9916d99690$var$roundData;
let $a8848f9916d99690$var$precision;
let $a8848f9916d99690$var$error;
let $a8848f9916d99690$var$arcThreshold;
let $a8848f9916d99690$var$arcTolerance;
$a8848f9916d99690$var$convertPathData$1.fn = (root, params)=>{
    const stylesheet = $a8848f9916d99690$var$collectStylesheet$1(root);
    return {
        element: {
            enter: (node)=>{
                if ($a8848f9916d99690$var$pathElems.includes(node.name) && node.attributes.d != null) {
                    const computedStyle = $a8848f9916d99690$var$computeStyle$1(stylesheet, node);
                    $a8848f9916d99690$var$precision = params.floatPrecision;
                    $a8848f9916d99690$var$error = $a8848f9916d99690$var$precision !== false ? +Math.pow(0.1, $a8848f9916d99690$var$precision).toFixed($a8848f9916d99690$var$precision) : 0.01;
                    $a8848f9916d99690$var$roundData = $a8848f9916d99690$var$precision > 0 && $a8848f9916d99690$var$precision < 20 ? $a8848f9916d99690$var$strongRound : $a8848f9916d99690$var$round$1;
                    if (params.makeArcs) {
                        $a8848f9916d99690$var$arcThreshold = params.makeArcs.threshold;
                        $a8848f9916d99690$var$arcTolerance = params.makeArcs.tolerance;
                    }
                    const hasMarkerMid = computedStyle["marker-mid"] != null;
                    const maybeHasStroke = computedStyle.stroke && (computedStyle.stroke.type === "dynamic" || computedStyle.stroke.value !== "none");
                    const maybeHasLinecap = computedStyle["stroke-linecap"] && (computedStyle["stroke-linecap"].type === "dynamic" || computedStyle["stroke-linecap"].value !== "butt");
                    const maybeHasStrokeAndLinecap = maybeHasStroke && maybeHasLinecap;
                    var data = $a8848f9916d99690$var$path2js$1(node);
                    if (data.length) {
                        if (params.applyTransforms) $a8848f9916d99690$var$applyTransforms(node, data, params);
                        $a8848f9916d99690$var$convertToRelative(data);
                        data = $a8848f9916d99690$var$filters(data, params, {
                            maybeHasStrokeAndLinecap: maybeHasStrokeAndLinecap,
                            hasMarkerMid: hasMarkerMid
                        });
                        if (params.utilizeAbsolute) data = $a8848f9916d99690$var$convertToMixed(data, params);
                        $a8848f9916d99690$var$js2path$1(node, data, params);
                    }
                }
            }
        }
    };
};
const $a8848f9916d99690$var$convertToRelative = (pathData)=>{
    let start = [
        0,
        0
    ];
    let cursor = [
        0,
        0
    ];
    let prevCoords = [
        0,
        0
    ];
    for(let i = 0; i < pathData.length; i += 1){
        const pathItem = pathData[i];
        let { command: command , args: args  } = pathItem;
        if (command === "m") {
            cursor[0] += args[0];
            cursor[1] += args[1];
            start[0] = cursor[0];
            start[1] = cursor[1];
        }
        if (command === "M") {
            if (i !== 0) command = "m";
            args[0] -= cursor[0];
            args[1] -= cursor[1];
            cursor[0] += args[0];
            cursor[1] += args[1];
            start[0] = cursor[0];
            start[1] = cursor[1];
        }
        if (command === "l") {
            cursor[0] += args[0];
            cursor[1] += args[1];
        }
        if (command === "L") {
            command = "l";
            args[0] -= cursor[0];
            args[1] -= cursor[1];
            cursor[0] += args[0];
            cursor[1] += args[1];
        }
        if (command === "h") cursor[0] += args[0];
        if (command === "H") {
            command = "h";
            args[0] -= cursor[0];
            cursor[0] += args[0];
        }
        if (command === "v") cursor[1] += args[0];
        if (command === "V") {
            command = "v";
            args[0] -= cursor[1];
            cursor[1] += args[0];
        }
        if (command === "c") {
            cursor[0] += args[4];
            cursor[1] += args[5];
        }
        if (command === "C") {
            command = "c";
            args[0] -= cursor[0];
            args[1] -= cursor[1];
            args[2] -= cursor[0];
            args[3] -= cursor[1];
            args[4] -= cursor[0];
            args[5] -= cursor[1];
            cursor[0] += args[4];
            cursor[1] += args[5];
        }
        if (command === "s") {
            cursor[0] += args[2];
            cursor[1] += args[3];
        }
        if (command === "S") {
            command = "s";
            args[0] -= cursor[0];
            args[1] -= cursor[1];
            args[2] -= cursor[0];
            args[3] -= cursor[1];
            cursor[0] += args[2];
            cursor[1] += args[3];
        }
        if (command === "q") {
            cursor[0] += args[2];
            cursor[1] += args[3];
        }
        if (command === "Q") {
            command = "q";
            args[0] -= cursor[0];
            args[1] -= cursor[1];
            args[2] -= cursor[0];
            args[3] -= cursor[1];
            cursor[0] += args[2];
            cursor[1] += args[3];
        }
        if (command === "t") {
            cursor[0] += args[0];
            cursor[1] += args[1];
        }
        if (command === "T") {
            command = "t";
            args[0] -= cursor[0];
            args[1] -= cursor[1];
            cursor[0] += args[0];
            cursor[1] += args[1];
        }
        if (command === "a") {
            cursor[0] += args[5];
            cursor[1] += args[6];
        }
        if (command === "A") {
            command = "a";
            args[5] -= cursor[0];
            args[6] -= cursor[1];
            cursor[0] += args[5];
            cursor[1] += args[6];
        }
        if (command === "Z" || command === "z") {
            cursor[0] = start[0];
            cursor[1] = start[1];
        }
        pathItem.command = command;
        pathItem.args = args;
        pathItem.base = prevCoords;
        pathItem.coords = [
            cursor[0],
            cursor[1]
        ];
        prevCoords = pathItem.coords;
    }
    return pathData;
};
function $a8848f9916d99690$var$filters(path1, params, { maybeHasStrokeAndLinecap: maybeHasStrokeAndLinecap , hasMarkerMid: hasMarkerMid  }) {
    var stringify = $a8848f9916d99690$var$data2Path.bind(null, params), relSubpoint = [
        0,
        0
    ], pathBase = [
        0,
        0
    ], prev = {
    };
    path1 = path1.filter(function(item, index, path) {
        let command = item.command;
        let data = item.args;
        let next = path[index + 1];
        if (command !== "Z" && command !== "z") {
            var sdata = data, circle;
            if (command === "s") {
                sdata = [
                    0,
                    0
                ].concat(data);
                if (command === "c" || command === "s") {
                    var pdata = prev.args, n = pdata.length;
                    sdata[0] = pdata[n - 2] - pdata[n - 4];
                    sdata[1] = pdata[n - 1] - pdata[n - 3];
                }
            }
            if (params.makeArcs && (command == "c" || command == "s") && $a8848f9916d99690$var$isConvex(sdata) && (circle = $a8848f9916d99690$var$findCircle(sdata))) {
                var r = $a8848f9916d99690$var$roundData([
                    circle.radius
                ])[0], angle = $a8848f9916d99690$var$findArcAngle(sdata, circle), sweep = sdata[5] * sdata[0] - sdata[4] * sdata[1] > 0 ? 1 : 0, arc = {
                    command: "a",
                    args: [
                        r,
                        r,
                        0,
                        0,
                        sweep,
                        sdata[4],
                        sdata[5]
                    ],
                    coords: item.coords.slice(),
                    base: item.base
                }, output = [
                    arc
                ], relCenter = [
                    circle.center[0] - sdata[4],
                    circle.center[1] - sdata[5]
                ], relCircle = {
                    center: relCenter,
                    radius: circle.radius
                }, arcCurves = [
                    item
                ], hasPrev = 0, suffix = "", nextLonghand;
                if (prev.command == "c" && $a8848f9916d99690$var$isConvex(prev.args) && $a8848f9916d99690$var$isArcPrev(prev.args, circle) || prev.command == "a" && prev.sdata && $a8848f9916d99690$var$isArcPrev(prev.sdata, circle)) {
                    arcCurves.unshift(prev);
                    arc.base = prev.base;
                    arc.args[5] = arc.coords[0] - arc.base[0];
                    arc.args[6] = arc.coords[1] - arc.base[1];
                    var prevData = prev.command == "a" ? prev.sdata : prev.args;
                    var prevAngle = $a8848f9916d99690$var$findArcAngle(prevData, {
                        center: [
                            prevData[4] + circle.center[0],
                            prevData[5] + circle.center[1]
                        ],
                        radius: circle.radius
                    });
                    angle += prevAngle;
                    if (angle > Math.PI) arc.args[3] = 1;
                    hasPrev = 1;
                }
                for(var j = index; (next = path[++j]) && ~"cs".indexOf(next.command);){
                    var nextData = next.args;
                    if (next.command == "s") {
                        nextLonghand = $a8848f9916d99690$var$makeLonghand({
                            command: "s",
                            args: next.args.slice()
                        }, path[j - 1].args);
                        nextData = nextLonghand.args;
                        nextLonghand.args = nextData.slice(0, 2);
                        suffix = stringify([
                            nextLonghand
                        ]);
                    }
                    if ($a8848f9916d99690$var$isConvex(nextData) && $a8848f9916d99690$var$isArc(nextData, relCircle)) {
                        angle += $a8848f9916d99690$var$findArcAngle(nextData, relCircle);
                        if (angle - 2 * Math.PI > 0.001) break;
                        if (angle > Math.PI) arc.args[3] = 1;
                        arcCurves.push(next);
                        if (2 * Math.PI - angle > 0.001) {
                            arc.coords = next.coords;
                            arc.args[5] = arc.coords[0] - arc.base[0];
                            arc.args[6] = arc.coords[1] - arc.base[1];
                        } else {
                            arc.args[5] = 2 * (relCircle.center[0] - nextData[4]);
                            arc.args[6] = 2 * (relCircle.center[1] - nextData[5]);
                            arc.coords = [
                                arc.base[0] + arc.args[5],
                                arc.base[1] + arc.args[6]
                            ];
                            arc = {
                                command: "a",
                                args: [
                                    r,
                                    r,
                                    0,
                                    0,
                                    sweep,
                                    next.coords[0] - arc.coords[0],
                                    next.coords[1] - arc.coords[1]
                                ],
                                coords: next.coords,
                                base: arc.coords
                            };
                            output.push(arc);
                            j++;
                            break;
                        }
                        relCenter[0] -= nextData[4];
                        relCenter[1] -= nextData[5];
                    } else break;
                }
                if ((stringify(output) + suffix).length < stringify(arcCurves).length) {
                    if (path[j] && path[j].command == "s") $a8848f9916d99690$var$makeLonghand(path[j], path[j - 1].args);
                    if (hasPrev) {
                        var prevArc = output.shift();
                        $a8848f9916d99690$var$roundData(prevArc.args);
                        relSubpoint[0] += prevArc.args[5] - prev.args[prev.args.length - 2];
                        relSubpoint[1] += prevArc.args[6] - prev.args[prev.args.length - 1];
                        prev.command = "a";
                        prev.args = prevArc.args;
                        item.base = prev.coords = prevArc.coords;
                    }
                    arc = output.shift();
                    if (arcCurves.length == 1) item.sdata = sdata.slice();
                    else if (arcCurves.length - 1 - hasPrev > 0) path.splice.apply(path, [
                        index + 1,
                        arcCurves.length - 1 - hasPrev
                    ].concat(output));
                    if (!arc) return false;
                    command = "a";
                    data = arc.args;
                    item.coords = arc.coords;
                }
            }
            if ($a8848f9916d99690$var$precision !== false) {
                if (command === "m" || command === "l" || command === "t" || command === "q" || command === "s" || command === "c") for(var i = data.length; i--;)data[i] += item.base[i % 2] - relSubpoint[i % 2];
                else if (command == "h") data[0] += item.base[0] - relSubpoint[0];
                else if (command == "v") data[0] += item.base[1] - relSubpoint[1];
                else if (command == "a") {
                    data[5] += item.base[0] - relSubpoint[0];
                    data[6] += item.base[1] - relSubpoint[1];
                }
                $a8848f9916d99690$var$roundData(data);
                if (command == "h") relSubpoint[0] += data[0];
                else if (command == "v") relSubpoint[1] += data[0];
                else {
                    relSubpoint[0] += data[data.length - 2];
                    relSubpoint[1] += data[data.length - 1];
                }
                $a8848f9916d99690$var$roundData(relSubpoint);
                if (command === "M" || command === "m") {
                    pathBase[0] = relSubpoint[0];
                    pathBase[1] = relSubpoint[1];
                }
            }
            if (params.straightCurves) {
                if (command === "c" && $a8848f9916d99690$var$isCurveStraightLine(data) || command === "s" && $a8848f9916d99690$var$isCurveStraightLine(sdata)) {
                    if (next && next.command == "s") $a8848f9916d99690$var$makeLonghand(next, data);
                    command = "l";
                    data = data.slice(-2);
                } else if (command === "q" && $a8848f9916d99690$var$isCurveStraightLine(data)) {
                    if (next && next.command == "t") $a8848f9916d99690$var$makeLonghand(next, data);
                    command = "l";
                    data = data.slice(-2);
                } else if (command === "t" && prev.command !== "q" && prev.command !== "t") {
                    command = "l";
                    data = data.slice(-2);
                } else if (command === "a" && (data[0] === 0 || data[1] === 0)) {
                    command = "l";
                    data = data.slice(-2);
                }
            }
            if (params.lineShorthands && command === "l") {
                if (data[1] === 0) {
                    command = "h";
                    data.pop();
                } else if (data[0] === 0) {
                    command = "v";
                    data.shift();
                }
            }
            if (params.collapseRepeated && hasMarkerMid === false && (command === "m" || command === "h" || command === "v") && prev.command && command == prev.command.toLowerCase() && (command != "h" && command != "v" || prev.args[0] >= 0 == data[0] >= 0)) {
                prev.args[0] += data[0];
                if (command != "h" && command != "v") prev.args[1] += data[1];
                prev.coords = item.coords;
                path[index] = prev;
                return false;
            }
            if (params.curveSmoothShorthands && prev.command) {
                if (command === "c") {
                    if (prev.command === "c" && data[0] === -(prev.args[2] - prev.args[4]) && data[1] === -(prev.args[3] - prev.args[5])) {
                        command = "s";
                        data = data.slice(2);
                    } else if (prev.command === "s" && data[0] === -(prev.args[0] - prev.args[2]) && data[1] === -(prev.args[1] - prev.args[3])) {
                        command = "s";
                        data = data.slice(2);
                    } else if (prev.command !== "c" && prev.command !== "s" && data[0] === 0 && data[1] === 0) {
                        command = "s";
                        data = data.slice(2);
                    }
                } else if (command === "q") {
                    if (prev.command === "q" && data[0] === prev.args[2] - prev.args[0] && data[1] === prev.args[3] - prev.args[1]) {
                        command = "t";
                        data = data.slice(2);
                    } else if (prev.command === "t" && data[2] === prev.args[0] && data[3] === prev.args[1]) {
                        command = "t";
                        data = data.slice(2);
                    }
                }
            }
            if (params.removeUseless && !maybeHasStrokeAndLinecap) {
                if ((command === "l" || command === "h" || command === "v" || command === "q" || command === "t" || command === "c" || command === "s") && data.every(function(i) {
                    return i === 0;
                })) {
                    path[index] = prev;
                    return false;
                }
                if (command === "a" && data[5] === 0 && data[6] === 0) {
                    path[index] = prev;
                    return false;
                }
            }
            item.command = command;
            item.args = data;
            prev = item;
        } else {
            relSubpoint[0] = pathBase[0];
            relSubpoint[1] = pathBase[1];
            if (prev.command === "Z" || prev.command === "z") return false;
            prev = item;
        }
        return true;
    });
    return path1;
}
function $a8848f9916d99690$var$convertToMixed(path, params) {
    var prev = path[0];
    path = path.filter(function(item, index) {
        if (index == 0) return true;
        if (item.command === "Z" || item.command === "z") {
            prev = item;
            return true;
        }
        var command = item.command, data = item.args, adata = data.slice();
        if (command === "m" || command === "l" || command === "t" || command === "q" || command === "s" || command === "c") for(var i = adata.length; i--;)adata[i] += item.base[i % 2];
        else if (command == "h") adata[0] += item.base[0];
        else if (command == "v") adata[0] += item.base[1];
        else if (command == "a") {
            adata[5] += item.base[0];
            adata[6] += item.base[1];
        }
        $a8848f9916d99690$var$roundData(adata);
        var absoluteDataStr = $a8848f9916d99690$var$cleanupOutData$1(adata, params), relativeDataStr = $a8848f9916d99690$var$cleanupOutData$1(data, params);
        if (params.forceAbsolutePath || absoluteDataStr.length < relativeDataStr.length && !(params.negativeExtraSpace && command == prev.command && prev.command.charCodeAt(0) > 96 && absoluteDataStr.length == relativeDataStr.length - 1 && (data[0] < 0 || /^0\./.test(data[0]) && prev.args[prev.args.length - 1] % 1))) {
            item.command = command.toUpperCase();
            item.args = adata;
        }
        prev = item;
        return true;
    });
    return path;
}
function $a8848f9916d99690$var$isConvex(data) {
    var center = $a8848f9916d99690$var$getIntersection([
        0,
        0,
        data[2],
        data[3],
        data[0],
        data[1],
        data[4],
        data[5]
    ]);
    return center && data[2] < center[0] == center[0] < 0 && data[3] < center[1] == center[1] < 0 && data[4] < center[0] == center[0] < data[0] && data[5] < center[1] == center[1] < data[1];
}
function $a8848f9916d99690$var$getIntersection(coords) {
    var a1 = coords[1] - coords[3], b1 = coords[2] - coords[0], c1 = coords[0] * coords[3] - coords[2] * coords[1], a2 = coords[5] - coords[7], b2 = coords[6] - coords[4], c2 = coords[4] * coords[7] - coords[5] * coords[6], denom = a1 * b2 - a2 * b1;
    if (!denom) return;
    var cross = [
        (b1 * c2 - b2 * c1) / denom,
        (a1 * c2 - a2 * c1) / -denom
    ];
    if (!isNaN(cross[0]) && !isNaN(cross[1]) && isFinite(cross[0]) && isFinite(cross[1])) return cross;
}
function $a8848f9916d99690$var$strongRound(data) {
    for(var i = data.length; i-- > 0;)if (data[i].toFixed($a8848f9916d99690$var$precision) != data[i]) {
        var rounded = +data[i].toFixed($a8848f9916d99690$var$precision - 1);
        data[i] = +Math.abs(rounded - data[i]).toFixed($a8848f9916d99690$var$precision + 1) >= $a8848f9916d99690$var$error ? +data[i].toFixed($a8848f9916d99690$var$precision) : rounded;
    }
    return data;
}
function $a8848f9916d99690$var$round$1(data) {
    for(var i = data.length; i-- > 0;)data[i] = Math.round(data[i]);
    return data;
}
function $a8848f9916d99690$var$isCurveStraightLine(data) {
    var i = data.length - 2, a = -data[i + 1], b = data[i], d = 1 / (a * a + b * b);
    if (i <= 1 || !isFinite(d)) return false;
    while((i -= 2) >= 0){
        if (Math.sqrt(Math.pow(a * data[i] + b * data[i + 1], 2) * d) > $a8848f9916d99690$var$error) return false;
    }
    return true;
}
function $a8848f9916d99690$var$makeLonghand(item, data) {
    switch(item.command){
        case "s":
            item.command = "c";
            break;
        case "t":
            item.command = "q";
            break;
    }
    item.args.unshift(data[data.length - 2] - data[data.length - 4], data[data.length - 1] - data[data.length - 3]);
    return item;
}
function $a8848f9916d99690$var$getDistance(point1, point2) {
    return Math.hypot(point1[0] - point2[0], point1[1] - point2[1]);
}
function $a8848f9916d99690$var$getCubicBezierPoint(curve, t) {
    var sqrT = t * t, cubT = sqrT * t, mt = 1 - t, sqrMt = mt * mt;
    return [
        3 * sqrMt * t * curve[0] + 3 * mt * sqrT * curve[2] + cubT * curve[4],
        3 * sqrMt * t * curve[1] + 3 * mt * sqrT * curve[3] + cubT * curve[5]
    ];
}
function $a8848f9916d99690$var$findCircle(curve) {
    var midPoint = $a8848f9916d99690$var$getCubicBezierPoint(curve, 0.5), m1 = [
        midPoint[0] / 2,
        midPoint[1] / 2
    ], m2 = [
        (midPoint[0] + curve[4]) / 2,
        (midPoint[1] + curve[5]) / 2
    ], center = $a8848f9916d99690$var$getIntersection([
        m1[0],
        m1[1],
        m1[0] + m1[1],
        m1[1] - m1[0],
        m2[0],
        m2[1],
        m2[0] + (m2[1] - midPoint[1]),
        m2[1] - (m2[0] - midPoint[0])
    ]), radius = center && $a8848f9916d99690$var$getDistance([
        0,
        0
    ], center), tolerance = Math.min($a8848f9916d99690$var$arcThreshold * $a8848f9916d99690$var$error, $a8848f9916d99690$var$arcTolerance * radius / 100);
    if (center && radius < 1000000000000000 && [
        1 / 4,
        3 / 4
    ].every(function(point) {
        return Math.abs($a8848f9916d99690$var$getDistance($a8848f9916d99690$var$getCubicBezierPoint(curve, point), center) - radius) <= tolerance;
    })) return {
        center: center,
        radius: radius
    };
}
function $a8848f9916d99690$var$isArc(curve, circle) {
    var tolerance = Math.min($a8848f9916d99690$var$arcThreshold * $a8848f9916d99690$var$error, $a8848f9916d99690$var$arcTolerance * circle.radius / 100);
    return [
        0,
        1 / 4,
        0.5,
        3 / 4,
        1
    ].every(function(point) {
        return Math.abs($a8848f9916d99690$var$getDistance($a8848f9916d99690$var$getCubicBezierPoint(curve, point), circle.center) - circle.radius) <= tolerance;
    });
}
function $a8848f9916d99690$var$isArcPrev(curve, circle) {
    return $a8848f9916d99690$var$isArc(curve, {
        center: [
            circle.center[0] + curve[4],
            circle.center[1] + curve[5]
        ],
        radius: circle.radius
    });
}
function $a8848f9916d99690$var$findArcAngle(curve, relCircle) {
    var x1 = -relCircle.center[0], y1 = -relCircle.center[1], x2 = curve[4] - relCircle.center[0], y2 = curve[5] - relCircle.center[1];
    return Math.acos((x1 * x2 + y1 * y2) / Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2)));
}
function $a8848f9916d99690$var$data2Path(params, pathData) {
    return pathData.reduce(function(pathString, item) {
        var strData = "";
        if (item.args) strData = $a8848f9916d99690$var$cleanupOutData$1($a8848f9916d99690$var$roundData(item.args.slice()), params);
        return pathString + item.command + strData;
    }, "");
}
var $a8848f9916d99690$var$convertTransform$2 = {
};
const { cleanupOutData: $a8848f9916d99690$var$cleanupOutData  } = $a8848f9916d99690$var$tools;
const { transform2js: $a8848f9916d99690$var$transform2js , transformsMultiply: $a8848f9916d99690$var$transformsMultiply , matrixToTransform: $a8848f9916d99690$var$matrixToTransform  } = $a8848f9916d99690$var$_transforms;
$a8848f9916d99690$var$convertTransform$2.type = "visitor";
$a8848f9916d99690$var$convertTransform$2.name = "convertTransform";
$a8848f9916d99690$var$convertTransform$2.active = true;
$a8848f9916d99690$var$convertTransform$2.description = "collapses multiple transformations and optimizes it";
$a8848f9916d99690$var$convertTransform$2.fn = (_root, params)=>{
    const { convertToShorts: convertToShorts = true , degPrecision: degPrecision , floatPrecision: floatPrecision = 3 , transformPrecision: transformPrecision = 5 , matrixToTransform: matrixToTransform = true , shortTranslate: shortTranslate = true , shortScale: shortScale = true , shortRotate: shortRotate = true , removeUseless: removeUseless = true , collapseIntoOne: collapseIntoOne = true , leadingZero: leadingZero = true , negativeExtraSpace: negativeExtraSpace = false  } = params;
    const newParams = {
        convertToShorts: convertToShorts,
        degPrecision: degPrecision,
        floatPrecision: floatPrecision,
        transformPrecision: transformPrecision,
        matrixToTransform: matrixToTransform,
        shortTranslate: shortTranslate,
        shortScale: shortScale,
        shortRotate: shortRotate,
        removeUseless: removeUseless,
        collapseIntoOne: collapseIntoOne,
        leadingZero: leadingZero,
        negativeExtraSpace: negativeExtraSpace
    };
    return {
        element: {
            enter: (node)=>{
                if (node.attributes.transform != null) $a8848f9916d99690$var$convertTransform$1(node, "transform", newParams);
                if (node.attributes.gradientTransform != null) $a8848f9916d99690$var$convertTransform$1(node, "gradientTransform", newParams);
                if (node.attributes.patternTransform != null) $a8848f9916d99690$var$convertTransform$1(node, "patternTransform", newParams);
            }
        }
    };
};
const $a8848f9916d99690$var$convertTransform$1 = (item3, attrName, params)=>{
    let data = $a8848f9916d99690$var$transform2js(item3.attributes[attrName]);
    params = $a8848f9916d99690$var$definePrecision(data, params);
    if (params.collapseIntoOne && data.length > 1) data = [
        $a8848f9916d99690$var$transformsMultiply(data)
    ];
    if (params.convertToShorts) data = $a8848f9916d99690$var$convertToShorts(data, params);
    else data.forEach((item)=>$a8848f9916d99690$var$roundTransform(item, params)
    );
    if (params.removeUseless) data = $a8848f9916d99690$var$removeUseless(data);
    if (data.length) item3.attributes[attrName] = $a8848f9916d99690$var$js2transform(data, params);
    else delete item3.attributes[attrName];
};
const $a8848f9916d99690$var$definePrecision = (data, { ...newParams })=>{
    const matrixData = [];
    for (const item of data)if (item.name == "matrix") matrixData.push(...item.data.slice(0, 4));
    let significantDigits = newParams.transformPrecision;
    if (matrixData.length) {
        newParams.transformPrecision = Math.min(newParams.transformPrecision, Math.max.apply(Math, matrixData.map($a8848f9916d99690$var$floatDigits)) || newParams.transformPrecision);
        significantDigits = Math.max.apply(Math, matrixData.map((n)=>n.toString().replace(/\D+/g, "").length
        ));
    }
    if (newParams.degPrecision == null) newParams.degPrecision = Math.max(0, Math.min(newParams.floatPrecision, significantDigits - 2));
    return newParams;
};
const $a8848f9916d99690$var$degRound = (data, params)=>{
    if (params.degPrecision != null && params.degPrecision >= 1 && params.floatPrecision < 20) return $a8848f9916d99690$var$smartRound(params.degPrecision, data);
    else return $a8848f9916d99690$var$round(data);
};
const $a8848f9916d99690$var$floatRound = (data, params)=>{
    if (params.floatPrecision >= 1 && params.floatPrecision < 20) return $a8848f9916d99690$var$smartRound(params.floatPrecision, data);
    else return $a8848f9916d99690$var$round(data);
};
const $a8848f9916d99690$var$transformRound = (data, params)=>{
    if (params.transformPrecision >= 1 && params.floatPrecision < 20) return $a8848f9916d99690$var$smartRound(params.transformPrecision, data);
    else return $a8848f9916d99690$var$round(data);
};
const $a8848f9916d99690$var$floatDigits = (n)=>{
    const str = n.toString();
    return str.slice(str.indexOf(".")).length - 1;
};
const $a8848f9916d99690$var$convertToShorts = (transforms, params)=>{
    for(var i = 0; i < transforms.length; i++){
        var transform = transforms[i];
        if (params.matrixToTransform && transform.name === "matrix") {
            var decomposed = $a8848f9916d99690$var$matrixToTransform(transform, params);
            if ($a8848f9916d99690$var$js2transform(decomposed, params).length <= $a8848f9916d99690$var$js2transform([
                transform
            ], params).length) transforms.splice(i, 1, ...decomposed);
            transform = transforms[i];
        }
        $a8848f9916d99690$var$roundTransform(transform, params);
        if (params.shortTranslate && transform.name === "translate" && transform.data.length === 2 && !transform.data[1]) transform.data.pop();
        if (params.shortScale && transform.name === "scale" && transform.data.length === 2 && transform.data[0] === transform.data[1]) transform.data.pop();
        if (params.shortRotate && transforms[i - 2] && transforms[i - 2].name === "translate" && transforms[i - 1].name === "rotate" && transforms[i].name === "translate" && transforms[i - 2].data[0] === -transforms[i].data[0] && transforms[i - 2].data[1] === -transforms[i].data[1]) {
            transforms.splice(i - 2, 3, {
                name: "rotate",
                data: [
                    transforms[i - 1].data[0],
                    transforms[i - 2].data[0],
                    transforms[i - 2].data[1]
                ]
            });
            i -= 2;
        }
    }
    return transforms;
};
const $a8848f9916d99690$var$removeUseless = (transforms)=>transforms.filter((transform)=>{
        if ([
            "translate",
            "rotate",
            "skewX",
            "skewY"
        ].indexOf(transform.name) > -1 && (transform.data.length == 1 || transform.name == "rotate") && !transform.data[0] || transform.name == "translate" && !transform.data[0] && !transform.data[1] || transform.name == "scale" && transform.data[0] == 1 && (transform.data.length < 2 || transform.data[1] == 1) || transform.name == "matrix" && transform.data[0] == 1 && transform.data[3] == 1 && !(transform.data[1] || transform.data[2] || transform.data[4] || transform.data[5])) return false;
        return true;
    })
;
const $a8848f9916d99690$var$js2transform = (transformJS, params)=>{
    var transformString = "";
    transformJS.forEach((transform)=>{
        $a8848f9916d99690$var$roundTransform(transform, params);
        transformString += (transformString && " ") + transform.name + "(" + $a8848f9916d99690$var$cleanupOutData(transform.data, params) + ")";
    });
    return transformString;
};
const $a8848f9916d99690$var$roundTransform = (transform, params)=>{
    switch(transform.name){
        case "translate":
            transform.data = $a8848f9916d99690$var$floatRound(transform.data, params);
            break;
        case "rotate":
            transform.data = [
                ...$a8848f9916d99690$var$degRound(transform.data.slice(0, 1), params),
                ...$a8848f9916d99690$var$floatRound(transform.data.slice(1), params)
            ];
            break;
        case "skewX":
        case "skewY":
            transform.data = $a8848f9916d99690$var$degRound(transform.data, params);
            break;
        case "scale":
            transform.data = $a8848f9916d99690$var$transformRound(transform.data, params);
            break;
        case "matrix":
            transform.data = [
                ...$a8848f9916d99690$var$transformRound(transform.data.slice(0, 4), params),
                ...$a8848f9916d99690$var$floatRound(transform.data.slice(4), params)
            ];
            break;
    }
    return transform;
};
const $a8848f9916d99690$var$round = (data)=>data.map(Math.round)
;
const $a8848f9916d99690$var$smartRound = (precision, data)=>{
    for(var i = data.length, tolerance = +Math.pow(0.1, precision).toFixed(precision); i--;)if (Number(data[i].toFixed(precision)) !== data[i]) {
        var rounded = +data[i].toFixed(precision - 1);
        data[i] = +Math.abs(rounded - data[i]).toFixed(precision + 1) >= tolerance ? +data[i].toFixed(precision) : rounded;
    }
    return data;
};
var $a8848f9916d99690$var$removeEmptyAttrs$1 = {
};
const { attrsGroups: $a8848f9916d99690$var$attrsGroups  } = $a8848f9916d99690$var$_collections;
$a8848f9916d99690$var$removeEmptyAttrs$1.type = "visitor";
$a8848f9916d99690$var$removeEmptyAttrs$1.name = "removeEmptyAttrs";
$a8848f9916d99690$var$removeEmptyAttrs$1.active = true;
$a8848f9916d99690$var$removeEmptyAttrs$1.description = "removes empty attributes";
$a8848f9916d99690$var$removeEmptyAttrs$1.fn = ()=>({
        element: {
            enter: (node)=>{
                for (const [name62, value] of Object.entries(node.attributes))if (value === "" && $a8848f9916d99690$var$attrsGroups.conditionalProcessing.includes(name62) === false) delete node.attributes[name62];
            }
        }
    })
;
var $a8848f9916d99690$var$removeEmptyContainers$1 = {
};
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$8  } = $a8848f9916d99690$var$xast;
const { elemsGroups: $a8848f9916d99690$var$elemsGroups  } = $a8848f9916d99690$var$_collections;
$a8848f9916d99690$var$removeEmptyContainers$1.type = "visitor";
$a8848f9916d99690$var$removeEmptyContainers$1.name = "removeEmptyContainers";
$a8848f9916d99690$var$removeEmptyContainers$1.active = true;
$a8848f9916d99690$var$removeEmptyContainers$1.description = "removes empty container elements";
$a8848f9916d99690$var$removeEmptyContainers$1.fn = ()=>({
        element: {
            exit: (node, parentNode)=>{
                if (node.name === "svg" || $a8848f9916d99690$var$elemsGroups.container.includes(node.name) === false || node.children.length !== 0) return;
                if (node.name === "pattern" && Object.keys(node.attributes).length !== 0) return;
                if (node.name === "g" && node.attributes.filter != null) return;
                if (node.name === "mask" && node.attributes.id != null) return;
                $a8848f9916d99690$var$detachNodeFromParent$8(node, parentNode);
            }
        }
    })
;
var $a8848f9916d99690$var$mergePaths$1 = {
};
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$7  } = $a8848f9916d99690$var$xast;
const { collectStylesheet: $a8848f9916d99690$var$collectStylesheet , computeStyle: $a8848f9916d99690$var$computeStyle  } = $a8848f9916d99690$var$style;
const { path2js: $a8848f9916d99690$var$path2js , js2path: $a8848f9916d99690$var$js2path , intersects: $a8848f9916d99690$var$intersects$1  } = $a8848f9916d99690$var$_path;
$a8848f9916d99690$var$mergePaths$1.type = "visitor";
$a8848f9916d99690$var$mergePaths$1.name = "mergePaths";
$a8848f9916d99690$var$mergePaths$1.active = true;
$a8848f9916d99690$var$mergePaths$1.description = "merges multiple paths in one if possible";
$a8848f9916d99690$var$mergePaths$1.fn = (root, params)=>{
    const { force: force = false , floatPrecision: floatPrecision , noSpaceAfterFlags: noSpaceAfterFlags = false  } = params;
    const stylesheet = $a8848f9916d99690$var$collectStylesheet(root);
    return {
        element: {
            enter: (node)=>{
                let prevChild = null;
                for (const child of node.children){
                    if (prevChild == null || prevChild.type !== "element" || prevChild.name !== "path" || prevChild.children.length !== 0 || prevChild.attributes.d == null) {
                        prevChild = child;
                        continue;
                    }
                    if (child.type !== "element" || child.name !== "path" || child.children.length !== 0 || child.attributes.d == null) {
                        prevChild = child;
                        continue;
                    }
                    const computedStyle = $a8848f9916d99690$var$computeStyle(stylesheet, child);
                    if (computedStyle["marker-start"] || computedStyle["marker-mid"] || computedStyle["marker-end"]) {
                        prevChild = child;
                        continue;
                    }
                    const prevChildAttrs = Object.keys(prevChild.attributes);
                    const childAttrs = Object.keys(child.attributes);
                    let attributesAreEqual = prevChildAttrs.length === childAttrs.length;
                    for (const name63 of childAttrs){
                        if (name63 !== "d") {
                            if (prevChild.attributes[name63] == null || prevChild.attributes[name63] !== child.attributes[name63]) attributesAreEqual = false;
                        }
                    }
                    const prevPathJS = $a8848f9916d99690$var$path2js(prevChild);
                    const curPathJS = $a8848f9916d99690$var$path2js(child);
                    if (attributesAreEqual && (force || !$a8848f9916d99690$var$intersects$1(prevPathJS, curPathJS))) {
                        $a8848f9916d99690$var$js2path(prevChild, prevPathJS.concat(curPathJS), {
                            floatPrecision: floatPrecision,
                            noSpaceAfterFlags: noSpaceAfterFlags
                        });
                        $a8848f9916d99690$var$detachNodeFromParent$7(child, node);
                        continue;
                    }
                    prevChild = child;
                }
            }
        }
    };
};
var $a8848f9916d99690$var$removeUnusedNS$1 = {
};
$a8848f9916d99690$var$removeUnusedNS$1.type = "visitor";
$a8848f9916d99690$var$removeUnusedNS$1.name = "removeUnusedNS";
$a8848f9916d99690$var$removeUnusedNS$1.active = true;
$a8848f9916d99690$var$removeUnusedNS$1.description = "removes unused namespaces declaration";
$a8848f9916d99690$var$removeUnusedNS$1.fn = ()=>{
    const unusedNamespaces = new Set;
    return {
        element: {
            enter: (node, parentNode)=>{
                if (node.name === "svg" && parentNode.type === "root") {
                    for (const name64 of Object.keys(node.attributes))if (name64.startsWith("xmlns:")) {
                        const local = name64.slice(6);
                        unusedNamespaces.add(local);
                    }
                }
                if (unusedNamespaces.size !== 0) {
                    if (node.name.includes(":")) {
                        const [ns] = node.name.split(":");
                        if (unusedNamespaces.has(ns)) unusedNamespaces.delete(ns);
                    }
                    for (const name65 of Object.keys(node.attributes))if (name65.includes(":")) {
                        const [ns] = name65.split(":");
                        unusedNamespaces.delete(ns);
                    }
                }
            },
            exit: (node, parentNode)=>{
                if (node.name === "svg" && parentNode.type === "root") for (const name of unusedNamespaces)delete node.attributes[`xmlns:${name}`];
            }
        }
    };
};
var $a8848f9916d99690$var$sortDefsChildren$1 = {
};
$a8848f9916d99690$var$sortDefsChildren$1.type = "visitor";
$a8848f9916d99690$var$sortDefsChildren$1.name = "sortDefsChildren";
$a8848f9916d99690$var$sortDefsChildren$1.active = true;
$a8848f9916d99690$var$sortDefsChildren$1.description = "Sorts children of <defs> to improve compression";
$a8848f9916d99690$var$sortDefsChildren$1.fn = ()=>({
        element: {
            enter: (node)=>{
                if (node.name === "defs") {
                    const frequencies = new Map;
                    for (const child of node.children)if (child.type === "element") {
                        const frequency = frequencies.get(child.name);
                        if (frequency == null) frequencies.set(child.name, 1);
                        else frequencies.set(child.name, frequency + 1);
                    }
                    node.children.sort((a, b)=>{
                        if (a.type !== "element" || b.type !== "element") return 0;
                        const aFrequency = frequencies.get(a.name);
                        const bFrequency = frequencies.get(b.name);
                        if (aFrequency != null && bFrequency != null) {
                            const frequencyComparison = bFrequency - aFrequency;
                            if (frequencyComparison !== 0) return frequencyComparison;
                        }
                        const lengthComparison = b.name.length - a.name.length;
                        if (lengthComparison !== 0) return lengthComparison;
                        if (a.name !== b.name) return a.name > b.name ? -1 : 1;
                        return 0;
                    });
                }
            }
        }
    })
;
var $a8848f9916d99690$var$removeTitle$1 = {
};
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$6  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$removeTitle$1.name = "removeTitle";
$a8848f9916d99690$var$removeTitle$1.type = "visitor";
$a8848f9916d99690$var$removeTitle$1.active = true;
$a8848f9916d99690$var$removeTitle$1.description = "removes <title>";
$a8848f9916d99690$var$removeTitle$1.fn = ()=>({
        element: {
            enter: (node, parentNode)=>{
                if (node.name === "title") $a8848f9916d99690$var$detachNodeFromParent$6(node, parentNode);
            }
        }
    })
;
var $a8848f9916d99690$var$removeDesc$1 = {
};
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$5  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$removeDesc$1.name = "removeDesc";
$a8848f9916d99690$var$removeDesc$1.type = "visitor";
$a8848f9916d99690$var$removeDesc$1.active = true;
$a8848f9916d99690$var$removeDesc$1.description = "removes <desc>";
const $a8848f9916d99690$var$standardDescs = /^(Created with|Created using)/;
$a8848f9916d99690$var$removeDesc$1.fn = (root, params)=>{
    const { removeAny: removeAny = true  } = params;
    return {
        element: {
            enter: (node, parentNode)=>{
                if (node.name === "desc") {
                    if (removeAny || node.children.length === 0 || node.children[0].type === "text" && $a8848f9916d99690$var$standardDescs.test(node.children[0].value)) $a8848f9916d99690$var$detachNodeFromParent$5(node, parentNode);
                }
            }
        }
    };
};
const { createPreset: $a8848f9916d99690$var$createPreset  } = $a8848f9916d99690$var$plugins;
const $a8848f9916d99690$var$removeDoctype = $a8848f9916d99690$var$removeDoctype$1;
const $a8848f9916d99690$var$removeXMLProcInst = $a8848f9916d99690$var$removeXMLProcInst$1;
const $a8848f9916d99690$var$removeComments = $a8848f9916d99690$var$removeComments$1;
const $a8848f9916d99690$var$removeMetadata = $a8848f9916d99690$var$removeMetadata$1;
const $a8848f9916d99690$var$removeEditorsNSData = $a8848f9916d99690$var$removeEditorsNSData$1;
const $a8848f9916d99690$var$cleanupAttrs = $a8848f9916d99690$var$cleanupAttrs$1;
const $a8848f9916d99690$var$mergeStyles = $a8848f9916d99690$var$mergeStyles$1;
const $a8848f9916d99690$var$inlineStyles = $a8848f9916d99690$var$inlineStyles$1;
const $a8848f9916d99690$var$minifyStyles = $a8848f9916d99690$var$minifyStyles$1;
const $a8848f9916d99690$var$cleanupIDs = $a8848f9916d99690$var$cleanupIDs$1;
const $a8848f9916d99690$var$removeUselessDefs = $a8848f9916d99690$var$removeUselessDefs$1;
const $a8848f9916d99690$var$cleanupNumericValues = $a8848f9916d99690$var$cleanupNumericValues$1;
const $a8848f9916d99690$var$convertColors = $a8848f9916d99690$var$convertColors$1;
const $a8848f9916d99690$var$removeUnknownsAndDefaults = $a8848f9916d99690$var$removeUnknownsAndDefaults$1;
const $a8848f9916d99690$var$removeNonInheritableGroupAttrs = $a8848f9916d99690$var$removeNonInheritableGroupAttrs$1;
const $a8848f9916d99690$var$removeUselessStrokeAndFill = $a8848f9916d99690$var$removeUselessStrokeAndFill$1;
const $a8848f9916d99690$var$removeViewBox = $a8848f9916d99690$var$removeViewBox$1;
const $a8848f9916d99690$var$cleanupEnableBackground = $a8848f9916d99690$var$cleanupEnableBackground$1;
const $a8848f9916d99690$var$removeHiddenElems = $a8848f9916d99690$var$removeHiddenElems$1;
const $a8848f9916d99690$var$removeEmptyText = $a8848f9916d99690$var$removeEmptyText$1;
const $a8848f9916d99690$var$convertShapeToPath = $a8848f9916d99690$var$convertShapeToPath$1;
const $a8848f9916d99690$var$convertEllipseToCircle = $a8848f9916d99690$var$convertEllipseToCircle$1;
const $a8848f9916d99690$var$moveElemsAttrsToGroup = $a8848f9916d99690$var$moveElemsAttrsToGroup$1;
const $a8848f9916d99690$var$moveGroupAttrsToElems = $a8848f9916d99690$var$moveGroupAttrsToElems$1;
const $a8848f9916d99690$var$collapseGroups = $a8848f9916d99690$var$collapseGroups$1;
const $a8848f9916d99690$var$convertPathData = $a8848f9916d99690$var$convertPathData$1;
const $a8848f9916d99690$var$convertTransform = $a8848f9916d99690$var$convertTransform$2;
const $a8848f9916d99690$var$removeEmptyAttrs = $a8848f9916d99690$var$removeEmptyAttrs$1;
const $a8848f9916d99690$var$removeEmptyContainers = $a8848f9916d99690$var$removeEmptyContainers$1;
const $a8848f9916d99690$var$mergePaths = $a8848f9916d99690$var$mergePaths$1;
const $a8848f9916d99690$var$removeUnusedNS = $a8848f9916d99690$var$removeUnusedNS$1;
const $a8848f9916d99690$var$sortDefsChildren = $a8848f9916d99690$var$sortDefsChildren$1;
const $a8848f9916d99690$var$removeTitle = $a8848f9916d99690$var$removeTitle$1;
const $a8848f9916d99690$var$removeDesc = $a8848f9916d99690$var$removeDesc$1;
const $a8848f9916d99690$var$presetDefault = $a8848f9916d99690$var$createPreset({
    name: "presetDefault",
    plugins: [
        $a8848f9916d99690$var$removeDoctype,
        $a8848f9916d99690$var$removeXMLProcInst,
        $a8848f9916d99690$var$removeComments,
        $a8848f9916d99690$var$removeMetadata,
        $a8848f9916d99690$var$removeEditorsNSData,
        $a8848f9916d99690$var$cleanupAttrs,
        $a8848f9916d99690$var$mergeStyles,
        $a8848f9916d99690$var$inlineStyles,
        $a8848f9916d99690$var$minifyStyles,
        $a8848f9916d99690$var$cleanupIDs,
        $a8848f9916d99690$var$removeUselessDefs,
        $a8848f9916d99690$var$cleanupNumericValues,
        $a8848f9916d99690$var$convertColors,
        $a8848f9916d99690$var$removeUnknownsAndDefaults,
        $a8848f9916d99690$var$removeNonInheritableGroupAttrs,
        $a8848f9916d99690$var$removeUselessStrokeAndFill,
        $a8848f9916d99690$var$removeViewBox,
        $a8848f9916d99690$var$cleanupEnableBackground,
        $a8848f9916d99690$var$removeHiddenElems,
        $a8848f9916d99690$var$removeEmptyText,
        $a8848f9916d99690$var$convertShapeToPath,
        $a8848f9916d99690$var$convertEllipseToCircle,
        $a8848f9916d99690$var$moveElemsAttrsToGroup,
        $a8848f9916d99690$var$moveGroupAttrsToElems,
        $a8848f9916d99690$var$collapseGroups,
        $a8848f9916d99690$var$convertPathData,
        $a8848f9916d99690$var$convertTransform,
        $a8848f9916d99690$var$removeEmptyAttrs,
        $a8848f9916d99690$var$removeEmptyContainers,
        $a8848f9916d99690$var$mergePaths,
        $a8848f9916d99690$var$removeUnusedNS,
        $a8848f9916d99690$var$sortDefsChildren,
        $a8848f9916d99690$var$removeTitle,
        $a8848f9916d99690$var$removeDesc
    ]
});
var $a8848f9916d99690$var$presetDefault_1 = $a8848f9916d99690$var$presetDefault;
var $a8848f9916d99690$var$addAttributesToSVGElement = {
};
$a8848f9916d99690$var$addAttributesToSVGElement.name = "addAttributesToSVGElement";
$a8848f9916d99690$var$addAttributesToSVGElement.type = "visitor";
$a8848f9916d99690$var$addAttributesToSVGElement.active = false;
$a8848f9916d99690$var$addAttributesToSVGElement.description = "adds attributes to an outer <svg> element";
var $a8848f9916d99690$var$ENOCLS$1 = `Error in plugin "addAttributesToSVGElement": absent parameters.\nIt should have a list of "attributes" or one "attribute".\nConfig example:\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attribute: "mySvg"\n    }\n  }\n]\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attributes: ["mySvg", "size-big"]\n    }\n  }\n]\n\nplugins: [\n  {\n    name: 'addAttributesToSVGElement',\n    params: {\n      attributes: [\n        {\n          focusable: false\n        },\n        {\n          'data-image': icon\n        }\n      ]\n    }\n  }\n]\n`;
$a8848f9916d99690$var$addAttributesToSVGElement.fn = (root, params)=>{
    if (!Array.isArray(params.attributes) && !params.attribute) {
        console.error($a8848f9916d99690$var$ENOCLS$1);
        return null;
    }
    const attributes = params.attributes || [
        params.attribute
    ];
    return {
        element: {
            enter: (node, parentNode)=>{
                if (node.name === "svg" && parentNode.type === "root") for (const attribute of attributes){
                    if (typeof attribute === "string") {
                        if (node.attributes[attribute] == null) node.attributes[attribute] = undefined;
                    }
                    if (typeof attribute === "object") {
                        for (const key of Object.keys(attribute))if (node.attributes[key] == null) node.attributes[key] = attribute[key];
                    }
                }
            }
        }
    };
};
var $a8848f9916d99690$var$addClassesToSVGElement = {
};
$a8848f9916d99690$var$addClassesToSVGElement.name = "addClassesToSVGElement";
$a8848f9916d99690$var$addClassesToSVGElement.type = "visitor";
$a8848f9916d99690$var$addClassesToSVGElement.active = false;
$a8848f9916d99690$var$addClassesToSVGElement.description = "adds classnames to an outer <svg> element";
var $a8848f9916d99690$var$ENOCLS = `Error in plugin "addClassesToSVGElement": absent parameters.\nIt should have a list of classes in "classNames" or one "className".\nConfig example:\n\nplugins: [\n  {\n    name: "addClassesToSVGElement",\n    params: {\n      className: "mySvg"\n    }\n  }\n]\n\nplugins: [\n  {\n    name: "addClassesToSVGElement",\n    params: {\n      classNames: ["mySvg", "size-big"]\n    }\n  }\n]\n`;
$a8848f9916d99690$var$addClassesToSVGElement.fn = (root, params)=>{
    if (!(Array.isArray(params.classNames) && params.classNames.some(String)) && !params.className) {
        console.error($a8848f9916d99690$var$ENOCLS);
        return null;
    }
    const classNames = params.classNames || [
        params.className
    ];
    return {
        element: {
            enter: (node, parentNode)=>{
                if (node.name === "svg" && parentNode.type === "root") {
                    const classList = new Set(node.attributes.class == null ? null : node.attributes.class.split(" "));
                    for (const className of classNames)if (className != null) classList.add(className);
                    node.attributes.class = Array.from(classList).join(" ");
                }
            }
        }
    };
};
var $a8848f9916d99690$var$cleanupListOfValues = {
};
const { removeLeadingZero: $a8848f9916d99690$var$removeLeadingZero  } = $a8848f9916d99690$var$tools;
$a8848f9916d99690$var$cleanupListOfValues.name = "cleanupListOfValues";
$a8848f9916d99690$var$cleanupListOfValues.type = "visitor";
$a8848f9916d99690$var$cleanupListOfValues.active = false;
$a8848f9916d99690$var$cleanupListOfValues.description = "rounds list of values to the fixed precision";
const $a8848f9916d99690$var$regNumericValues = /^([-+]?\d*\.?\d+([eE][-+]?\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/;
const $a8848f9916d99690$var$regSeparator = /\s+,?\s*|,\s*/;
const $a8848f9916d99690$var$absoluteLengths = {
    cm: 96 / 2.54,
    mm: 96 / 25.4,
    in: 96,
    pt: 4 / 3,
    pc: 16,
    px: 1
};
$a8848f9916d99690$var$cleanupListOfValues.fn = (_root, params)=>{
    const { floatPrecision: floatPrecision = 3 , leadingZero: leadingZero = true , defaultPx: defaultPx = true , convertToPx: convertToPx = true  } = params;
    const roundValues = (lists)=>{
        const roundedList = [];
        for (const elem of lists.split($a8848f9916d99690$var$regSeparator)){
            const match = elem.match($a8848f9916d99690$var$regNumericValues);
            const matchNew = elem.match(/new/);
            if (match) {
                let num = Number(Number(match[1]).toFixed(floatPrecision));
                let matchedUnit = match[3] || "";
                let units = matchedUnit;
                if (convertToPx && units && units in $a8848f9916d99690$var$absoluteLengths) {
                    const pxNum = Number(($a8848f9916d99690$var$absoluteLengths[units] * Number(match[1])).toFixed(floatPrecision));
                    if (pxNum.toString().length < match[0].length) {
                        num = pxNum;
                        units = "px";
                    }
                }
                let str;
                if (leadingZero) str = $a8848f9916d99690$var$removeLeadingZero(num);
                else str = num.toString();
                if (defaultPx && units === "px") units = "";
                roundedList.push(str + units);
            } else if (matchNew) roundedList.push("new");
            else if (elem) roundedList.push(elem);
        }
        return roundedList.join(" ");
    };
    return {
        element: {
            enter: (node)=>{
                if (node.attributes.points != null) node.attributes.points = roundValues(node.attributes.points);
                if (node.attributes["enable-background"] != null) node.attributes["enable-background"] = roundValues(node.attributes["enable-background"]);
                if (node.attributes.viewBox != null) node.attributes.viewBox = roundValues(node.attributes.viewBox);
                if (node.attributes["stroke-dasharray"] != null) node.attributes["stroke-dasharray"] = roundValues(node.attributes["stroke-dasharray"]);
                if (node.attributes.dx != null) node.attributes.dx = roundValues(node.attributes.dx);
                if (node.attributes.dy != null) node.attributes.dy = roundValues(node.attributes.dy);
                if (node.attributes.x != null) node.attributes.x = roundValues(node.attributes.x);
                if (node.attributes.y != null) node.attributes.y = roundValues(node.attributes.y);
            }
        }
    };
};
var $a8848f9916d99690$var$convertStyleToAttrs = {
};
$a8848f9916d99690$var$convertStyleToAttrs.name = "convertStyleToAttrs";
$a8848f9916d99690$var$convertStyleToAttrs.type = "perItem";
$a8848f9916d99690$var$convertStyleToAttrs.active = false;
$a8848f9916d99690$var$convertStyleToAttrs.description = "converts style to attributes";
$a8848f9916d99690$var$convertStyleToAttrs.params = {
    keepImportant: false
};
var $a8848f9916d99690$var$stylingProps = $a8848f9916d99690$var$_collections.attrsGroups.presentation, $a8848f9916d99690$var$rEscape = "\\\\(?:[0-9a-f]{1,6}\\s?|\\r\\n|.)", $a8848f9916d99690$var$rAttr = "\\s*(" + $a8848f9916d99690$var$g("[^:;\\\\]", $a8848f9916d99690$var$rEscape) + "*?)\\s*", $a8848f9916d99690$var$rSingleQuotes = "'(?:[^'\\n\\r\\\\]|" + $a8848f9916d99690$var$rEscape + ")*?(?:'|$)", $a8848f9916d99690$var$rQuotes = '"(?:[^"\\n\\r\\\\]|' + $a8848f9916d99690$var$rEscape + ')*?(?:"|$)', $a8848f9916d99690$var$rQuotedString = new RegExp("^" + $a8848f9916d99690$var$g($a8848f9916d99690$var$rSingleQuotes, $a8848f9916d99690$var$rQuotes) + "$"), $a8848f9916d99690$var$rParenthesis = "\\(" + $a8848f9916d99690$var$g("[^'\"()\\\\]+", $a8848f9916d99690$var$rEscape, $a8848f9916d99690$var$rSingleQuotes, $a8848f9916d99690$var$rQuotes) + "*?" + "\\)", $a8848f9916d99690$var$rValue = "\\s*(" + $a8848f9916d99690$var$g("[^!'\"();\\\\]+?", $a8848f9916d99690$var$rEscape, $a8848f9916d99690$var$rSingleQuotes, $a8848f9916d99690$var$rQuotes, $a8848f9916d99690$var$rParenthesis, "[^;]*?") + "*?" + ")", $a8848f9916d99690$var$rDeclEnd = "\\s*(?:;\\s*|$)", $a8848f9916d99690$var$rImportant = "(\\s*!important(?![-(\\w]))?", $a8848f9916d99690$var$regDeclarationBlock = new RegExp($a8848f9916d99690$var$rAttr + ":" + $a8848f9916d99690$var$rValue + $a8848f9916d99690$var$rImportant + $a8848f9916d99690$var$rDeclEnd, "ig"), $a8848f9916d99690$var$regStripComments = new RegExp($a8848f9916d99690$var$g($a8848f9916d99690$var$rEscape, $a8848f9916d99690$var$rSingleQuotes, $a8848f9916d99690$var$rQuotes, "/\\*[^]*?\\*/"), "ig");
$a8848f9916d99690$var$convertStyleToAttrs.fn = function(item, params) {
    if (item.type === "element" && item.attributes.style != null) {
        let styles = [];
        const newAttributes = {
        };
        const styleValue = item.attributes.style.replace($a8848f9916d99690$var$regStripComments, (match)=>match[0] == "/" ? "" : match[0] == "\\" && /[-g-z]/i.test(match[1]) ? match[1] : match
        );
        $a8848f9916d99690$var$regDeclarationBlock.lastIndex = 0;
        for(var rule; rule = $a8848f9916d99690$var$regDeclarationBlock.exec(styleValue);)if (!params.keepImportant || !rule[3]) styles.push([
            rule[1],
            rule[2]
        ]);
        if (styles.length) {
            styles = styles.filter(function(style) {
                if (style[0]) {
                    var prop = style[0].toLowerCase(), val = style[1];
                    if ($a8848f9916d99690$var$rQuotedString.test(val)) val = val.slice(1, -1);
                    if ($a8848f9916d99690$var$stylingProps.includes(prop)) {
                        newAttributes[prop] = val;
                        return false;
                    }
                }
                return true;
            });
            Object.assign(item.attributes, newAttributes);
            if (styles.length) item.attributes.style = styles.map((declaration)=>declaration.join(":")
            ).join(";");
            else delete item.attributes.style;
        }
    }
};
function $a8848f9916d99690$var$g() {
    return "(?:" + Array.prototype.join.call(arguments, "|") + ")";
}
var $a8848f9916d99690$var$prefixIds = {
};
const $a8848f9916d99690$var$csstree = $a8848f9916d99690$var$csstree_min.exports;
const { referencesProps: $a8848f9916d99690$var$referencesProps  } = $a8848f9916d99690$var$_collections;
$a8848f9916d99690$var$prefixIds.type = "visitor";
$a8848f9916d99690$var$prefixIds.name = "prefixIds";
$a8848f9916d99690$var$prefixIds.active = false;
$a8848f9916d99690$var$prefixIds.description = "prefix IDs";
const $a8848f9916d99690$var$getBasename = (path)=>{
    const matched = path.match(/[/\\]?([^/\\]+)$/);
    if (matched) return matched[1];
    return "";
};
const $a8848f9916d99690$var$escapeIdentifierName = (str)=>str.replace(/[. ]/g, "_")
;
const $a8848f9916d99690$var$unquote = (string)=>{
    if (string.startsWith('"') && string.endsWith('"') || string.startsWith("'") && string.endsWith("'")) return string.slice(1, -1);
    return string;
};
const $a8848f9916d99690$var$prefixId = (prefix, value)=>{
    if (value.startsWith(prefix)) return value;
    return prefix + value;
};
const $a8848f9916d99690$var$prefixReference = (prefix, value)=>{
    if (value.startsWith("#")) return "#" + $a8848f9916d99690$var$prefixId(prefix, value.slice(1));
    return null;
};
$a8848f9916d99690$var$prefixIds.fn = (_root, params, info)=>{
    const { delim: delim = "__" , prefixIds: prefixIds = true , prefixClassNames: prefixClassNames = true  } = params;
    return {
        element: {
            enter: (node11)=>{
                let prefix = "prefix" + delim;
                if (typeof params.prefix === "function") prefix = params.prefix(node11, info) + delim;
                else if (typeof params.prefix === "string") prefix = params.prefix + delim;
                else if (params.prefix === false) prefix = "";
                else if (info.path != null && info.path.length > 0) prefix = $a8848f9916d99690$var$escapeIdentifierName($a8848f9916d99690$var$getBasename(info.path)) + delim;
                if (node11.name === "style") {
                    if (node11.children.length === 0) return;
                    let cssText = "";
                    if (node11.children[0].type === "text" || node11.children[0].type === "cdata") cssText = node11.children[0].value;
                    let cssAst = null;
                    try {
                        cssAst = $a8848f9916d99690$var$csstree.parse(cssText, {
                            parseValue: true,
                            parseCustomProperty: false
                        });
                    } catch  {
                        return;
                    }
                    $a8848f9916d99690$var$csstree.walk(cssAst, (node)=>{
                        if (prefixIds && node.type === "IdSelector" || prefixClassNames && node.type === "ClassSelector") {
                            node.name = $a8848f9916d99690$var$prefixId(prefix, node.name);
                            return;
                        }
                        if (node.type === "Url" && node.value.value && node.value.value.length > 0) {
                            const prefixed = $a8848f9916d99690$var$prefixReference(prefix, $a8848f9916d99690$var$unquote(node.value.value));
                            if (prefixed != null) node.value.value = prefixed;
                        }
                    });
                    if (node11.children[0].type === "text" || node11.children[0].type === "cdata") node11.children[0].value = $a8848f9916d99690$var$csstree.generate(cssAst);
                    return;
                }
                if (prefixIds && node11.attributes.id != null && node11.attributes.id.length !== 0) node11.attributes.id = $a8848f9916d99690$var$prefixId(prefix, node11.attributes.id);
                if (prefixClassNames && node11.attributes.class != null && node11.attributes.class.length !== 0) node11.attributes.class = node11.attributes.class.split(/\s+/).map((name69)=>$a8848f9916d99690$var$prefixId(prefix, name69)
                ).join(" ");
                for (const name68 of [
                    "href",
                    "xlink:href"
                ])if (node11.attributes[name68] != null && node11.attributes[name68].length !== 0) {
                    const prefixed = $a8848f9916d99690$var$prefixReference(prefix, node11.attributes[name68]);
                    if (prefixed != null) node11.attributes[name68] = prefixed;
                }
                for (const name66 of $a8848f9916d99690$var$referencesProps)if (node11.attributes[name66] != null && node11.attributes[name66].length !== 0) node11.attributes[name66] = node11.attributes[name66].replace(/url\((.*?)\)/gi, (match, url)=>{
                    const prefixed = $a8848f9916d99690$var$prefixReference(prefix, url);
                    if (prefixed == null) return match;
                    return `url(${prefixed})`;
                });
                for (const name67 of [
                    "begin",
                    "end"
                ])if (node11.attributes[name67] != null && node11.attributes[name67].length !== 0) {
                    const parts = node11.attributes[name67].split(/\s*;\s+/).map((val)=>{
                        if (val.endsWith(".end") || val.endsWith(".start")) {
                            const [id, postfix] = val.split(".");
                            return `${$a8848f9916d99690$var$prefixId(prefix, id)}.${postfix}`;
                        }
                        return val;
                    });
                    node11.attributes[name67] = parts.join("; ");
                }
            }
        }
    };
};
var $a8848f9916d99690$var$removeAttributesBySelector = {
};
const { querySelectorAll: $a8848f9916d99690$var$querySelectorAll  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$removeAttributesBySelector.name = "removeAttributesBySelector";
$a8848f9916d99690$var$removeAttributesBySelector.type = "visitor";
$a8848f9916d99690$var$removeAttributesBySelector.active = false;
$a8848f9916d99690$var$removeAttributesBySelector.description = "removes attributes of elements that match a css selector";
$a8848f9916d99690$var$removeAttributesBySelector.fn = (root, params)=>{
    const selectors = Array.isArray(params.selectors) ? params.selectors : [
        params
    ];
    for (const { selector: selector , attributes: attributes  } of selectors){
        const nodes = $a8848f9916d99690$var$querySelectorAll(root, selector);
        for (const node of nodes)if (node.type === "element") {
            if (Array.isArray(attributes)) for (const name of attributes)delete node.attributes[name];
            else delete node.attributes[attributes];
        }
    }
    return {
    };
};
var $a8848f9916d99690$var$removeAttrs = {
};
$a8848f9916d99690$var$removeAttrs.name = "removeAttrs";
$a8848f9916d99690$var$removeAttrs.type = "visitor";
$a8848f9916d99690$var$removeAttrs.active = false;
$a8848f9916d99690$var$removeAttrs.description = "removes specified attributes";
const $a8848f9916d99690$var$DEFAULT_SEPARATOR = ":";
const $a8848f9916d99690$var$ENOATTRS = `Warning: The plugin "removeAttrs" requires the "attrs" parameter.\nIt should have a pattern to remove, otherwise the plugin is a noop.\nConfig example:\n\nplugins: [\n  {\n    name: "removeAttrs",\n    params: {\n      attrs: "(fill|stroke)"\n    }\n  }\n]\n`;
$a8848f9916d99690$var$removeAttrs.fn = (root, params)=>{
    if (typeof params.attrs == "undefined") {
        console.warn($a8848f9916d99690$var$ENOATTRS);
        return null;
    }
    const elemSeparator = typeof params.elemSeparator == "string" ? params.elemSeparator : $a8848f9916d99690$var$DEFAULT_SEPARATOR;
    const preserveCurrentColor = typeof params.preserveCurrentColor == "boolean" ? params.preserveCurrentColor : false;
    const attrs = Array.isArray(params.attrs) ? params.attrs : [
        params.attrs
    ];
    return {
        element: {
            enter: (node)=>{
                for (let pattern of attrs){
                    if (pattern.includes(elemSeparator) === false) pattern = [
                        ".*",
                        elemSeparator,
                        pattern,
                        elemSeparator,
                        ".*"
                    ].join("");
                    else if (pattern.split(elemSeparator).length < 3) pattern = [
                        pattern,
                        elemSeparator,
                        ".*"
                    ].join("");
                    const list = pattern.split(elemSeparator).map((value)=>{
                        if (value === "*") value = ".*";
                        return new RegExp([
                            "^",
                            value,
                            "$"
                        ].join(""), "i");
                    });
                    if (list[0].test(node.name)) for (const [name70, value3] of Object.entries(node.attributes)){
                        const isFillCurrentColor = preserveCurrentColor && name70 == "fill" && value3 == "currentColor";
                        const isStrokeCurrentColor = preserveCurrentColor && name70 == "stroke" && value3 == "currentColor";
                        if (!isFillCurrentColor && !isStrokeCurrentColor && list[1].test(name70) && list[2].test(value3)) delete node.attributes[name70];
                    }
                }
            }
        }
    };
};
var $a8848f9916d99690$var$removeDimensions = {
};
$a8848f9916d99690$var$removeDimensions.name = "removeDimensions";
$a8848f9916d99690$var$removeDimensions.type = "perItem";
$a8848f9916d99690$var$removeDimensions.active = false;
$a8848f9916d99690$var$removeDimensions.description = "removes width and height in presence of viewBox (opposite to removeViewBox, disable it first)";
$a8848f9916d99690$var$removeDimensions.fn = function(item) {
    if (item.type === "element" && item.name === "svg") {
        if (item.attributes.viewBox != null) {
            delete item.attributes.width;
            delete item.attributes.height;
        } else if (item.attributes.width != null && item.attributes.height != null && Number.isNaN(Number(item.attributes.width)) === false && Number.isNaN(Number(item.attributes.height)) === false) {
            const width = Number(item.attributes.width);
            const height = Number(item.attributes.height);
            item.attributes.viewBox = `0 0 ${width} ${height}`;
            delete item.attributes.width;
            delete item.attributes.height;
        }
    }
};
var $a8848f9916d99690$var$removeElementsByAttr = {
};
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$4  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$removeElementsByAttr.name = "removeElementsByAttr";
$a8848f9916d99690$var$removeElementsByAttr.type = "visitor";
$a8848f9916d99690$var$removeElementsByAttr.active = false;
$a8848f9916d99690$var$removeElementsByAttr.description = "removes arbitrary elements by ID or className (disabled by default)";
$a8848f9916d99690$var$removeElementsByAttr.fn = (root, params)=>{
    const ids = params.id == null ? [] : Array.isArray(params.id) ? params.id : [
        params.id
    ];
    const classes = params.class == null ? [] : Array.isArray(params.class) ? params.class : [
        params.class
    ];
    return {
        element: {
            enter: (node, parentNode)=>{
                if (node.attributes.id != null && ids.length !== 0) {
                    if (ids.includes(node.attributes.id)) $a8848f9916d99690$var$detachNodeFromParent$4(node, parentNode);
                }
                if (node.attributes.class && classes.length !== 0) {
                    const classList = node.attributes.class.split(" ");
                    for (const item of classes)if (classList.includes(item)) {
                        $a8848f9916d99690$var$detachNodeFromParent$4(node, parentNode);
                        break;
                    }
                }
            }
        }
    };
};
var $a8848f9916d99690$var$removeOffCanvasPaths = {
};
const { visitSkip: $a8848f9916d99690$var$visitSkip , detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$3  } = $a8848f9916d99690$var$xast;
const { parsePathData: $a8848f9916d99690$var$parsePathData  } = $a8848f9916d99690$var$path;
const { intersects: $a8848f9916d99690$var$intersects  } = $a8848f9916d99690$var$_path;
$a8848f9916d99690$var$removeOffCanvasPaths.type = "visitor";
$a8848f9916d99690$var$removeOffCanvasPaths.name = "removeOffCanvasPaths";
$a8848f9916d99690$var$removeOffCanvasPaths.active = false;
$a8848f9916d99690$var$removeOffCanvasPaths.description = "removes elements that are drawn outside of the viewbox (disabled by default)";
$a8848f9916d99690$var$removeOffCanvasPaths.fn = ()=>{
    let viewBoxData = null;
    return {
        element: {
            enter: (node, parentNode)=>{
                if (node.name === "svg" && parentNode.type === "root") {
                    let viewBox = "";
                    if (node.attributes.viewBox != null) viewBox = node.attributes.viewBox;
                    else if (node.attributes.height != null && node.attributes.width != null) viewBox = `0 0 ${node.attributes.width} ${node.attributes.height}`;
                    viewBox = viewBox.replace(/[,+]|px/g, " ").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
                    const m = /^(-?\d*\.?\d+) (-?\d*\.?\d+) (\d*\.?\d+) (\d*\.?\d+)$/.exec(viewBox);
                    if (m == null) return;
                    const left = Number.parseFloat(m[1]);
                    const top = Number.parseFloat(m[2]);
                    const width = Number.parseFloat(m[3]);
                    const height = Number.parseFloat(m[4]);
                    viewBoxData = {
                        left: left,
                        top: top,
                        right: left + width,
                        bottom: top + height,
                        width: width,
                        height: height
                    };
                }
                if (node.attributes.transform != null) return $a8848f9916d99690$var$visitSkip;
                if (node.name === "path" && node.attributes.d != null && viewBoxData != null) {
                    const pathData = $a8848f9916d99690$var$parsePathData(node.attributes.d);
                    let visible = false;
                    for (const pathDataItem of pathData)if (pathDataItem.command === "M") {
                        const [x, y] = pathDataItem.args;
                        if (x >= viewBoxData.left && x <= viewBoxData.right && y >= viewBoxData.top && y <= viewBoxData.bottom) visible = true;
                    }
                    if (visible) return;
                    if (pathData.length === 2) pathData.push({
                        command: "z",
                        args: []
                    });
                    const { left: left , top: top , width: width , height: height  } = viewBoxData;
                    const viewBoxPathData = [
                        {
                            command: "M",
                            args: [
                                left,
                                top
                            ]
                        },
                        {
                            command: "h",
                            args: [
                                width
                            ]
                        },
                        {
                            command: "v",
                            args: [
                                height
                            ]
                        },
                        {
                            command: "H",
                            args: [
                                left
                            ]
                        },
                        {
                            command: "z",
                            args: []
                        }
                    ];
                    if ($a8848f9916d99690$var$intersects(viewBoxPathData, pathData) === false) $a8848f9916d99690$var$detachNodeFromParent$3(node, parentNode);
                }
            }
        }
    };
};
var $a8848f9916d99690$var$removeRasterImages = {
};
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$2  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$removeRasterImages.name = "removeRasterImages";
$a8848f9916d99690$var$removeRasterImages.type = "visitor";
$a8848f9916d99690$var$removeRasterImages.active = false;
$a8848f9916d99690$var$removeRasterImages.description = "removes raster images (disabled by default)";
$a8848f9916d99690$var$removeRasterImages.fn = ()=>({
        element: {
            enter: (node, parentNode)=>{
                if (node.name === "image" && node.attributes["xlink:href"] != null && /(\.|image\/)(jpg|png|gif)/.test(node.attributes["xlink:href"])) $a8848f9916d99690$var$detachNodeFromParent$2(node, parentNode);
            }
        }
    })
;
var $a8848f9916d99690$var$removeScriptElement = {
};
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent$1  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$removeScriptElement.name = "removeScriptElement";
$a8848f9916d99690$var$removeScriptElement.type = "visitor";
$a8848f9916d99690$var$removeScriptElement.active = false;
$a8848f9916d99690$var$removeScriptElement.description = "removes <script> elements (disabled by default)";
$a8848f9916d99690$var$removeScriptElement.fn = ()=>({
        element: {
            enter: (node, parentNode)=>{
                if (node.name === "script") $a8848f9916d99690$var$detachNodeFromParent$1(node, parentNode);
            }
        }
    })
;
var $a8848f9916d99690$var$removeStyleElement = {
};
const { detachNodeFromParent: $a8848f9916d99690$var$detachNodeFromParent  } = $a8848f9916d99690$var$xast;
$a8848f9916d99690$var$removeStyleElement.name = "removeStyleElement";
$a8848f9916d99690$var$removeStyleElement.type = "visitor";
$a8848f9916d99690$var$removeStyleElement.active = false;
$a8848f9916d99690$var$removeStyleElement.description = "removes <style> element (disabled by default)";
$a8848f9916d99690$var$removeStyleElement.fn = ()=>({
        element: {
            enter: (node, parentNode)=>{
                if (node.name === "style") $a8848f9916d99690$var$detachNodeFromParent(node, parentNode);
            }
        }
    })
;
var $a8848f9916d99690$var$removeXMLNS = {
};
$a8848f9916d99690$var$removeXMLNS.name = "removeXMLNS";
$a8848f9916d99690$var$removeXMLNS.type = "perItem";
$a8848f9916d99690$var$removeXMLNS.active = false;
$a8848f9916d99690$var$removeXMLNS.description = "removes xmlns attribute (for inline svg, disabled by default)";
$a8848f9916d99690$var$removeXMLNS.fn = function(item) {
    if (item.type === "element" && item.name === "svg") {
        delete item.attributes.xmlns;
        delete item.attributes["xmlns:xlink"];
    }
};
var $a8848f9916d99690$var$reusePaths = {
};
const $a8848f9916d99690$var$JSAPI$2 = $a8848f9916d99690$var$jsAPI;
$a8848f9916d99690$var$reusePaths.type = "visitor";
$a8848f9916d99690$var$reusePaths.name = "reusePaths";
$a8848f9916d99690$var$reusePaths.active = false;
$a8848f9916d99690$var$reusePaths.description = "Finds <path> elements with the same d, fill, and stroke, and converts them to <use> elements referencing a single <path> def.";
$a8848f9916d99690$var$reusePaths.fn = ()=>{
    const paths = new Map;
    return {
        element: {
            enter: (node)=>{
                if (node.name === "path" && node.attributes.d != null) {
                    const d = node.attributes.d;
                    const fill = node.attributes.fill || "";
                    const stroke = node.attributes.stroke || "";
                    const key = d + ";s:" + stroke + ";f:" + fill;
                    let list = paths.get(key);
                    if (list == null) {
                        list = [];
                        paths.set(key, list);
                    }
                    list.push(node);
                }
            },
            exit: (node, parentNode)=>{
                if (node.name === "svg" && parentNode.type === "root") {
                    const rawDefs = {
                        type: "element",
                        name: "defs",
                        attributes: {
                        },
                        children: []
                    };
                    const defsTag = new $a8848f9916d99690$var$JSAPI$2(rawDefs, node);
                    let index = 0;
                    for (const list of paths.values())if (list.length > 1) {
                        const rawPath = {
                            type: "element",
                            name: "path",
                            attributes: {
                                ...list[0].attributes
                            },
                            children: []
                        };
                        delete rawPath.attributes.transform;
                        let id;
                        if (rawPath.attributes.id == null) {
                            id = "reuse-" + index;
                            index += 1;
                            rawPath.attributes.id = id;
                        } else {
                            id = rawPath.attributes.id;
                            delete list[0].attributes.id;
                        }
                        const reusablePath = new $a8848f9916d99690$var$JSAPI$2(rawPath, defsTag);
                        defsTag.children.push(reusablePath);
                        for (const pathNode of list){
                            pathNode.name = "use";
                            pathNode.attributes["xlink:href"] = "#" + id;
                            delete pathNode.attributes.d;
                            delete pathNode.attributes.stroke;
                            delete pathNode.attributes.fill;
                        }
                    }
                    if (defsTag.children.length !== 0) {
                        if (node.attributes["xmlns:xlink"] == null) node.attributes["xmlns:xlink"] = "http://www.w3.org/1999/xlink";
                        node.children.unshift(defsTag);
                    }
                }
            }
        }
    };
};
var $a8848f9916d99690$var$sortAttrs = {
};
$a8848f9916d99690$var$sortAttrs.type = "visitor";
$a8848f9916d99690$var$sortAttrs.name = "sortAttrs";
$a8848f9916d99690$var$sortAttrs.active = false;
$a8848f9916d99690$var$sortAttrs.description = "Sort element attributes for better compression";
$a8848f9916d99690$var$sortAttrs.fn = (_root, params)=>{
    const { order: order = [
        "id",
        "width",
        "height",
        "x",
        "x1",
        "x2",
        "y",
        "y1",
        "y2",
        "cx",
        "cy",
        "r",
        "fill",
        "stroke",
        "marker",
        "d",
        "points"
    ] , xmlnsOrder: xmlnsOrder = "front"  } = params;
    const getNsPriority = (name71)=>{
        if (xmlnsOrder === "front") {
            if (name71 === "xmlns") return 3;
            if (name71.startsWith("xmlns:")) return 2;
        }
        if (name71.includes(":")) return 1;
        return 0;
    };
    const compareAttrs = ([aName], [bName])=>{
        const aPriority = getNsPriority(aName);
        const bPriority = getNsPriority(bName);
        const priorityNs = bPriority - aPriority;
        if (priorityNs !== 0) return priorityNs;
        const [aPart] = aName.split("-");
        const [bPart] = bName.split("-");
        if (aPart !== bPart) {
            const aInOrderFlag = order.includes(aPart) ? 1 : 0;
            const bInOrderFlag = order.includes(bPart) ? 1 : 0;
            if (aInOrderFlag === 1 && bInOrderFlag === 1) return order.indexOf(aPart) - order.indexOf(bPart);
            const priorityOrder = bInOrderFlag - aInOrderFlag;
            if (priorityOrder !== 0) return priorityOrder;
        }
        return aName < bName ? -1 : 1;
    };
    return {
        element: {
            enter: (node)=>{
                const attrs = Object.entries(node.attributes);
                attrs.sort(compareAttrs);
                const sortedAttributes = {
                };
                for (const [name, value] of attrs)sortedAttributes[name] = value;
                node.attributes = sortedAttributes;
            }
        }
    };
};
(function(exports) {
    exports["preset-default"] = $a8848f9916d99690$var$presetDefault_1;
    exports.addAttributesToSVGElement = $a8848f9916d99690$var$addAttributesToSVGElement;
    exports.addClassesToSVGElement = $a8848f9916d99690$var$addClassesToSVGElement;
    exports.cleanupAttrs = $a8848f9916d99690$var$cleanupAttrs$1;
    exports.cleanupEnableBackground = $a8848f9916d99690$var$cleanupEnableBackground$1;
    exports.cleanupIDs = $a8848f9916d99690$var$cleanupIDs$1;
    exports.cleanupListOfValues = $a8848f9916d99690$var$cleanupListOfValues;
    exports.cleanupNumericValues = $a8848f9916d99690$var$cleanupNumericValues$1;
    exports.collapseGroups = $a8848f9916d99690$var$collapseGroups$1;
    exports.convertColors = $a8848f9916d99690$var$convertColors$1;
    exports.convertEllipseToCircle = $a8848f9916d99690$var$convertEllipseToCircle$1;
    exports.convertPathData = $a8848f9916d99690$var$convertPathData$1;
    exports.convertShapeToPath = $a8848f9916d99690$var$convertShapeToPath$1;
    exports.convertStyleToAttrs = $a8848f9916d99690$var$convertStyleToAttrs;
    exports.convertTransform = $a8848f9916d99690$var$convertTransform$2;
    exports.mergeStyles = $a8848f9916d99690$var$mergeStyles$1;
    exports.inlineStyles = $a8848f9916d99690$var$inlineStyles$1;
    exports.mergePaths = $a8848f9916d99690$var$mergePaths$1;
    exports.minifyStyles = $a8848f9916d99690$var$minifyStyles$1;
    exports.moveElemsAttrsToGroup = $a8848f9916d99690$var$moveElemsAttrsToGroup$1;
    exports.moveGroupAttrsToElems = $a8848f9916d99690$var$moveGroupAttrsToElems$1;
    exports.prefixIds = $a8848f9916d99690$var$prefixIds;
    exports.removeAttributesBySelector = $a8848f9916d99690$var$removeAttributesBySelector;
    exports.removeAttrs = $a8848f9916d99690$var$removeAttrs;
    exports.removeComments = $a8848f9916d99690$var$removeComments$1;
    exports.removeDesc = $a8848f9916d99690$var$removeDesc$1;
    exports.removeDimensions = $a8848f9916d99690$var$removeDimensions;
    exports.removeDoctype = $a8848f9916d99690$var$removeDoctype$1;
    exports.removeEditorsNSData = $a8848f9916d99690$var$removeEditorsNSData$1;
    exports.removeElementsByAttr = $a8848f9916d99690$var$removeElementsByAttr;
    exports.removeEmptyAttrs = $a8848f9916d99690$var$removeEmptyAttrs$1;
    exports.removeEmptyContainers = $a8848f9916d99690$var$removeEmptyContainers$1;
    exports.removeEmptyText = $a8848f9916d99690$var$removeEmptyText$1;
    exports.removeHiddenElems = $a8848f9916d99690$var$removeHiddenElems$1;
    exports.removeMetadata = $a8848f9916d99690$var$removeMetadata$1;
    exports.removeNonInheritableGroupAttrs = $a8848f9916d99690$var$removeNonInheritableGroupAttrs$1;
    exports.removeOffCanvasPaths = $a8848f9916d99690$var$removeOffCanvasPaths;
    exports.removeRasterImages = $a8848f9916d99690$var$removeRasterImages;
    exports.removeScriptElement = $a8848f9916d99690$var$removeScriptElement;
    exports.removeStyleElement = $a8848f9916d99690$var$removeStyleElement;
    exports.removeTitle = $a8848f9916d99690$var$removeTitle$1;
    exports.removeUnknownsAndDefaults = $a8848f9916d99690$var$removeUnknownsAndDefaults$1;
    exports.removeUnusedNS = $a8848f9916d99690$var$removeUnusedNS$1;
    exports.removeUselessDefs = $a8848f9916d99690$var$removeUselessDefs$1;
    exports.removeUselessStrokeAndFill = $a8848f9916d99690$var$removeUselessStrokeAndFill$1;
    exports.removeViewBox = $a8848f9916d99690$var$removeViewBox$1;
    exports.removeXMLNS = $a8848f9916d99690$var$removeXMLNS;
    exports.removeXMLProcInst = $a8848f9916d99690$var$removeXMLProcInst$1;
    exports.reusePaths = $a8848f9916d99690$var$reusePaths;
    exports.sortAttrs = $a8848f9916d99690$var$sortAttrs;
    exports.sortDefsChildren = $a8848f9916d99690$var$sortDefsChildren$1;
})($a8848f9916d99690$var$plugins$1);
const $a8848f9916d99690$var$pluginsMap = $a8848f9916d99690$var$plugins$1;
const $a8848f9916d99690$var$pluginsOrder = [
    "removeDoctype",
    "removeXMLProcInst",
    "removeComments",
    "removeMetadata",
    "removeXMLNS",
    "removeEditorsNSData",
    "cleanupAttrs",
    "mergeStyles",
    "inlineStyles",
    "minifyStyles",
    "convertStyleToAttrs",
    "cleanupIDs",
    "prefixIds",
    "removeRasterImages",
    "removeUselessDefs",
    "cleanupNumericValues",
    "cleanupListOfValues",
    "convertColors",
    "removeUnknownsAndDefaults",
    "removeNonInheritableGroupAttrs",
    "removeUselessStrokeAndFill",
    "removeViewBox",
    "cleanupEnableBackground",
    "removeHiddenElems",
    "removeEmptyText",
    "convertShapeToPath",
    "convertEllipseToCircle",
    "moveElemsAttrsToGroup",
    "moveGroupAttrsToElems",
    "collapseGroups",
    "convertPathData",
    "convertTransform",
    "removeEmptyAttrs",
    "removeEmptyContainers",
    "mergePaths",
    "removeUnusedNS",
    "sortAttrs",
    "sortDefsChildren",
    "removeTitle",
    "removeDesc",
    "removeDimensions",
    "removeAttrs",
    "removeAttributesBySelector",
    "removeElementsByAttr",
    "addClassesToSVGElement",
    "removeStyleElement",
    "removeScriptElement",
    "addAttributesToSVGElement",
    "removeOffCanvasPaths",
    "reusePaths"
];
const $a8848f9916d99690$var$defaultPlugins$1 = $a8848f9916d99690$var$pluginsOrder.filter((name)=>$a8848f9916d99690$var$pluginsMap[name].active
);
$a8848f9916d99690$var$config$1.defaultPlugins = $a8848f9916d99690$var$defaultPlugins$1;
const $a8848f9916d99690$var$extendDefaultPlugins$1 = (plugins)=>{
    console.warn("\n\"extendDefaultPlugins\" utility is deprecated.\nUse \"preset-default\" plugin with overrides instead.\nFor example:\n" + `{\n` + `  name: 'preset-default',\n` + `  params: {\n` + `    overrides: {\n` + `      // customize plugin options\n` + `      convertShapeToPath: {\n` + `        convertArcs: true\n` + `      },\n` + `      // disable plugins\n` + `      convertPathData: false\n` + `    }\n` + `  }\n` + `}\n`);
    const extendedPlugins = $a8848f9916d99690$var$pluginsOrder.map((name72)=>({
            name: name72,
            active: $a8848f9916d99690$var$pluginsMap[name72].active
        })
    );
    for (const plugin of plugins){
        const resolvedPlugin = $a8848f9916d99690$var$resolvePluginConfig$1(plugin);
        const index = $a8848f9916d99690$var$pluginsOrder.indexOf(resolvedPlugin.name);
        if (index === -1) extendedPlugins.push(plugin);
        else extendedPlugins[index] = plugin;
    }
    return extendedPlugins;
};
$a8848f9916d99690$var$config$1.extendDefaultPlugins = $a8848f9916d99690$var$extendDefaultPlugins$1;
const $a8848f9916d99690$var$resolvePluginConfig$1 = (plugin)=>{
    let configParams = {
    };
    if (typeof plugin === "string") {
        const pluginConfig = $a8848f9916d99690$var$pluginsMap[plugin];
        if (pluginConfig == null) throw Error(`Unknown builtin plugin "${plugin}" specified.`);
        return {
            ...pluginConfig,
            name: plugin,
            active: true,
            params: {
                ...pluginConfig.params,
                ...configParams
            }
        };
    }
    if (typeof plugin === "object" && plugin != null) {
        if (plugin.name == null) throw Error(`Plugin name should be specified`);
        if (plugin.fn) return {
            active: true,
            ...plugin,
            params: {
                ...configParams,
                ...plugin.params
            }
        };
        else {
            const pluginConfig = $a8848f9916d99690$var$pluginsMap[plugin.name];
            if (pluginConfig == null) throw Error(`Unknown builtin plugin "${plugin.name}" specified.`);
            return {
                ...pluginConfig,
                active: true,
                ...plugin,
                params: {
                    ...pluginConfig.params,
                    ...configParams,
                    ...plugin.params
                }
            };
        }
    }
    return null;
};
$a8848f9916d99690$var$config$1.resolvePluginConfig = $a8848f9916d99690$var$resolvePluginConfig$1;
var $a8848f9916d99690$var$parser = {
};
var $a8848f9916d99690$var$sax = {
};
(function(exports) {
    (function(sax) {
        sax.parser = function(strict, opt) {
            return new SAXParser(strict, opt);
        };
        sax.SAXParser = SAXParser;
        sax.MAX_BUFFER_LENGTH = 65536;
        var buffers = [
            "comment",
            "sgmlDecl",
            "textNode",
            "tagName",
            "doctype",
            "procInstName",
            "procInstBody",
            "entity",
            "attribName",
            "attribValue",
            "cdata",
            "script"
        ];
        sax.EVENTS = [
            "text",
            "processinginstruction",
            "sgmldeclaration",
            "doctype",
            "comment",
            "opentagstart",
            "attribute",
            "opentag",
            "closetag",
            "opencdata",
            "cdata",
            "closecdata",
            "error",
            "end",
            "ready",
            "script",
            "opennamespace",
            "closenamespace"
        ];
        function SAXParser(strict, opt) {
            if (!(this instanceof SAXParser)) return new SAXParser(strict, opt);
            var parser = this;
            clearBuffers(parser);
            parser.q = parser.c = "";
            parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
            parser.opt = opt || {
            };
            parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
            parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase";
            parser.tags = [];
            parser.closed = parser.closedRoot = parser.sawRoot = false;
            parser.tag = parser.error = null;
            parser.strict = !!strict;
            parser.noscript = !!(strict || parser.opt.noscript);
            parser.state = S.BEGIN;
            parser.strictEntities = parser.opt.strictEntities;
            parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
            parser.attribList = [];
            if (parser.opt.xmlns) parser.ns = Object.create(rootNS);
            parser.trackPosition = parser.opt.position !== false;
            if (parser.trackPosition) parser.position = parser.line = parser.column = 0;
            emit(parser, "onready");
        }
        if (!Object.create) Object.create = function(o) {
            function F() {
            }
            F.prototype = o;
            var newf = new F;
            return newf;
        };
        if (!Object.keys) Object.keys = function(o) {
            var a = [];
            for(var i in o)if (o.hasOwnProperty(i)) a.push(i);
            return a;
        };
        function checkBufferLength(parser) {
            var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
            var maxActual = 0;
            for(var i = 0, l = buffers.length; i < l; i++){
                var len = parser[buffers[i]].length;
                if (len > maxAllowed) switch(buffers[i]){
                    case "textNode":
                        closeText(parser);
                        break;
                    case "cdata":
                        emitNode(parser, "oncdata", parser.cdata);
                        parser.cdata = "";
                        break;
                    case "script":
                        emitNode(parser, "onscript", parser.script);
                        parser.script = "";
                        break;
                    default:
                        error1(parser, "Max buffer length exceeded: " + buffers[i]);
                }
                maxActual = Math.max(maxActual, len);
            }
            var m = sax.MAX_BUFFER_LENGTH - maxActual;
            parser.bufferCheckPosition = m + parser.position;
        }
        function clearBuffers(parser) {
            for(var i = 0, l = buffers.length; i < l; i++)parser[buffers[i]] = "";
        }
        function flushBuffers(parser) {
            closeText(parser);
            if (parser.cdata !== "") {
                emitNode(parser, "oncdata", parser.cdata);
                parser.cdata = "";
            }
            if (parser.script !== "") {
                emitNode(parser, "onscript", parser.script);
                parser.script = "";
            }
        }
        SAXParser.prototype = {
            end: function() {
                end(this);
            },
            write: write,
            resume: function() {
                this.error = null;
                return this;
            },
            close: function() {
                return this.write(null);
            },
            flush: function() {
                flushBuffers(this);
            }
        };
        var CDATA = "[CDATA[";
        var DOCTYPE = "DOCTYPE";
        var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
        var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
        var rootNS = {
            xml: XML_NAMESPACE,
            xmlns: XMLNS_NAMESPACE
        };
        var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
        var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
        var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
        var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
        function isWhitespace(c) {
            return c === " " || c === "\n" || c === "\r" || c === "\t";
        }
        function isQuote(c) {
            return c === '"' || c === "'";
        }
        function isAttribEnd(c) {
            return c === ">" || isWhitespace(c);
        }
        function isMatch(regex, c) {
            return regex.test(c);
        }
        function notMatch(regex, c) {
            return !isMatch(regex, c);
        }
        var S = 0;
        sax.STATE = {
            BEGIN: S++,
            BEGIN_WHITESPACE: S++,
            TEXT: S++,
            TEXT_ENTITY: S++,
            OPEN_WAKA: S++,
            SGML_DECL: S++,
            SGML_DECL_QUOTED: S++,
            DOCTYPE: S++,
            DOCTYPE_QUOTED: S++,
            DOCTYPE_DTD: S++,
            DOCTYPE_DTD_QUOTED: S++,
            COMMENT_STARTING: S++,
            COMMENT: S++,
            COMMENT_ENDING: S++,
            COMMENT_ENDED: S++,
            CDATA: S++,
            CDATA_ENDING: S++,
            CDATA_ENDING_2: S++,
            PROC_INST: S++,
            PROC_INST_BODY: S++,
            PROC_INST_ENDING: S++,
            OPEN_TAG: S++,
            OPEN_TAG_SLASH: S++,
            ATTRIB: S++,
            ATTRIB_NAME: S++,
            ATTRIB_NAME_SAW_WHITE: S++,
            ATTRIB_VALUE: S++,
            ATTRIB_VALUE_QUOTED: S++,
            ATTRIB_VALUE_CLOSED: S++,
            ATTRIB_VALUE_UNQUOTED: S++,
            ATTRIB_VALUE_ENTITY_Q: S++,
            ATTRIB_VALUE_ENTITY_U: S++,
            CLOSE_TAG: S++,
            CLOSE_TAG_SAW_WHITE: S++,
            SCRIPT: S++,
            SCRIPT_ENDING: S++
        };
        sax.XML_ENTITIES = {
            amp: "&",
            gt: ">",
            lt: "<",
            quot: '"',
            apos: "'"
        };
        sax.ENTITIES = {
            amp: "&",
            gt: ">",
            lt: "<",
            quot: '"',
            apos: "'",
            AElig: 198,
            Aacute: 193,
            Acirc: 194,
            Agrave: 192,
            Aring: 197,
            Atilde: 195,
            Auml: 196,
            Ccedil: 199,
            ETH: 208,
            Eacute: 201,
            Ecirc: 202,
            Egrave: 200,
            Euml: 203,
            Iacute: 205,
            Icirc: 206,
            Igrave: 204,
            Iuml: 207,
            Ntilde: 209,
            Oacute: 211,
            Ocirc: 212,
            Ograve: 210,
            Oslash: 216,
            Otilde: 213,
            Ouml: 214,
            THORN: 222,
            Uacute: 218,
            Ucirc: 219,
            Ugrave: 217,
            Uuml: 220,
            Yacute: 221,
            aacute: 225,
            acirc: 226,
            aelig: 230,
            agrave: 224,
            aring: 229,
            atilde: 227,
            auml: 228,
            ccedil: 231,
            eacute: 233,
            ecirc: 234,
            egrave: 232,
            eth: 240,
            euml: 235,
            iacute: 237,
            icirc: 238,
            igrave: 236,
            iuml: 239,
            ntilde: 241,
            oacute: 243,
            ocirc: 244,
            ograve: 242,
            oslash: 248,
            otilde: 245,
            ouml: 246,
            szlig: 223,
            thorn: 254,
            uacute: 250,
            ucirc: 251,
            ugrave: 249,
            uuml: 252,
            yacute: 253,
            yuml: 255,
            copy: 169,
            reg: 174,
            nbsp: 160,
            iexcl: 161,
            cent: 162,
            pound: 163,
            curren: 164,
            yen: 165,
            brvbar: 166,
            sect: 167,
            uml: 168,
            ordf: 170,
            laquo: 171,
            not: 172,
            shy: 173,
            macr: 175,
            deg: 176,
            plusmn: 177,
            sup1: 185,
            sup2: 178,
            sup3: 179,
            acute: 180,
            micro: 181,
            para: 182,
            middot: 183,
            cedil: 184,
            ordm: 186,
            raquo: 187,
            frac14: 188,
            frac12: 189,
            frac34: 190,
            iquest: 191,
            times: 215,
            divide: 247,
            OElig: 338,
            oelig: 339,
            Scaron: 352,
            scaron: 353,
            Yuml: 376,
            fnof: 402,
            circ: 710,
            tilde: 732,
            Alpha: 913,
            Beta: 914,
            Gamma: 915,
            Delta: 916,
            Epsilon: 917,
            Zeta: 918,
            Eta: 919,
            Theta: 920,
            Iota: 921,
            Kappa: 922,
            Lambda: 923,
            Mu: 924,
            Nu: 925,
            Xi: 926,
            Omicron: 927,
            Pi: 928,
            Rho: 929,
            Sigma: 931,
            Tau: 932,
            Upsilon: 933,
            Phi: 934,
            Chi: 935,
            Psi: 936,
            Omega: 937,
            alpha: 945,
            beta: 946,
            gamma: 947,
            delta: 948,
            epsilon: 949,
            zeta: 950,
            eta: 951,
            theta: 952,
            iota: 953,
            kappa: 954,
            lambda: 955,
            mu: 956,
            nu: 957,
            xi: 958,
            omicron: 959,
            pi: 960,
            rho: 961,
            sigmaf: 962,
            sigma: 963,
            tau: 964,
            upsilon: 965,
            phi: 966,
            chi: 967,
            psi: 968,
            omega: 969,
            thetasym: 977,
            upsih: 978,
            piv: 982,
            ensp: 8194,
            emsp: 8195,
            thinsp: 8201,
            zwnj: 8204,
            zwj: 8205,
            lrm: 8206,
            rlm: 8207,
            ndash: 8211,
            mdash: 8212,
            lsquo: 8216,
            rsquo: 8217,
            sbquo: 8218,
            ldquo: 8220,
            rdquo: 8221,
            bdquo: 8222,
            dagger: 8224,
            Dagger: 8225,
            bull: 8226,
            hellip: 8230,
            permil: 8240,
            prime: 8242,
            Prime: 8243,
            lsaquo: 8249,
            rsaquo: 8250,
            oline: 8254,
            frasl: 8260,
            euro: 8364,
            image: 8465,
            weierp: 8472,
            real: 8476,
            trade: 8482,
            alefsym: 8501,
            larr: 8592,
            uarr: 8593,
            rarr: 8594,
            darr: 8595,
            harr: 8596,
            crarr: 8629,
            lArr: 8656,
            uArr: 8657,
            rArr: 8658,
            dArr: 8659,
            hArr: 8660,
            forall: 8704,
            part: 8706,
            exist: 8707,
            empty: 8709,
            nabla: 8711,
            isin: 8712,
            notin: 8713,
            ni: 8715,
            prod: 8719,
            sum: 8721,
            minus: 8722,
            lowast: 8727,
            radic: 8730,
            prop: 8733,
            infin: 8734,
            ang: 8736,
            and: 8743,
            or: 8744,
            cap: 8745,
            cup: 8746,
            int: 8747,
            there4: 8756,
            sim: 8764,
            cong: 8773,
            asymp: 8776,
            ne: 8800,
            equiv: 8801,
            le: 8804,
            ge: 8805,
            sub: 8834,
            sup: 8835,
            nsub: 8836,
            sube: 8838,
            supe: 8839,
            oplus: 8853,
            otimes: 8855,
            perp: 8869,
            sdot: 8901,
            lceil: 8968,
            rceil: 8969,
            lfloor: 8970,
            rfloor: 8971,
            lang: 9001,
            rang: 9002,
            loz: 9674,
            spades: 9824,
            clubs: 9827,
            hearts: 9829,
            diams: 9830
        };
        Object.keys(sax.ENTITIES).forEach(function(key) {
            var e = sax.ENTITIES[key];
            var s = typeof e === "number" ? String.fromCharCode(e) : e;
            sax.ENTITIES[key] = s;
        });
        for(var s4 in sax.STATE)sax.STATE[sax.STATE[s4]] = s4;
        S = sax.STATE;
        function emit(parser, event, data) {
            parser[event] && parser[event](data);
        }
        function emitNode(parser, nodeType, data) {
            if (parser.textNode) closeText(parser);
            emit(parser, nodeType, data);
        }
        function closeText(parser) {
            parser.textNode = textopts(parser.opt, parser.textNode);
            if (parser.textNode) emit(parser, "ontext", parser.textNode);
            parser.textNode = "";
        }
        function textopts(opt, text) {
            if (opt.trim) text = text.trim();
            if (opt.normalize) text = text.replace(/\s+/g, " ");
            return text;
        }
        function error1(parser, reason) {
            closeText(parser);
            const message = reason + "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
            const error = new Error(message);
            error.reason = reason;
            error.line = parser.line;
            error.column = parser.column;
            parser.error = error;
            emit(parser, "onerror", error);
            return parser;
        }
        function end(parser) {
            if (parser.sawRoot && !parser.closedRoot) strictFail(parser, "Unclosed root tag");
            if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) error1(parser, "Unexpected end");
            closeText(parser);
            parser.c = "";
            parser.closed = true;
            emit(parser, "onend");
            SAXParser.call(parser, parser.strict, parser.opt);
            return parser;
        }
        function strictFail(parser, message) {
            if (typeof parser !== "object" || !(parser instanceof SAXParser)) throw new Error("bad call to strictFail");
            if (parser.strict) error1(parser, message);
        }
        function newTag(parser) {
            if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();
            var parent = parser.tags[parser.tags.length - 1] || parser;
            var tag = parser.tag = {
                name: parser.tagName,
                attributes: {
                }
            };
            if (parser.opt.xmlns) tag.ns = parent.ns;
            parser.attribList.length = 0;
            emitNode(parser, "onopentagstart", tag);
        }
        function qname(name73, attribute) {
            var i = name73.indexOf(":");
            var qualName = i < 0 ? [
                "",
                name73
            ] : name73.split(":");
            var prefix = qualName[0];
            var local = qualName[1];
            if (attribute && name73 === "xmlns") {
                prefix = "xmlns";
                local = "";
            }
            return {
                prefix: prefix,
                local: local
            };
        }
        function attrib(parser) {
            if (!parser.strict) parser.attribName = parser.attribName[parser.looseCase]();
            if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
                parser.attribName = parser.attribValue = "";
                return;
            }
            if (parser.opt.xmlns) {
                var qn = qname(parser.attribName, true);
                var prefix = qn.prefix;
                var local = qn.local;
                if (prefix === "xmlns") {
                    if (local === "xml" && parser.attribValue !== XML_NAMESPACE) strictFail(parser, "xml: prefix must be bound to " + XML_NAMESPACE + "\n" + "Actual: " + parser.attribValue);
                    else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) strictFail(parser, "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\n" + "Actual: " + parser.attribValue);
                    else {
                        var tag = parser.tag;
                        var parent = parser.tags[parser.tags.length - 1] || parser;
                        if (tag.ns === parent.ns) tag.ns = Object.create(parent.ns);
                        tag.ns[local] = parser.attribValue;
                    }
                }
                parser.attribList.push([
                    parser.attribName,
                    parser.attribValue
                ]);
            } else {
                parser.tag.attributes[parser.attribName] = parser.attribValue;
                emitNode(parser, "onattribute", {
                    name: parser.attribName,
                    value: parser.attribValue
                });
            }
            parser.attribName = parser.attribValue = "";
        }
        function openTag(parser, selfClosing) {
            if (parser.opt.xmlns) {
                var tag = parser.tag;
                var qn = qname(parser.tagName);
                tag.prefix = qn.prefix;
                tag.local = qn.local;
                tag.uri = tag.ns[qn.prefix] || "";
                if (tag.prefix && !tag.uri) {
                    strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(parser.tagName));
                    tag.uri = qn.prefix;
                }
                var parent = parser.tags[parser.tags.length - 1] || parser;
                if (tag.ns && parent.ns !== tag.ns) Object.keys(tag.ns).forEach(function(p) {
                    emitNode(parser, "onopennamespace", {
                        prefix: p,
                        uri: tag.ns[p]
                    });
                });
                for(var i = 0, l = parser.attribList.length; i < l; i++){
                    var nv = parser.attribList[i];
                    var name74 = nv[0];
                    var value = nv[1];
                    var qualName = qname(name74, true);
                    var prefix = qualName.prefix;
                    var local = qualName.local;
                    var uri = prefix === "" ? "" : tag.ns[prefix] || "";
                    var a = {
                        name: name74,
                        value: value,
                        prefix: prefix,
                        local: local,
                        uri: uri
                    };
                    if (prefix && prefix !== "xmlns" && !uri) {
                        strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(prefix));
                        a.uri = prefix;
                    }
                    parser.tag.attributes[name74] = a;
                    emitNode(parser, "onattribute", a);
                }
                parser.attribList.length = 0;
            }
            parser.tag.isSelfClosing = !!selfClosing;
            parser.sawRoot = true;
            parser.tags.push(parser.tag);
            emitNode(parser, "onopentag", parser.tag);
            if (!selfClosing) {
                if (!parser.noscript && parser.tagName.toLowerCase() === "script") parser.state = S.SCRIPT;
                else parser.state = S.TEXT;
                parser.tag = null;
                parser.tagName = "";
            }
            parser.attribName = parser.attribValue = "";
            parser.attribList.length = 0;
        }
        function closeTag(parser) {
            if (!parser.tagName) {
                strictFail(parser, "Weird empty close tag.");
                parser.textNode += "</>";
                parser.state = S.TEXT;
                return;
            }
            if (parser.script) {
                if (parser.tagName !== "script") {
                    parser.script += "</" + parser.tagName + ">";
                    parser.tagName = "";
                    parser.state = S.SCRIPT;
                    return;
                }
                emitNode(parser, "onscript", parser.script);
                parser.script = "";
            }
            var t = parser.tags.length;
            var tagName = parser.tagName;
            if (!parser.strict) tagName = tagName[parser.looseCase]();
            var closeTo = tagName;
            while(t--){
                var close = parser.tags[t];
                if (close.name !== closeTo) strictFail(parser, "Unexpected close tag");
                else break;
            }
            if (t < 0) {
                strictFail(parser, "Unmatched closing tag: " + parser.tagName);
                parser.textNode += "</" + parser.tagName + ">";
                parser.state = S.TEXT;
                return;
            }
            parser.tagName = tagName;
            var s = parser.tags.length;
            while((s--) > t){
                var tag = parser.tag = parser.tags.pop();
                parser.tagName = parser.tag.name;
                emitNode(parser, "onclosetag", parser.tagName);
                var x = {
                };
                for(var i in tag.ns)x[i] = tag.ns[i];
                var parent = parser.tags[parser.tags.length - 1] || parser;
                if (parser.opt.xmlns && tag.ns !== parent.ns) Object.keys(tag.ns).forEach(function(p) {
                    var n = tag.ns[p];
                    emitNode(parser, "onclosenamespace", {
                        prefix: p,
                        uri: n
                    });
                });
            }
            if (t === 0) parser.closedRoot = true;
            parser.tagName = parser.attribValue = parser.attribName = "";
            parser.attribList.length = 0;
            parser.state = S.TEXT;
        }
        function parseEntity(parser) {
            var entity = parser.entity;
            var entityLC = entity.toLowerCase();
            var num;
            var numStr = "";
            if (parser.ENTITIES[entity]) return parser.ENTITIES[entity];
            if (parser.ENTITIES[entityLC]) return parser.ENTITIES[entityLC];
            entity = entityLC;
            if (entity.charAt(0) === "#") {
                if (entity.charAt(1) === "x") {
                    entity = entity.slice(2);
                    num = parseInt(entity, 16);
                    numStr = num.toString(16);
                } else {
                    entity = entity.slice(1);
                    num = parseInt(entity, 10);
                    numStr = num.toString(10);
                }
            }
            entity = entity.replace(/^0+/, "");
            if (isNaN(num) || numStr.toLowerCase() !== entity) {
                strictFail(parser, "Invalid character entity");
                return "&" + parser.entity + ";";
            }
            return String.fromCodePoint(num);
        }
        function beginWhiteSpace(parser, c) {
            if (c === "<") {
                parser.state = S.OPEN_WAKA;
                parser.startTagPosition = parser.position;
            } else if (!isWhitespace(c)) {
                strictFail(parser, "Non-whitespace before first tag.");
                parser.textNode = c;
                parser.state = S.TEXT;
            }
        }
        function charAt(chunk, i) {
            var result = "";
            if (i < chunk.length) result = chunk.charAt(i);
            return result;
        }
        function write(chunk) {
            var parser = this;
            if (this.error) throw this.error;
            if (parser.closed) return error1(parser, "Cannot write after close. Assign an onready handler.");
            if (chunk === null) return end(parser);
            if (typeof chunk === "object") chunk = chunk.toString();
            var i = 0;
            var c = "";
            while(true){
                c = charAt(chunk, i++);
                parser.c = c;
                if (!c) break;
                if (parser.trackPosition) {
                    parser.position++;
                    if (c === "\n") {
                        parser.line++;
                        parser.column = 0;
                    } else parser.column++;
                }
                switch(parser.state){
                    case S.BEGIN:
                        parser.state = S.BEGIN_WHITESPACE;
                        if (c === "\ufeff") continue;
                        beginWhiteSpace(parser, c);
                        continue;
                    case S.BEGIN_WHITESPACE:
                        beginWhiteSpace(parser, c);
                        continue;
                    case S.TEXT:
                        if (parser.sawRoot && !parser.closedRoot) {
                            var starti = i - 1;
                            while(c && c !== "<" && c !== "&"){
                                c = charAt(chunk, i++);
                                if (c && parser.trackPosition) {
                                    parser.position++;
                                    if (c === "\n") {
                                        parser.line++;
                                        parser.column = 0;
                                    } else parser.column++;
                                }
                            }
                            parser.textNode += chunk.substring(starti, i - 1);
                        }
                        if (c === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                            parser.state = S.OPEN_WAKA;
                            parser.startTagPosition = parser.position;
                        } else {
                            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) strictFail(parser, "Text data outside of root node.");
                            if (c === "&") parser.state = S.TEXT_ENTITY;
                            else parser.textNode += c;
                        }
                        continue;
                    case S.SCRIPT:
                        if (c === "<") parser.state = S.SCRIPT_ENDING;
                        else parser.script += c;
                        continue;
                    case S.SCRIPT_ENDING:
                        if (c === "/") parser.state = S.CLOSE_TAG;
                        else {
                            parser.script += "<" + c;
                            parser.state = S.SCRIPT;
                        }
                        continue;
                    case S.OPEN_WAKA:
                        if (c === "!") {
                            parser.state = S.SGML_DECL;
                            parser.sgmlDecl = "";
                        } else if (isWhitespace(c)) ;
                        else if (isMatch(nameStart, c)) {
                            parser.state = S.OPEN_TAG;
                            parser.tagName = c;
                        } else if (c === "/") {
                            parser.state = S.CLOSE_TAG;
                            parser.tagName = "";
                        } else if (c === "?") {
                            parser.state = S.PROC_INST;
                            parser.procInstName = parser.procInstBody = "";
                        } else {
                            strictFail(parser, "Unencoded <");
                            if (parser.startTagPosition + 1 < parser.position) {
                                var pad = parser.position - parser.startTagPosition;
                                c = new Array(pad).join(" ") + c;
                            }
                            parser.textNode += "<" + c;
                            parser.state = S.TEXT;
                        }
                        continue;
                    case S.SGML_DECL:
                        if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                            emitNode(parser, "onopencdata");
                            parser.state = S.CDATA;
                            parser.sgmlDecl = "";
                            parser.cdata = "";
                        } else if (parser.sgmlDecl + c === "--") {
                            parser.state = S.COMMENT;
                            parser.comment = "";
                            parser.sgmlDecl = "";
                        } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                            parser.state = S.DOCTYPE;
                            if (parser.doctype || parser.sawRoot) strictFail(parser, "Inappropriately located doctype declaration");
                            parser.doctype = "";
                            parser.sgmlDecl = "";
                        } else if (c === ">") {
                            emitNode(parser, "onsgmldeclaration", parser.sgmlDecl);
                            parser.sgmlDecl = "";
                            parser.state = S.TEXT;
                        } else if (isQuote(c)) {
                            parser.state = S.SGML_DECL_QUOTED;
                            parser.sgmlDecl += c;
                        } else parser.sgmlDecl += c;
                        continue;
                    case S.SGML_DECL_QUOTED:
                        if (c === parser.q) {
                            parser.state = S.SGML_DECL;
                            parser.q = "";
                        }
                        parser.sgmlDecl += c;
                        continue;
                    case S.DOCTYPE:
                        if (c === ">") {
                            parser.state = S.TEXT;
                            emitNode(parser, "ondoctype", parser.doctype);
                            parser.doctype = true;
                        } else {
                            parser.doctype += c;
                            if (c === "[") parser.state = S.DOCTYPE_DTD;
                            else if (isQuote(c)) {
                                parser.state = S.DOCTYPE_QUOTED;
                                parser.q = c;
                            }
                        }
                        continue;
                    case S.DOCTYPE_QUOTED:
                        parser.doctype += c;
                        if (c === parser.q) {
                            parser.q = "";
                            parser.state = S.DOCTYPE;
                        }
                        continue;
                    case S.DOCTYPE_DTD:
                        parser.doctype += c;
                        if (c === "]") parser.state = S.DOCTYPE;
                        else if (isQuote(c)) {
                            parser.state = S.DOCTYPE_DTD_QUOTED;
                            parser.q = c;
                        }
                        continue;
                    case S.DOCTYPE_DTD_QUOTED:
                        parser.doctype += c;
                        if (c === parser.q) {
                            parser.state = S.DOCTYPE_DTD;
                            parser.q = "";
                        }
                        continue;
                    case S.COMMENT:
                        if (c === "-") parser.state = S.COMMENT_ENDING;
                        else parser.comment += c;
                        continue;
                    case S.COMMENT_ENDING:
                        if (c === "-") {
                            parser.state = S.COMMENT_ENDED;
                            parser.comment = textopts(parser.opt, parser.comment);
                            if (parser.comment) emitNode(parser, "oncomment", parser.comment);
                            parser.comment = "";
                        } else {
                            parser.comment += "-" + c;
                            parser.state = S.COMMENT;
                        }
                        continue;
                    case S.COMMENT_ENDED:
                        if (c !== ">") {
                            strictFail(parser, "Malformed comment");
                            parser.comment += "--" + c;
                            parser.state = S.COMMENT;
                        } else parser.state = S.TEXT;
                        continue;
                    case S.CDATA:
                        if (c === "]") parser.state = S.CDATA_ENDING;
                        else parser.cdata += c;
                        continue;
                    case S.CDATA_ENDING:
                        if (c === "]") parser.state = S.CDATA_ENDING_2;
                        else {
                            parser.cdata += "]" + c;
                            parser.state = S.CDATA;
                        }
                        continue;
                    case S.CDATA_ENDING_2:
                        if (c === ">") {
                            if (parser.cdata) emitNode(parser, "oncdata", parser.cdata);
                            emitNode(parser, "onclosecdata");
                            parser.cdata = "";
                            parser.state = S.TEXT;
                        } else if (c === "]") parser.cdata += "]";
                        else {
                            parser.cdata += "]]" + c;
                            parser.state = S.CDATA;
                        }
                        continue;
                    case S.PROC_INST:
                        if (c === "?") parser.state = S.PROC_INST_ENDING;
                        else if (isWhitespace(c)) parser.state = S.PROC_INST_BODY;
                        else parser.procInstName += c;
                        continue;
                    case S.PROC_INST_BODY:
                        if (!parser.procInstBody && isWhitespace(c)) continue;
                        else if (c === "?") parser.state = S.PROC_INST_ENDING;
                        else parser.procInstBody += c;
                        continue;
                    case S.PROC_INST_ENDING:
                        if (c === ">") {
                            emitNode(parser, "onprocessinginstruction", {
                                name: parser.procInstName,
                                body: parser.procInstBody
                            });
                            parser.procInstName = parser.procInstBody = "";
                            parser.state = S.TEXT;
                        } else {
                            parser.procInstBody += "?" + c;
                            parser.state = S.PROC_INST_BODY;
                        }
                        continue;
                    case S.OPEN_TAG:
                        if (isMatch(nameBody, c)) parser.tagName += c;
                        else {
                            newTag(parser);
                            if (c === ">") openTag(parser);
                            else if (c === "/") parser.state = S.OPEN_TAG_SLASH;
                            else {
                                if (!isWhitespace(c)) strictFail(parser, "Invalid character in tag name");
                                parser.state = S.ATTRIB;
                            }
                        }
                        continue;
                    case S.OPEN_TAG_SLASH:
                        if (c === ">") {
                            openTag(parser, true);
                            closeTag(parser);
                        } else {
                            strictFail(parser, "Forward-slash in opening tag not followed by >");
                            parser.state = S.ATTRIB;
                        }
                        continue;
                    case S.ATTRIB:
                        if (isWhitespace(c)) continue;
                        else if (c === ">") openTag(parser);
                        else if (c === "/") parser.state = S.OPEN_TAG_SLASH;
                        else if (isMatch(nameStart, c)) {
                            parser.attribName = c;
                            parser.attribValue = "";
                            parser.state = S.ATTRIB_NAME;
                        } else strictFail(parser, "Invalid attribute name");
                        continue;
                    case S.ATTRIB_NAME:
                        if (c === "=") parser.state = S.ATTRIB_VALUE;
                        else if (c === ">") {
                            strictFail(parser, "Attribute without value");
                            parser.attribValue = parser.attribName;
                            attrib(parser);
                            openTag(parser);
                        } else if (isWhitespace(c)) parser.state = S.ATTRIB_NAME_SAW_WHITE;
                        else if (isMatch(nameBody, c)) parser.attribName += c;
                        else strictFail(parser, "Invalid attribute name");
                        continue;
                    case S.ATTRIB_NAME_SAW_WHITE:
                        if (c === "=") parser.state = S.ATTRIB_VALUE;
                        else if (isWhitespace(c)) continue;
                        else {
                            strictFail(parser, "Attribute without value");
                            parser.tag.attributes[parser.attribName] = "";
                            parser.attribValue = "";
                            emitNode(parser, "onattribute", {
                                name: parser.attribName,
                                value: ""
                            });
                            parser.attribName = "";
                            if (c === ">") openTag(parser);
                            else if (isMatch(nameStart, c)) {
                                parser.attribName = c;
                                parser.state = S.ATTRIB_NAME;
                            } else {
                                strictFail(parser, "Invalid attribute name");
                                parser.state = S.ATTRIB;
                            }
                        }
                        continue;
                    case S.ATTRIB_VALUE:
                        if (isWhitespace(c)) continue;
                        else if (isQuote(c)) {
                            parser.q = c;
                            parser.state = S.ATTRIB_VALUE_QUOTED;
                        } else {
                            strictFail(parser, "Unquoted attribute value");
                            parser.state = S.ATTRIB_VALUE_UNQUOTED;
                            parser.attribValue = c;
                        }
                        continue;
                    case S.ATTRIB_VALUE_QUOTED:
                        if (c !== parser.q) {
                            if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                            else parser.attribValue += c;
                            continue;
                        }
                        attrib(parser);
                        parser.q = "";
                        parser.state = S.ATTRIB_VALUE_CLOSED;
                        continue;
                    case S.ATTRIB_VALUE_CLOSED:
                        if (isWhitespace(c)) parser.state = S.ATTRIB;
                        else if (c === ">") openTag(parser);
                        else if (c === "/") parser.state = S.OPEN_TAG_SLASH;
                        else if (isMatch(nameStart, c)) {
                            strictFail(parser, "No whitespace between attributes");
                            parser.attribName = c;
                            parser.attribValue = "";
                            parser.state = S.ATTRIB_NAME;
                        } else strictFail(parser, "Invalid attribute name");
                        continue;
                    case S.ATTRIB_VALUE_UNQUOTED:
                        if (!isAttribEnd(c)) {
                            if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_U;
                            else parser.attribValue += c;
                            continue;
                        }
                        attrib(parser);
                        if (c === ">") openTag(parser);
                        else parser.state = S.ATTRIB;
                        continue;
                    case S.CLOSE_TAG:
                        if (!parser.tagName) {
                            if (isWhitespace(c)) continue;
                            else if (notMatch(nameStart, c)) {
                                if (parser.script) {
                                    parser.script += "</" + c;
                                    parser.state = S.SCRIPT;
                                } else strictFail(parser, "Invalid tagname in closing tag.");
                            } else parser.tagName = c;
                        } else if (c === ">") closeTag(parser);
                        else if (isMatch(nameBody, c)) parser.tagName += c;
                        else if (parser.script) {
                            parser.script += "</" + parser.tagName;
                            parser.tagName = "";
                            parser.state = S.SCRIPT;
                        } else {
                            if (!isWhitespace(c)) strictFail(parser, "Invalid tagname in closing tag");
                            parser.state = S.CLOSE_TAG_SAW_WHITE;
                        }
                        continue;
                    case S.CLOSE_TAG_SAW_WHITE:
                        if (isWhitespace(c)) continue;
                        if (c === ">") closeTag(parser);
                        else strictFail(parser, "Invalid characters in closing tag");
                        continue;
                    case S.TEXT_ENTITY:
                    case S.ATTRIB_VALUE_ENTITY_Q:
                    case S.ATTRIB_VALUE_ENTITY_U:
                        var returnState;
                        var buffer;
                        switch(parser.state){
                            case S.TEXT_ENTITY:
                                returnState = S.TEXT;
                                buffer = "textNode";
                                break;
                            case S.ATTRIB_VALUE_ENTITY_Q:
                                returnState = S.ATTRIB_VALUE_QUOTED;
                                buffer = "attribValue";
                                break;
                            case S.ATTRIB_VALUE_ENTITY_U:
                                returnState = S.ATTRIB_VALUE_UNQUOTED;
                                buffer = "attribValue";
                                break;
                        }
                        if (c === ";") {
                            var parsedEntity = parseEntity(parser);
                            if (parser.state === S.TEXT_ENTITY && !sax.ENTITIES[parser.entity] && parsedEntity !== "&" + parser.entity + ";") chunk = chunk.slice(0, i) + parsedEntity + chunk.slice(i);
                            else parser[buffer] += parsedEntity;
                            parser.entity = "";
                            parser.state = returnState;
                        } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) parser.entity += c;
                        else {
                            strictFail(parser, "Invalid character in entity name");
                            parser[buffer] += "&" + parser.entity + c;
                            parser.entity = "";
                            parser.state = returnState;
                        }
                        continue;
                    default:
                        throw new Error(parser, "Unknown state: " + parser.state);
                }
            }
            if (parser.position >= parser.bufferCheckPosition) checkBufferLength(parser);
            return parser;
        }
    })(exports);
})($a8848f9916d99690$var$sax);
const $a8848f9916d99690$var$SAX = $a8848f9916d99690$var$sax;
const $a8848f9916d99690$var$JSAPI$1 = $a8848f9916d99690$var$jsAPI;
const { textElems: $a8848f9916d99690$var$textElems$1  } = $a8848f9916d99690$var$_collections;
class $a8848f9916d99690$var$SvgoParserError extends Error {
    toString() {
        const lines = this.source.split(/\r?\n/);
        const startLine = Math.max(this.line - 3, 0);
        const endLine = Math.min(this.line + 2, lines.length);
        const lineNumberWidth = String(endLine).length;
        const startColumn = Math.max(this.column - 54, 0);
        const endColumn = Math.max(this.column + 20, 80);
        const code = lines.slice(startLine, endLine).map((line, index)=>{
            const lineSlice = line.slice(startColumn, endColumn);
            let ellipsisPrefix = "";
            let ellipsisSuffix = "";
            if (startColumn !== 0) ellipsisPrefix = startColumn > line.length - 1 ? " " : "…";
            if (endColumn < line.length - 1) ellipsisSuffix = "…";
            const number = startLine + 1 + index;
            const gutter = ` ${number.toString().padStart(lineNumberWidth)} | `;
            if (number === this.line) {
                const gutterSpacing = gutter.replace(/[^|]/g, " ");
                const lineSpacing = (ellipsisPrefix + line.slice(startColumn, this.column - 1)).replace(/[^\t]/g, " ");
                const spacing = gutterSpacing + lineSpacing;
                return `>${gutter}${ellipsisPrefix}${lineSlice}${ellipsisSuffix}\n ${spacing}^`;
            }
            return ` ${gutter}${ellipsisPrefix}${lineSlice}${ellipsisSuffix}`;
        }).join("\n");
        return `${this.name}: ${this.message}\n\n${code}\n`;
    }
    constructor(message, line, column, source, file){
        super(message);
        this.name = "SvgoParserError";
        this.message = `${file || "<input>"}:${line}:${column}: ${message}`;
        this.reason = message;
        this.line = line;
        this.column = column;
        this.source = source;
        if (Error.captureStackTrace) Error.captureStackTrace(this, $a8848f9916d99690$var$SvgoParserError);
    }
}
const $a8848f9916d99690$var$entityDeclaration = /<!ENTITY\s+(\S+)\s+(?:'([^']+)'|"([^"]+)")\s*>/g;
const $a8848f9916d99690$var$config = {
    strict: true,
    trim: false,
    normalize: false,
    lowercase: true,
    xmlns: true,
    position: true
};
const $a8848f9916d99690$var$parseSvg$1 = (data1, from)=>{
    const sax = $a8848f9916d99690$var$SAX.parser($a8848f9916d99690$var$config.strict, $a8848f9916d99690$var$config);
    const root = new $a8848f9916d99690$var$JSAPI$1({
        type: "root",
        children: []
    });
    let current = root;
    const stack = [
        root
    ];
    const pushToContent = (node)=>{
        const wrapped = new $a8848f9916d99690$var$JSAPI$1(node, current);
        current.children.push(wrapped);
        return wrapped;
    };
    sax.ondoctype = (doctype)=>{
        const node = {
            type: "doctype",
            name: "svg",
            data: {
                doctype: doctype
            }
        };
        pushToContent(node);
        const subsetStart = doctype.indexOf("[");
        if (subsetStart >= 0) {
            $a8848f9916d99690$var$entityDeclaration.lastIndex = subsetStart;
            let entityMatch = $a8848f9916d99690$var$entityDeclaration.exec(data1);
            while(entityMatch != null){
                sax.ENTITIES[entityMatch[1]] = entityMatch[2] || entityMatch[3];
                entityMatch = $a8848f9916d99690$var$entityDeclaration.exec(data1);
            }
        }
    };
    sax.onprocessinginstruction = (data)=>{
        const node = {
            type: "instruction",
            name: data.name,
            value: data.body
        };
        pushToContent(node);
    };
    sax.oncomment = (comment)=>{
        const node = {
            type: "comment",
            value: comment.trim()
        };
        pushToContent(node);
    };
    sax.oncdata = (cdata)=>{
        const node = {
            type: "cdata",
            value: cdata
        };
        pushToContent(node);
    };
    sax.onopentag = (data)=>{
        let element = {
            type: "element",
            name: data.name,
            attributes: {
            },
            children: []
        };
        for (const [name, attr] of Object.entries(data.attributes))element.attributes[name] = attr.value;
        element = pushToContent(element);
        current = element;
        stack.push(element);
    };
    sax.ontext = (text)=>{
        if (current.type === "element") {
            if ($a8848f9916d99690$var$textElems$1.includes(current.name)) {
                const node = {
                    type: "text",
                    value: text
                };
                pushToContent(node);
            } else if (/\S/.test(text)) {
                const node = {
                    type: "text",
                    value: text.trim()
                };
                pushToContent(node);
            }
        }
    };
    sax.onclosetag = ()=>{
        stack.pop();
        current = stack[stack.length - 1];
    };
    sax.onerror = (e)=>{
        const error = new $a8848f9916d99690$var$SvgoParserError(e.reason, e.line + 1, e.column, data1, from);
        if (e.message.indexOf("Unexpected end") === -1) throw error;
    };
    sax.write(data1).close();
    return root;
};
$a8848f9916d99690$var$parser.parseSvg = $a8848f9916d99690$var$parseSvg$1;
var $a8848f9916d99690$var$stringifier = {
};
const { textElems: $a8848f9916d99690$var$textElems  } = $a8848f9916d99690$var$_collections;
const $a8848f9916d99690$var$encodeEntity = (char)=>$a8848f9916d99690$var$entities[char]
;
const $a8848f9916d99690$var$defaults = {
    doctypeStart: "<!DOCTYPE",
    doctypeEnd: ">",
    procInstStart: "<?",
    procInstEnd: "?>",
    tagOpenStart: "<",
    tagOpenEnd: ">",
    tagCloseStart: "</",
    tagCloseEnd: ">",
    tagShortStart: "<",
    tagShortEnd: "/>",
    attrStart: '="',
    attrEnd: '"',
    commentStart: "\x3c!--",
    commentEnd: "--\x3e",
    cdataStart: "<![CDATA[",
    cdataEnd: "]]>",
    textStart: "",
    textEnd: "",
    indent: 4,
    regEntities: /[&'"<>]/g,
    regValEntities: /[&"<>]/g,
    encodeEntity: $a8848f9916d99690$var$encodeEntity,
    pretty: false,
    useShortTags: true,
    eol: "lf",
    finalNewline: false
};
const $a8848f9916d99690$var$entities = {
    "&": "&amp;",
    "'": "&apos;",
    '"': "&quot;",
    ">": "&gt;",
    "<": "&lt;"
};
const $a8848f9916d99690$var$stringifySvg$1 = (data, userOptions = {
})=>{
    const config1 = {
        ...$a8848f9916d99690$var$defaults,
        ...userOptions
    };
    const indent = config1.indent;
    let newIndent = "    ";
    if (typeof indent === "number" && Number.isNaN(indent) === false) newIndent = indent < 0 ? "\t" : " ".repeat(indent);
    else if (typeof indent === "string") newIndent = indent;
    const state = {
        width: undefined,
        height: undefined,
        indent: newIndent,
        textContext: null,
        indentLevel: 0
    };
    const eol = config1.eol === "crlf" ? "\r\n" : "\n";
    if (config1.pretty) {
        config1.doctypeEnd += eol;
        config1.procInstEnd += eol;
        config1.commentEnd += eol;
        config1.cdataEnd += eol;
        config1.tagShortEnd += eol;
        config1.tagOpenEnd += eol;
        config1.tagCloseEnd += eol;
        config1.textEnd += eol;
    }
    let svg = $a8848f9916d99690$var$stringifyNode(data, config1, state);
    if (config1.finalNewline && svg.length > 0 && svg[svg.length - 1] !== "\n") svg += eol;
    return {
        data: svg,
        info: {
            width: state.width,
            height: state.height
        }
    };
};
$a8848f9916d99690$var$stringifier.stringifySvg = $a8848f9916d99690$var$stringifySvg$1;
const $a8848f9916d99690$var$stringifyNode = (data, config2, state)=>{
    let svg = "";
    state.indentLevel += 1;
    for (const item of data.children){
        if (item.type === "element") svg += $a8848f9916d99690$var$stringifyElement(item, config2, state);
        if (item.type === "text") svg += $a8848f9916d99690$var$stringifyText(item, config2, state);
        if (item.type === "doctype") svg += $a8848f9916d99690$var$stringifyDoctype(item, config2);
        if (item.type === "instruction") svg += $a8848f9916d99690$var$stringifyInstruction(item, config2);
        if (item.type === "comment") svg += $a8848f9916d99690$var$stringifyComment(item, config2);
        if (item.type === "cdata") svg += $a8848f9916d99690$var$stringifyCdata(item, config2, state);
    }
    state.indentLevel -= 1;
    return svg;
};
const $a8848f9916d99690$var$createIndent = (config3, state)=>{
    let indent = "";
    if (config3.pretty && state.textContext == null) indent = state.indent.repeat(state.indentLevel - 1);
    return indent;
};
const $a8848f9916d99690$var$stringifyDoctype = (node, config4)=>config4.doctypeStart + node.data.doctype + config4.doctypeEnd
;
const $a8848f9916d99690$var$stringifyInstruction = (node, config5)=>config5.procInstStart + node.name + " " + node.value + config5.procInstEnd
;
const $a8848f9916d99690$var$stringifyComment = (node, config6)=>config6.commentStart + node.value + config6.commentEnd
;
const $a8848f9916d99690$var$stringifyCdata = (node, config7, state)=>$a8848f9916d99690$var$createIndent(config7, state) + config7.cdataStart + node.value + config7.cdataEnd
;
const $a8848f9916d99690$var$stringifyElement = (node, config8, state)=>{
    if (node.name === "svg" && node.attributes.width != null && node.attributes.height != null) {
        state.width = node.attributes.width;
        state.height = node.attributes.height;
    }
    if (node.children.length === 0) {
        if (config8.useShortTags) return $a8848f9916d99690$var$createIndent(config8, state) + config8.tagShortStart + node.name + $a8848f9916d99690$var$stringifyAttributes(node, config8) + config8.tagShortEnd;
        else return $a8848f9916d99690$var$createIndent(config8, state) + config8.tagShortStart + node.name + $a8848f9916d99690$var$stringifyAttributes(node, config8) + config8.tagOpenEnd + config8.tagCloseStart + node.name + config8.tagCloseEnd;
    } else {
        let tagOpenStart = config8.tagOpenStart;
        let tagOpenEnd = config8.tagOpenEnd;
        let tagCloseStart = config8.tagCloseStart;
        let tagCloseEnd = config8.tagCloseEnd;
        let openIndent = $a8848f9916d99690$var$createIndent(config8, state);
        let closeIndent = $a8848f9916d99690$var$createIndent(config8, state);
        if (state.textContext) {
            tagOpenStart = $a8848f9916d99690$var$defaults.tagOpenStart;
            tagOpenEnd = $a8848f9916d99690$var$defaults.tagOpenEnd;
            tagCloseStart = $a8848f9916d99690$var$defaults.tagCloseStart;
            tagCloseEnd = $a8848f9916d99690$var$defaults.tagCloseEnd;
            openIndent = "";
        } else if ($a8848f9916d99690$var$textElems.includes(node.name)) {
            tagOpenEnd = $a8848f9916d99690$var$defaults.tagOpenEnd;
            tagCloseStart = $a8848f9916d99690$var$defaults.tagCloseStart;
            closeIndent = "";
            state.textContext = node;
        }
        const children = $a8848f9916d99690$var$stringifyNode(node, config8, state);
        if (state.textContext === node) state.textContext = null;
        return openIndent + tagOpenStart + node.name + $a8848f9916d99690$var$stringifyAttributes(node, config8) + tagOpenEnd + children + closeIndent + tagCloseStart + node.name + tagCloseEnd;
    }
};
const $a8848f9916d99690$var$stringifyAttributes = (node, config9)=>{
    let attrs = "";
    for (const [name75, value] of Object.entries(node.attributes))if (value !== undefined) {
        const encodedValue = value.toString().replace(config9.regValEntities, config9.encodeEntity);
        attrs += " " + name75 + config9.attrStart + encodedValue + config9.attrEnd;
    } else attrs += " " + name75;
    return attrs;
};
const $a8848f9916d99690$var$stringifyText = (node, config10, state)=>$a8848f9916d99690$var$createIndent(config10, state) + config10.textStart + node.value.replace(config10.regEntities, config10.encodeEntity) + (state.textContext ? "" : config10.textEnd)
;
const { defaultPlugins: $a8848f9916d99690$var$defaultPlugins , resolvePluginConfig: $a8848f9916d99690$var$resolvePluginConfig , extendDefaultPlugins: $a8848f9916d99690$var$extendDefaultPlugins  } = $a8848f9916d99690$var$config$1;
const { parseSvg: $a8848f9916d99690$var$parseSvg  } = $a8848f9916d99690$var$parser;
const { stringifySvg: $a8848f9916d99690$var$stringifySvg  } = $a8848f9916d99690$var$stringifier;
const { invokePlugins: $a8848f9916d99690$var$invokePlugins  } = $a8848f9916d99690$var$plugins;
const $a8848f9916d99690$var$JSAPI = $a8848f9916d99690$var$jsAPI;
const { encodeSVGDatauri: $a8848f9916d99690$var$encodeSVGDatauri  } = $a8848f9916d99690$var$tools;
var $a8848f9916d99690$export$33b65fff8fc8cc8a = $a8848f9916d99690$export$2e2bcd8739ae039.extendDefaultPlugins = $a8848f9916d99690$var$extendDefaultPlugins;
const $a8848f9916d99690$var$optimize = (input, config11)=>{
    if (config11 == null) config11 = {
    };
    if (typeof config11 !== "object") throw Error("Config should be an object");
    const maxPassCount = config11.multipass ? 10 : 1;
    let prevResultSize = Number.POSITIVE_INFINITY;
    let svgjs = null;
    const info = {
    };
    if (config11.path != null) info.path = config11.path;
    for(let i = 0; i < maxPassCount; i += 1){
        info.multipassCount = i;
        try {
            svgjs = $a8848f9916d99690$var$parseSvg(input, config11.path);
        } catch (error) {
            return {
                error: error.toString(),
                modernError: error
            };
        }
        if (svgjs.error != null) {
            if (config11.path != null) svgjs.path = config11.path;
            return svgjs;
        }
        const plugins = config11.plugins || $a8848f9916d99690$var$defaultPlugins;
        if (Array.isArray(plugins) === false) throw Error("Invalid plugins list. Provided 'plugins' in config should be an array.");
        const resolvedPlugins = plugins.map($a8848f9916d99690$var$resolvePluginConfig);
        const globalOverrides = {
        };
        if (config11.floatPrecision != null) globalOverrides.floatPrecision = config11.floatPrecision;
        svgjs = $a8848f9916d99690$var$invokePlugins(svgjs, info, resolvedPlugins, null, globalOverrides);
        svgjs = $a8848f9916d99690$var$stringifySvg(svgjs, config11.js2svg);
        if (svgjs.data.length < prevResultSize) {
            input = svgjs.data;
            prevResultSize = svgjs.data.length;
        } else {
            if (config11.datauri) svgjs.data = $a8848f9916d99690$var$encodeSVGDatauri(svgjs.data, config11.datauri);
            if (config11.path != null) svgjs.path = config11.path;
            return svgjs;
        }
    }
    return svgjs;
};
var $a8848f9916d99690$export$f90719f89646befa = $a8848f9916d99690$export$2e2bcd8739ae039.optimize = $a8848f9916d99690$var$optimize;
const $a8848f9916d99690$var$createContentItem = (data)=>new $a8848f9916d99690$var$JSAPI(data)
;
var $a8848f9916d99690$export$93ac4c7d6c22afbc = $a8848f9916d99690$export$2e2bcd8739ae039.createContentItem = $a8848f9916d99690$var$createContentItem;


function $549e0f202f0d259c$export$7a2bdede98851ac5(e) {
    // Make an image out of the slotted node and assign it as the background image
    if (this.shadowRoot.querySelector("slot").assignedNodes().length > 0) {
        // pass the slots first child to wrapIfTextNode
        // If its a text node it will be returned wrapped in a span,
        // Otherwise it returns the unmodified element node.
        const el = $4c225ee090a8f350$export$39727932d807f83e.bind(this)(e.target.assignedNodes()[0]);
        // The Element needs to be visible to create an image of it
        if (el.style.opacity === "0") el.style.opacity = 1;
        // Get the width and height from the bounding client rect and get an integer instead of float
        const rect = (el === null || el === void 0 ? void 0 : el.getBoundingClientRect) ? el.getBoundingClientRect() : this.getBoundingClientRect();
        const rectWidth = Math.ceil(rect.width);
        const rectHeight = Math.ceil(rect.height);
        const elStyles = $4c225ee090a8f350$export$74d0f8ed30f6559d(el);
        // Need to declare a set of default styles to overwrite the
        // ones that are generated by domtoimage that cause issues.
        // ! Need to use Bracket Accessor to overwrite the properties properly
        const overwrite = {
        };
        overwrite["margin-block"] = "0"; // margins were applied in the SVG
        overwrite["white-space"] = "nowrap"; // Fixes unwanted text nodes wrapping
        // User will have to figure their own font compensation amount
        const compensation = this.fontCompensation;
        (/*@__PURE__*/$parcel$interopDefault($6716112bc694bd6e$exports)).toSvg(el, {
            width: rectWidth + parseInt(elStyles.marginRight.replace("px")) + parseInt(elStyles.marginLeft.replace("px")) + compensation,
            height: rectHeight,
            style: Object.assign(elStyles, overwrite)
        }).then((dataURL)=>{
            //! Testing SVGO
            console.log($a8848f9916d99690$export$2e2bcd8739ae039);
            // Set the returned SVG data as the background image
            this.src = dataURL;
            // Adjust the width and height of the component
            // or the returned image won't display
            this.width = rectWidth + parseInt(elStyles.marginRight.replace("px")) + parseInt(elStyles.marginLeft.replace("px")) + "px";
            this.height = rectHeight + parseInt(elStyles.marginTop.replace("px")) + parseInt(elStyles.marginBottom.replace("px")) + "px";
            // Don't display the original slotted element
            // or there will be an ugly overlay
            el.style.opacity = 0;
        });
    }
}


const $c38b013c361dbfdf$var$template = document.createElement("template");
const $c38b013c361dbfdf$var$html = `<div class="neonShadow neon"><slot></slot></div>`;
var // Private Methods for internal component settings
// Updated the filter that is applied to the neonShadow::after pseudo element
_updateFilter = new WeakSet(), // TODO: These functions need to be re-evaluated, users may want to set a width or height of 0
// Checks that the neon-el has a width greater than zero
_hasWidth = new WeakSet(), // Checks that the neon-el has a height greater than zero
_hasHeight = new WeakSet();
class $c38b013c361dbfdf$var$Neon extends HTMLElement {
    // Set up to watch changes on these attributes
    static get observedAttributes() {
        return [
            "src",
            "margin",
            "width",
            "height",
            "blur-amt",
            "font-compensation"
        ];
    }
    connectedCallback() {
        $c7458e7a3415e664$export$2e2bcd8739ae039(this, _neon, [
            ...this.shadowRoot.styleSheets[0].cssRules
        ].find((rule)=>rule.selectorText === ".neon"
        ).style);
        $c7458e7a3415e664$export$2e2bcd8739ae039(this, _neonShadow, [
            ...this.shadowRoot.styleSheets[0].cssRules
        ].find((rule)=>rule.selectorText === ".neonShadow::after"
        ).style);
        $c7458e7a3415e664$export$2e2bcd8739ae039(this, _root, this.shadowRoot.querySelector(".neon"));
        // If attributes aren't set by the user, set their defaults
        if (!this.hasAttribute("src") && this.shadowRoot.querySelector("slot").assignedNodes().length <= 0) this.src = "./img/neon-el.png";
        if (!this.hasAttribute("blur-amt")) this.blurAmt = $5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _default).blurAmt;
        if (!this.hasAttribute("width")) this.width = $2eec7714a30d92b0$export$2e2bcd8739ae039(this, _hasWidth, hasWidth).call(this) ? $5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _default).width : "150px";
        if (!this.hasAttribute("height")) this.height = $2eec7714a30d92b0$export$2e2bcd8739ae039(this, _hasHeight, hasHeight).call(this) ? $5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _default).height : "150px";
        if (!this.hasAttribute("margin")) this.margin = $5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _default).margin;
        if (!this.hasAttribute("font-compensation")) this.fontCompensation = $5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _default).fontCompensation;
        // Add an event listener for when the slot changes,
        // To copy the slot contents as an image and set as a blurred background image
        //! Need to figure out a way to prevent this from causing multiple
        //! events to be processed when the text node is swapped
        this.shadowRoot.querySelector("slot").addEventListener("slotchange", $549e0f202f0d259c$export$7a2bdede98851ac5.bind(this));
    }
    // Processes the observed/watched attributes as they are changed
    attributeChangedCallback(name, o, n) {
        switch(name){
            case "src":
                $5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _neon).backgroundImage = `url('${this.src}')`;
                break;
            case "blur-amt":
                $2eec7714a30d92b0$export$2e2bcd8739ae039(this, _updateFilter, updateFilter).call(this);
                break;
            case "margin":
                $5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _neon).margin = this.margin;
                break;
            case "width":
                $5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _neon).width = this.width;
                break;
            case "height":
                $5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _neon).height = this.height;
                break;
            case "font-compensation":
                if (o && o !== n) {
                    this.fontCompensation = n;
                    this.shadowRoot.querySelector("slot").dispatchEvent(new Event("slotchange"));
                }
        }
    }
    // Getters and Setters for each attribute
    get src() {
        return this.getAttribute("src");
    }
    set src(n) {
        this.setAttribute("src", n);
    }
    get blurAmt() {
        return this.getAttribute("blur-amt");
    }
    set blurAmt(n) {
        this.setAttribute("blur-amt", n);
    }
    get margin() {
        return this.getAttribute("margin");
    }
    set margin(n) {
        this.setAttribute("margin", n);
    }
    get width() {
        return this.getAttribute("width");
    }
    set width(n) {
        this.setAttribute("width", n);
    }
    get height() {
        return this.getAttribute("height");
    }
    set height(n) {
        this.setAttribute("height", n);
    }
    get fontCompensation() {
        return parseInt(this.getAttribute("font-compensation"));
    }
    set fontCompensation(n) {
        // The compensation amount MUST be a valid number
        let compensation = parseInt(n);
        if (Number.isNaN(compensation)) compensation = 0;
        this.setAttribute("font-compensation", compensation);
    }
    constructor(){
        super();
        // A private object that holds some default values
        _default.set(this, {
            writable: true,
            value: {
                blurAmt: 20,
                margin: "inherit",
                width: "inherit",
                height: "inherit",
                fontCompensation: 0
            }
        });
        _filter.set(this, {
            writable: true,
            value: `drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.5)) blur(${$5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _default).blurAmt}px)`
        });
        // Create these private variables to be updated later in the connected hook
        _neonShadow.set(this, {
            writable: true,
            value: null
        });
        _neon.set(this, {
            writable: true,
            value: null
        });
        _root.set(this, {
            writable: true,
            value: null
        });
        _updateFilter.add(this);
        _hasWidth.add(this);
        _hasHeight.add(this);
        this.neonId = $c38b013c361dbfdf$var$Neon.count;
        $c38b013c361dbfdf$var$Neon.count = $c38b013c361dbfdf$var$Neon.count + 1;
        const css = `
<style>
      .neon {
        margin: ${$5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _default).margin};
        width: ${$5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _default).width};
        height: ${$5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _default).height};
        display: grid;
        justify-content: center;
        align-content: center;
        background-position: center center;
        background-repeat: no-repeat;
        background-size: contain;
      }

      .neonShadow {
        position: relative;
      }

      .neonShadow::after {
        content: "";
        width: 100%;
        height: 100%;
        position: absolute;
        background: inherit;
        background-position: center center;
        filter: ${$5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _filter)};
        z-index: -1;

        /* animation time! */
        animation: oscillate 1s cubic-bezier(0.17, 0.67, 0.45, 1.32) infinite alternate;
      }

      @keyframes oscillate {
        from {
          transform: scale(1, 1);
        }

        to {
          transform: scale(1.2, 1.2);
        }
      }
</style>
`;
        $c38b013c361dbfdf$var$template.innerHTML = `
      ${css}
      ${$c38b013c361dbfdf$var$html}
      `;
        this.attachShadow({
            mode: "open"
        }).appendChild($c38b013c361dbfdf$var$template.content.cloneNode(true));
    }
}
$cfef344cd38c105c$export$2e2bcd8739ae039($c38b013c361dbfdf$var$Neon, "count", 0);
var _default = new WeakMap();
var _filter = new WeakMap();
var _neonShadow = new WeakMap();
var _neon = new WeakMap();
var _root = new WeakMap();
function updateFilter() {
    this.filter = `drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.5)) blur(${this.blurAmt}px)`;
    $5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _neonShadow).filter = this.filter;
}
function hasWidth() {
    return getComputedStyle($5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _root)).getPropertyValue("width") !== "0px";
}
function hasHeight() {
    return getComputedStyle($5c90f01a1e93ad01$export$2e2bcd8739ae039(this, _root)).getPropertyValue("height") !== "0px";
}
customElements.define("neon-el", $c38b013c361dbfdf$var$Neon);
var $c38b013c361dbfdf$export$2e2bcd8739ae039 = $c38b013c361dbfdf$var$Neon;


export {$c38b013c361dbfdf$export$2e2bcd8739ae039 as default};
//# sourceMappingURL=neon-el.js.map
